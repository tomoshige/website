{"config":{"lang":["ja"],"separator":"[\\s\\-\u3000\u3001\u3002\uff0c\uff0e]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Welcome to Statistical Learning Laboratory","text":"<p>My name is Tomoshige Nakamura. I am an Assistant Professor in the Department of Health Data Science at Juntendo University. I received my Ph.D. in Engineering from the Keio University in Feb, 2021. I am very fortunate to be supervised by Professor Mihoko Minami. I am also very fortunate to work with Professor Hiroshi Shiraishi on random forest research.</p>"},{"location":"#contact","title":"Contact","text":"<ul> <li>Address : 6-8-1, Hinode, Urayasu Shi, Chiba Prefecture, 279-0013, Japan</li> <li>Email : t.nakamura.gs[at]juntendo.ac.jp</li> </ul>"},{"location":"#research-interest","title":"Research Interest","text":"<p>My research focuses on elucidating the properties of tree-structured models, such as decision trees and regression trees, and developing novel variants of these models. Tree-structured models have a unique advantage in that a single tree can effectively compress and visualize data, while an ensemble of multiple trees (e.g., random forests) can attain high predictive accuracy. Moreover, these models accommodate continuous, categorical, and discrete variables in a unified manner, making them both versatile and practical. It is no surprise, therefore, that tree-based methods consistently appear among the top-performing approaches in competitive data analytics venues such as Kaggle.</p> <p>Recent theoretical advances have shed light on the statistical properties of tree-structured models, pointing to continued improvements in their performance and interpretability. For example, new modeling techniques, such as recursive partitioning models, Isolation Forests for anomaly detection, and causal trees and forests for causal inference, highlight the growing versatility of tree-structured approaches. These models also provide a straightforward measure of variable importance, enabling analysts and domain experts to interpret how different predictors contribute to the final outcome.</p> <p>In my work, I aim to develop new tree architectures that not only preserve high predictive accuracy but also support more complex background information. By integrating hierarchical Bayesian models, it becomes possible to combine rich contextual details\u2014such as multi-level factors or nested data structures\u2014while maintaining strong predictive capabilities. This fusion of tree-based learning and hierarchical modeling is especially promising for tackling challenging research questions that require both flexibility and interpretability.</p> <p>Beyond conventional domains, tree-structured models show great potential in health and medical applications. For instance, the interpretability offered by these models can help medical professionals identify critical risk factors and intervene more effectively. Their ability to deal with heterogeneous data types\u2014ranging from imaging features to genomic markers\u2014makes them well suited for integrative analyses in personalized medicine and other emerging areas. Although this is a challenging field due to the complexity and sensitivity of medical data, the ongoing convergence of statistical theory, machine learning, and healthcare innovation offers immense opportunities to push these models into clinical practice.</p> <p>By advancing the theoretical and practical foundations of tree-structured models, my research strives to illuminate new frontiers in data-driven decision making. From competitive data analytics to healthcare, these models hold promise for more interpretable, accurate, and robust solutions in a wide range of applications. It is my goal to continue exploring these possibilities, driving tree-based methods into even more challenging and impactful domains.</p>"},{"location":"#links","title":"Links","text":"<ul> <li>Department of Health Data Science, Juntendo University</li> <li>Stat Lab, Department of Mathematics, Keio Universiry</li> </ul>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre> \\[ f(x) = \\int_{-\\infty}^\\infty     \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}     \\,d\\xi \\] <p>inline tex codes \\(E=mc^2\\).</p> \\[ \\cos x=\\sum_{k=0}^{\\infty}\\frac{(-1)^k}{(2k)!}x^{2k} \\]"},{"location":"lectures/","title":"Lecture","text":"<p>\u62c5\u5f53\u3057\u3066\u3044\u308b\u8b1b\u7fa9\u306e\u30da\u30fc\u30b8\u3067\u3059\u3002</p>"},{"location":"lectures/#i-ii","title":"\u7dda\u5f62\u4ee3\u6570\u5b66I / \u57fa\u790e / II","text":"<p>\u672c\u8b1b\u7fa9\u3067\u306f\u3001\u7dda\u5f62\u4ee3\u6570\u5b66\u306e\u57fa\u672c\u6982\u5ff5\u3068\u305d\u306e\u5fdc\u7528\u306b\u3064\u3044\u3066\u5b66\u3073\u307e\u3059\u3002\u7dda\u5f62\u4ee3\u6570\u5b66\u306f\u3001\u6570\u5b66\u3001\u7269\u7406\u5b66\u3001\u5de5\u5b66\u3001\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u306a\u3069\u591a\u304f\u306e\u5206\u91ce\u3067\u91cd\u8981\u306a\u5f79\u5272\u3092\u679c\u305f\u3057\u307e\u3059\u3002\u672c\u8b1b\u7fa9\u3092\u901a\u3058\u3066\u3001\u30d9\u30af\u30c8\u30eb\u3001\u884c\u5217\u3001\u9023\u7acb\u65b9\u7a0b\u5f0f\u3001\u884c\u5217\u5f0f\u3001\u7dda\u5f62\u7a7a\u9593\u3001\u7dda\u5f62\u5199\u50cf\u3001\u56fa\u6709\u5024\u3068\u56fa\u6709\u30d9\u30af\u30c8\u30eb\u306a\u3069\u306e\u57fa\u672c\u7684\u306a\u6982\u5ff5\u3092\u7406\u89e3\u3059\u308b\u3053\u3068\u3092\u76ee\u6307\u3057\u307e\u3059\u3002Lecture page</p>"},{"location":"lectures/#_1","title":"\u6570\u7406\u60c5\u5831\u30ea\u30c6\u30e9\u30b7\u30fc","text":"<p>\u672c\u8b1b\u7fa9\u306f\u3001\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u306e\u57fa\u790e\u3092\u5b66\u3076\u3053\u3068\u3092\u76ee\u7684\u3068\u3057\u3001\u6570\u5b66\uff08\u4ee3\u6570\u3084\u5fae\u7a4d\u5206\uff09\u3084\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u4e8b\u524d\u77e5\u8b58\u3092\u5fc5\u8981\u3068\u3057\u307e\u305b\u3093\u3002\u672c\u8b1b\u7fa9\u3067\u306f\u3001\u30c7\u30fc\u30bf\u306e\u5206\u6790\u3084\u53ef\u8996\u5316\u3001\u7d71\u8a08\u30e2\u30c7\u30eb\u306e\u69cb\u7bc9\u3001\u7d71\u8a08\u7684\u63a8\u8ad6\u3092\u5b9f\u8df5\u3057\u306a\u304c\u3089\u5b66\u3073\u307e\u3059\u3002\u4f7f\u7528\u3059\u308b\u74b0\u5883\u306f\u3001Google Colab + \u5185\u8535\u3055\u308c\u3066\u3044\u308b\u751f\u6210AI\u3092\u7528\u3044\u307e\u3059\u3002\u4f7f\u7528\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306f Python \u3067\u3042\u308a\u3001\u7279\u306b pandas \u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u6d3b\u7528\u3057\u3066\u30c7\u30fc\u30bf\u5206\u6790\u3092\u884c\u3044\u307e\u3059\u3002Lecture page</p>"},{"location":"lectures/#i-ii_1","title":"\u78ba\u7387\u3068\u7d71\u8a08I / II","text":"<p>\u672c\u8b1b\u7fa9\u306f\u3001\u78ba\u7387\u3068\u7d71\u8a08 I \u306e\u7d9a\u7de8\u3068\u3057\u3066\u3001\u78ba\u7387\u3068\u7d71\u8a08 II \u3067\u306f\u3001\u6570\u5b66\u7d71\u8a08\u5b66\u306e\u91cd\u8981\u306a\u6982\u5ff5\u3092\u5b66\u3076\u3053\u3068\u3092\u76ee\u7684\u3068\u3057\u307e\u3059\u3002\u672c\u8b1b\u7fa9\u3067\u306f\u3001\u78ba\u7387\u5909\u6570\u306e\u95a2\u6570\u3068\u3057\u3066\u306e\u63a8\u5b9a\u91cf\u3001\u6a19\u672c\u5206\u5e03\u3001\u63a8\u5b9a\u7406\u8ad6\u3001\u304a\u3088\u3073\u63a8\u5b9a\u91cf\u306e\u6027\u8cea\u306b\u95a2\u3059\u308b\u7406\u8ad6\u3068\u5fdc\u7528\u3092\u53d6\u308a\u6271\u3044\u307e\u3059\u3002\u8b1b\u7fa9\u3067\u306f\u7dda\u5f62\u4ee3\u6570\u304a\u3088\u3073\u5fae\u7a4d\u5206\u3092\u6d3b\u7528\u3057\u3066\u7406\u8ad6\u7684\u306a\u7d50\u679c\u3092\u5c0e\u304d\u51fa\u3057\u3001\u305d\u308c\u3089\u3092\u5b9f\u969b\u306e\u554f\u984c\u306b\u9069\u7528\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002Lecture page</p>"},{"location":"lectures/LA/","title":"Index","text":""},{"location":"lectures/LA/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul> \\[ f(x) = \\int_{-\\infty}^\\infty     \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}     \\,d\\xi \\] <p>inline tex codes \\(E=mc^2\\).</p> \\[ \\cos x=\\sum_{k=0}^{\\infty}\\frac{(-1)^k}{(2k)!}x^{2k} \\]"},{"location":"lectures/LA/00-vector-and-matrix/","title":"Prefare","text":"<p>aaaa</p>"},{"location":"lectures/LA/00-vector-and-matrix/#vectors","title":"Vectors","text":"<p>\\(a\\)\u3092\u30d9\u30af\u30c8\u30eb\u3068\u3059\u308b\u3002</p>"},{"location":"lectures/LA/00-vector-and-matrix/#matrix","title":"Matrix","text":""},{"location":"lectures/SIWS/","title":"Index","text":""},{"location":"lectures/SIWS/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul> \\[ f(x) = \\int_{-\\infty}^\\infty     \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}     \\,d\\xi \\] <p>inline tex codes \\(E=mc^2\\).</p> \\[ \\cos x=\\sum_{k=0}^{\\infty}\\frac{(-1)^k}{(2k)!}x^{2k} \\]"},{"location":"lectures/SIWS/01-getting-started/","title":"Python\u3067\u306e\u30c7\u30fc\u30bf\u5206\u6790\u3092\u59cb\u3081\u3088\u3046","text":"<p>Python\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u3092\u63a2\u7d22\u3059\u308b\u524d\u306b\u3001\u307e\u305a\u7406\u89e3\u3057\u3066\u304a\u304f\u3079\u304d\u91cd\u8981\u306a\u6982\u5ff5\u304c\u3042\u308a\u307e\u3059\u3002</p> <ol> <li>Python\u3068Google Colaboratory\u3068\u306f\u4f55\u304b\uff1f</li> <li>Python\u306e\u30b3\u30fc\u30c9\u306e\u66f8\u304d\u65b9</li> <li>Python\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u306f\uff1f</li> </ol> <p>\u3053\u308c\u3089\u306e\u6982\u5ff5\u306b\u3064\u3044\u3066\u3001\u6b21\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u8a73\u3057\u304f\u8aac\u660e\u3057\u307e\u3059\uff08\u30bb\u30af\u30b7\u30e7\u30f3aaa\uff09\u3002\u3059\u3067\u306b\u3042\u308b\u7a0b\u5ea6\u306e\u77e5\u8b58\u304c\u3042\u308b\u5834\u5408\u306f\u3001\u30bb\u30af\u30b7\u30e7\u30f3aaa \u306b\u9032\u3093\u3067\u3001\u6700\u521d\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u7d39\u4ecb\u3059\u308b\u90e8\u5206\u304b\u3089\u8aad\u307f\u59cb\u3081\u3066\u3082\u69cb\u3044\u307e\u305b\u3093\u3002\u672c\u66f8\u3067\u306f\u30012013\u5e74\u306b\u30cb\u30e5\u30fc\u30e8\u30fc\u30af\u5e02\uff08NYC\uff09\u306e\u4e3b\u89813\u7a7a\u6e2f\u304b\u3089\u51fa\u767a\u3057\u305f\u3059\u3079\u3066\u306e\u56fd\u5185\u7dda\u30d5\u30e9\u30a4\u30c8\u306e\u30c7\u30fc\u30bf \u3092\u6271\u3044\u3001\u4ee5\u964d\u306e\u7ae0\u3067\u8a73\u3057\u304f\u5206\u6790\u3057\u3066\u3044\u304d\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/01-getting-started/#python-google-colaboratory","title":"Python \u3068 Google Colaboratory\u3068\u306f\uff1f","text":"<p>\u672c\u66f8\u3067\u306f\u3001Python\u3092Google Colaboratory\uff08\u4ee5\u4e0b\u3001Google Colab\uff09 \u3092\u901a\u3058\u3066\u4f7f\u7528\u3059\u308b\u3053\u3068\u3092\u524d\u63d0\u3068\u3057\u307e\u3059\u3002\u521d\u3081\u3066\u306e\u65b9\u306e\u4e2d\u306b\u306f\u3001Python\u3068Google Colab\u306e\u9055\u3044\u304c\u308f\u304b\u308a\u306b\u304f\u3044\u3068\u611f\u3058\u308b\u3053\u3068\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u3053\u308c\u3092\u308f\u304b\u308a\u3084\u3059\u304f\u8aac\u660e\u3059\u308b\u3068\u3001Python\u306f\u8eca\u306e\u30a8\u30f3\u30b8\u30f3\u3001Google Colab\u306f\u8eca\u306e\u30c0\u30c3\u30b7\u30e5\u30dc\u30fc\u30c9 \u306e\u3088\u3046\u306a\u95a2\u4fc2\u306b\u3042\u308a\u307e\u3059\uff08\u56f3\u3092\u53c2\u7167\uff09\u3002</p> <p>Note</p> <p>\u3053\u3053\u306b\u30a4\u30e1\u30fc\u30b8\u56f3\u3092\u633f\u5165</p> <p>\u3082\u3046\u5c11\u3057\u8a73\u3057\u304f\u8aac\u660e\u3059\u308b\u3068\u3001Python\u306f\u8a08\u7b97\u3092\u5b9f\u884c\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e \u3067\u3042\u308a\u3001\u4e00\u65b9\u3067Google Colab\u306f\u3001Google\u793e\u304c\u63d0\u4f9b\u3059\u308b\u6a5f\u68b0\u5b66\u7fd2\u5411\u3051\u306e\u7d71\u5408\u958b\u767a\u74b0\u5883\uff08IDE\uff09 \u3067\u3059\u3002Google Colab\u306b\u306f\u3001Python\u3092\u4fbf\u5229\u306b\u4f7f\u3046\u305f\u3081\u306e\u3055\u307e\u3056\u307e\u306a\u6a5f\u80fd\u3084\u30c4\u30fc\u30eb\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3044\u307e\u3059\u3002</p> <p>\u3053\u308c\u306f\u3001\u904b\u8ee2\u3059\u308b\u3068\u304d\u306b\u30b9\u30d4\u30fc\u30c9\u30e1\u30fc\u30bf\u30fc\u3084\u30d0\u30c3\u30af\u30df\u30e9\u30fc\u3001\u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30b7\u30b9\u30c6\u30e0\u304c\u3042\u308b\u3053\u3068\u3067\u5b89\u5168\u304b\u3064\u30b9\u30e0\u30fc\u30ba\u306b\u904b\u8ee2\u3067\u304d\u308b\u306e\u3068\u540c\u3058\u3088\u3046\u306b\u3001Google Colab\u3092\u4f7f\u3046\u3053\u3068\u3067Python\u3092\u3088\u308a\u76f4\u611f\u7684\u304b\u3064\u52b9\u7387\u7684\u306b\u64cd\u4f5c\u3067\u304d\u308b \u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002</p>"},{"location":"lectures/SIWS/01-getting-started/#google-colaboratory-python","title":"Google Colaboratory \u3067 Python \u3092\u59cb\u3081\u308b","text":"<p>Google Colaboratory\uff08Google Colab\uff09 \u306f\u3001Google \u304c\u63d0\u4f9b\u3059\u308b\u7121\u6599\u306e\u30af\u30e9\u30a6\u30c9\u74b0\u5883\u3067\u3001Python \u3092\u30d6\u30e9\u30a6\u30b6\u4e0a\u3067\u5b9f\u884c\u3067\u304d\u308b\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u3059\u3002\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u4e0d\u8981\u3067\u4f7f\u3048\u308b\u305f\u3081\u3001\u521d\u5fc3\u8005\u3067\u3082\u7c21\u5358\u306b Python \u3092\u59cb\u3081\u3089\u308c\u307e\u3059\u3002</p> <ol> <li>Google Colab \u3092\u4f7f\u3046\u6e96\u5099</li> </ol> <p>Google Colab \u3092\u4f7f\u7528\u3059\u308b\u306b\u306f\u3001Google \u30a2\u30ab\u30a6\u30f3\u30c8\u304c\u5fc5\u8981\u3067\u3059\u3002\u4ee5\u4e0b\u306e\u624b\u9806\u306b\u5f93\u3063\u3066\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3092\u884c\u3044\u307e\u3057\u3087\u3046\u3002</p> <ol> <li> <p>Google Colab \u306b\u30a2\u30af\u30bb\u30b9</p> </li> <li> <p>Google Colaboratory \u306b\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\u3002</p> </li> <li> <p>Google \u30a2\u30ab\u30a6\u30f3\u30c8\u3067\u30ed\u30b0\u30a4\u30f3\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u65b0\u3057\u3044\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u3092\u4f5c\u6210</p> </li> <li> <p>Google Colab \u306e\u30db\u30fc\u30e0\u753b\u9762\u3067 \u300c\u65b0\u3057\u3044\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u300d \u3092\u30af\u30ea\u30c3\u30af\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u65b0\u3057\u3044 Python \u306e Jupyter Notebook \u304c\u958b\u304d\u307e\u3059\u3002</p> </li> <li> <p>\u7c21\u5358\u306a Python \u30b3\u30fc\u30c9\u3092\u5b9f\u884c</p> </li> <li> <p>\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u306e\u30bb\u30eb\u306b\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5165\u529b\u3057\u307e\u3059\uff1a   <code>python   print(\"Hello, Google Colab!\")</code></p> </li> <li>Shift + Enter \u3092\u62bc\u3059\u304b\u3001\u30bb\u30eb\u306e\u5de6\u5074\u306b\u3042\u308b\u518d\u751f\u30dc\u30bf\u30f3 \u25b6 \u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u5b9f\u884c\u3057\u307e\u3059\u3002</li> <li>\u51fa\u529b\u3068\u3057\u3066 <code>Hello, Google Colab!</code> \u3068\u8868\u793a\u3055\u308c\u308c\u3070\u6210\u529f\u3067\u3059\u3002</li> </ol>"},{"location":"lectures/SIWS/01-getting-started/#google-colaboratory-python_1","title":"Google Colaboratory \u3067 Python \u3092\u4f7f\u3046","text":"<p>\u4ee5\u524d\u306e\u8eca\u306e\u30a2\u30ca\u30ed\u30b8\u30fc\u3092\u601d\u3044\u51fa\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u79c1\u305f\u3061\u306f\u30a8\u30f3\u30b8\u30f3\u3092\u76f4\u63a5\u64cd\u4f5c\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u30c0\u30c3\u30b7\u30e5\u30dc\u30fc\u30c9\u4e0a\u306e\u8981\u7d20\u3092\u4f7f\u3063\u3066\u8eca\u3092\u904b\u8ee2\u3057\u307e\u3059\u3002\u540c\u69d8\u306b\u3001Python \u3092\u76f4\u63a5\u64cd\u4f5c\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001Google Colaboratory\uff08Google Colab\uff09 \u3092\u4f7f\u7528\u3057\u3066 Python \u3092\u5b9f\u884c\u3057\u307e\u3059\u3002</p> <p>Google Colab \u306f\u3001Google \u304c\u63d0\u4f9b\u3059\u308b\u30af\u30e9\u30a6\u30c9\u30d9\u30fc\u30b9\u306e Jupyter Notebook \u74b0\u5883\u3067\u3059\u3002\u3053\u308c\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3001Python \u306e\u74b0\u5883\u69cb\u7bc9\u3092\u884c\u3046\u3053\u3068\u306a\u304f\u3001\u30d6\u30e9\u30a6\u30b6\u4e0a\u3067\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u3001\u5b9f\u884c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <p>Google Colab \u3092\u958b\u304f\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002</p> <p>Note</p> <p>\u3053\u3053\u306b Google Colab \u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u753b\u50cf\u3092\u633f\u5165</p> <p>Google Colab \u306e\u753b\u9762\u306f\u3001\u5927\u304d\u304f\u5206\u3051\u3066 3 \u3064\u306e\u90e8\u5206\u306b\u5206\u304b\u308c\u3066\u3044\u307e\u3059\u3002</p> <ol> <li>\u30b3\u30fc\u30c9\u30bb\u30eb: \u3053\u3053\u306b Python \u30b3\u30fc\u30c9\u3092\u8a18\u8ff0\u3057\u3001\u5b9f\u884c\u3057\u307e\u3059\u3002</li> <li>\u51fa\u529b\u30a8\u30ea\u30a2: \u30b3\u30fc\u30c9\u306e\u5b9f\u884c\u7d50\u679c\u304c\u8868\u793a\u3055\u308c\u308b\u5834\u6240\u3067\u3059\u3002</li> <li>\u30d5\u30a1\u30a4\u30eb\u7ba1\u7406\u30a8\u30ea\u30a2: Google \u30c9\u30e9\u30a4\u30d6\u3084\u30ed\u30fc\u30ab\u30eb\u30d5\u30a1\u30a4\u30eb\u3092\u7ba1\u7406\u3067\u304d\u307e\u3059\u3002</li> </ol>"},{"location":"lectures/SIWS/01-getting-started/#python_1","title":"Python \u306e\u57fa\u672c\u7684\u306a\u66f8\u304d\u65b9","text":"<p>Python \u3092\u4f7f\u3044\u59cb\u3081\u308b\u3068\u3001\u300cPython \u306f\u3069\u3046\u3084\u3063\u3066\u4f7f\u3046\u306e\uff1f\u300d\u3068\u3044\u3046\u7591\u554f\u304c\u6d6e\u304b\u3076\u3067\u3057\u3087\u3046\u3002Python \u306f \u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u578b\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e \u3067\u3042\u308a\u3001Excel \u3084 SPSS \u306e\u3088\u3046\u306a \u30dd\u30a4\u30f3\u30c8 &amp; \u30af\u30ea\u30c3\u30af \u64cd\u4f5c\u3067\u306f\u306a\u304f\u3001\u30b3\u30fc\u30c9\u3092\u5165\u529b\u3057\u3066\u5b9f\u884c\u3059\u308b \u3053\u3068\u3067\u52d5\u4f5c\u3057\u307e\u3059\u3002</p> <p>Python \u3092\u4f7f\u3046\u306b\u306f\u3001\u57fa\u672c\u7684\u306a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u6982\u5ff5\u3092\u7406\u89e3\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u672c\u66f8\u306f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306b\u7279\u5316\u3057\u305f\u66f8\u7c4d\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u30c7\u30fc\u30bf\u3092\u63a2\u7d22\u30fb\u5206\u6790\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u6700\u4f4e\u9650\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u77e5\u8b58\u3092\u5b66\u3093\u3067\u3044\u304d\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/01-getting-started/#_1","title":"\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u57fa\u790e\u3068\u6982\u5ff5","text":"<p>\u57fa\u672c\u7684\u306a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u6982\u5ff5\u3068\u7528\u8a9e\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\u3059\u3079\u3066\u3092\u6697\u8a18\u3059\u308b\u5fc5\u8981\u306f\u306a\u304f\u3001\u300c\u5b9f\u969b\u306b\u3084\u308a\u306a\u304c\u3089\u5b66\u3076\u300d\u3053\u3068\u3092\u76ee\u6307\u3057\u307e\u3059\u3002\u3053\u306e\u30ac\u30a4\u30c9\u3067\u306f\u3001\u901a\u5e38\u306e\u6587\u7ae0\u3068 <code>computer_code</code> \u3092\u533a\u5225\u3059\u308b\u305f\u3081\u306b\u7570\u306a\u308b\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002</p> <p>\u5b66\u7fd2\u3092\u9032\u3081\u308b\u4e0a\u3067\u3001Python \u3068 Google Colaboratory \u3092\u6d3b\u7528\u3057\u306a\u304c\u3089\u3001\u7e70\u308a\u8fd4\u3057\u7df4\u7fd2\u3059\u308b\u3053\u3068\u304c\u91cd\u8981\u3067\u3059\u3002</p>"},{"location":"lectures/SIWS/01-getting-started/#_2","title":"\u57fa\u672c\u6982\u5ff5","text":"<ul> <li>\u30b3\u30fc\u30c9\u30bb\u30eb (Code Cell): Google Colaboratory \u3067\u30b3\u30fc\u30c9\u3092\u5165\u529b\u3057\u3001\u5b9f\u884c\u3059\u308b\u5834\u6240\u3002</li> <li>\u30b3\u30fc\u30c9\u306e\u5b9f\u884c: Python \u306b\u547d\u4ee4\u3092\u4e0e\u3048\u3001\u5b9f\u969b\u306b\u51e6\u7406\u3092\u884c\u308f\u305b\u308b\u3053\u3068\u3002</li> <li>\u5909\u6570 (Variables): \u5024\u3092\u4fdd\u5b58\u3059\u308b\u305f\u3081\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3002\u5909\u6570\u306b\u5024\u3092 \u4ee3\u5165 \u3057\u3001\u305d\u306e\u5185\u5bb9\u3092\u8868\u793a\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002</li> <li>\u30c7\u30fc\u30bf\u578b (Data Types): <code>int</code> (\u6574\u6570), <code>float</code> (\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570), <code>bool</code> (\u8ad6\u7406\u578b), <code>str</code> (\u6587\u5b57\u5217) \u306a\u3069\u3002</li> <li>\u6574\u6570 (<code>int</code>): <code>-1, 0, 2, 4092</code> \u306a\u3069\u3002</li> <li>\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570 (<code>float</code>): <code>-24.932, 0.8</code> \u306a\u3069\u3002</li> <li>\u8ad6\u7406\u578b (<code>bool</code>): <code>True</code> \u307e\u305f\u306f <code>False</code>\u3002</li> <li>\u6587\u5b57\u5217 (<code>str</code>): <code>\"cabbage\"</code>, <code>\"Hamilton\"</code>, <code>\"This ramen is delicious.\"</code> \u306a\u3069\u3002</li> </ul>"},{"location":"lectures/SIWS/01-getting-started/#list","title":"\u30ea\u30b9\u30c8 (List)","text":"<p>\u8907\u6570\u306e\u5024\u3092\u307e\u3068\u3081\u305f\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u3001<code>[]</code> \u3092\u4f7f\u3063\u3066\u4f5c\u6210\u3057\u307e\u3059\u3002</p> <pre><code>numbers = [6, 11, 13, 31, 90, 92]\n</code></pre>"},{"location":"lectures/SIWS/01-getting-started/#dataframe","title":"\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0 (DataFrame)","text":"<p>\u8868\u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u3042\u308a\u3001<code>pandas</code> \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3057\u3066\u4f5c\u6210\u3057\u307e\u3059\u3002</p> <pre><code>import pandas as pd\n\ndata = {'Name': ['Alice', 'Bob', 'Charlie'],\n        'Age': [25, 30, 35],\n        'City': ['New York', 'Los Angeles', 'Chicago']}\ndf = pd.DataFrame(data)\nprint(df)\n</code></pre>"},{"location":"lectures/SIWS/01-getting-started/#conditionals","title":"\u6761\u4ef6\u5206\u5c90 (Conditionals)","text":"<ul> <li><code>==</code> \u3092\u4f7f\u3063\u3066\u7b49\u4fa1\u6027\u3092\u6bd4\u8f03 (<code>=</code> \u306f\u4ee3\u5165\u306e\u305f\u3081\u306b\u4f7f\u7528)\u3002   <code>python   print(2 + 1 == 3)  # True</code></li> <li>\u30d6\u30fc\u30eb\u6f14\u7b97: <code>True</code> / <code>False</code> \u306e\u8a55\u4fa1\u3002   <code>python   print(4 + 2 &gt;= 3)  # True   print(3 + 5 &lt;= 1)  # False</code></li> <li>\u8ad6\u7406\u6f14\u7b97\u5b50: <code>and</code> (\u304b\u3064), <code>or</code> (\u307e\u305f\u306f)\u3002   <code>python   print((2 + 1 == 3) and (2 + 1 == 4))  # False   print((2 + 1 == 3) or (2 + 1 == 4))   # True</code></li> </ul>"},{"location":"lectures/SIWS/01-getting-started/#functions","title":"\u95a2\u6570 (Functions)","text":"<p>\u95a2\u6570\u306f\u7279\u5b9a\u306e\u30bf\u30b9\u30af\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002Python \u3067\u306f <code>def</code> \u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u4f7f\u7528\u3057\u3066\u95a2\u6570\u3092\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002</p> <pre><code>def greet(name):\n    return f\"Hello, {name}!\"\n\nprint(greet(\"Alice\"))\n</code></pre> <p>\u307e\u305f\u3001\u7d44\u307f\u8fbc\u307f\u95a2\u6570\u306e <code>range()</code> \u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u6570\u5024\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002</p> <pre><code>list(range(2, 6))  # [2, 3, 4, 5]\n</code></pre>"},{"location":"lectures/SIWS/01-getting-started/#messages","title":"\u30a8\u30e9\u30fc\u3001\u8b66\u544a\u3001\u30e1\u30c3\u30bb\u30fc\u30b8 {#messages}","text":"<p>Google Colaboratory \u3067 Python \u3092\u4f7f\u3046\u969b\u3001\u30a8\u30e9\u30fc\u3001\u8b66\u544a\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8868\u793a\u3055\u308c\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3089\u306f\u8d64\u5b57\u3067\u8868\u793a\u3055\u308c\u308b\u305f\u3081\u3001\u6700\u521d\u306f\u6238\u60d1\u3046\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u51b7\u9759\u306b\u5bfe\u5fdc\u3059\u308c\u3070\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3002</p> <p>Python \u3067\u8868\u793a\u3055\u308c\u308b\u8d64\u5b57\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u306b\u306f\u4ee5\u4e0b\u306e\u7a2e\u985e\u304c\u3042\u308a\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/01-getting-started/#errors","title":"\u30a8\u30e9\u30fc (Errors)","text":"<p>\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u6b63\u5e38\u306b\u52d5\u4f5c\u3057\u306a\u3044\u5834\u5408\u306b\u767a\u751f\u3057\u3001\u30b3\u30fc\u30c9\u306e\u5b9f\u884c\u304c\u505c\u6b62\u3057\u307e\u3059\u3002</p> <pre><code>print(1 / 0)  # ZeroDivisionError: division by zero\n</code></pre> <p>\u3053\u306e\u5834\u5408\u3001<code>0</code> \u3067\u306e\u5272\u308a\u7b97\u304c\u8a31\u53ef\u3055\u308c\u3066\u3044\u306a\u3044\u305f\u3081\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/01-getting-started/#warnings","title":"\u8b66\u544a (Warnings)","text":"<p>\u30b3\u30fc\u30c9\u306e\u5b9f\u884c\u306f\u7d99\u7d9a\u3067\u304d\u308b\u3082\u306e\u306e\u3001\u6ce8\u610f\u3059\u3079\u304d\u3053\u3068\u304c\u3042\u308b\u5834\u5408\u306b\u8868\u793a\u3055\u308c\u307e\u3059\u3002</p> <pre><code>import warnings\nwarnings.warn(\"This is a warning message!\")\n</code></pre>"},{"location":"lectures/SIWS/01-getting-started/#messages_1","title":"\u30e1\u30c3\u30bb\u30fc\u30b8 (Messages)","text":"<p>\u901a\u5e38\u306e\u8a3a\u65ad\u60c5\u5831\u3084\u51e6\u7406\u7d50\u679c\u304c\u8868\u793a\u3055\u308c\u308b\u5834\u5408\u3002</p> <pre><code>print(\"Data loaded successfully!\")\n</code></pre> <p>\u30a8\u30e9\u30fc\u3084\u8b66\u544a\u304c\u8868\u793a\u3055\u308c\u3066\u3082\u7126\u3089\u305a\u3001</p> <ul> <li>\u30a8\u30e9\u30fc: \u30b3\u30fc\u30c9\u304c\u5b9f\u884c\u3067\u304d\u306a\u3044\u306e\u3067\u4fee\u6b63\u304c\u5fc5\u8981 \u2192 \u8d64\u4fe1\u53f7: \u505c\u6b62\u3057\u3066\u554f\u984c\u3092\u78ba\u8a8d</li> <li>\u8b66\u544a: \u5b9f\u884c\u3067\u304d\u308b\u304c\u6ce8\u610f\u304c\u5fc5\u8981 \u2192 \u9ec4\u8272\u4fe1\u53f7: \u6ce8\u610f\u3057\u306a\u304c\u3089\u9032\u884c</li> <li>\u30e1\u30c3\u30bb\u30fc\u30b8: \u5358\u306a\u308b\u60c5\u5831\u63d0\u4f9b \u2192 \u7dd1\u4fe1\u53f7: \u554f\u984c\u306a\u3057</li> </ul> <p>\u3068\u8003\u3048\u308b\u3068\u3088\u3044\u3067\u3057\u3087\u3046\u3002</p> <p>Python \u3068 Google Colaboratory \u3092\u6d3b\u7528\u3057\u306a\u304c\u3089\u3001\u7e70\u308a\u8fd4\u3057\u7df4\u7fd2\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"lectures/SIWS/01-getting-started/#_3","title":"\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u5b66\u3076\u4e0a\u3067\u306e\u5fc3\u5f97","text":"<p>\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u5b66\u3076\u3053\u3068\u306f\u3001\u5916\u56fd\u8a9e\u3092\u5b66\u3076\u3053\u3068\u306b\u4f3c\u3066\u3044\u307e\u3059\u3002\u6700\u521d\u306f\u96e3\u3057\u304f\u3001\u632b\u6298\u3059\u308b\u3053\u3068\u3082\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u3057\u304b\u3057\u3001\u9593\u9055\u3044\u3092\u6050\u308c\u305a\u306b\u52aa\u529b\u3092\u7d9a\u3051\u308c\u3070\u3001\u8ab0\u3067\u3082\u5b66\u3073\u3001\u4e0a\u9054\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u5b66\u3076\u969b\u306b\u5f79\u7acb\u3064\u3044\u304f\u3064\u304b\u306e\u30dd\u30a4\u30f3\u30c8\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002</p> <ul> <li> <p>\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306f\u5b9f\u306f\u305d\u308c\u307b\u3069\u8ce2\u304f\u306a\u3044: \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u3084\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u306f\u300c\u8ce2\u3044\u300d\u3068\u601d\u308f\u308c\u304c\u3061\u3067\u3059\u304c\u3001\u305d\u308c\u306f\u4eba\u9593\u304c\u591a\u304f\u306e\u6642\u9593\u3068\u30a8\u30cd\u30eb\u30ae\u30fc\u3092\u8cbb\u3084\u3057\u3066\u8a2d\u8a08\u3057\u305f\u7d50\u679c\u3067\u3059\u3002\u5b9f\u969b\u306b\u306f\u3001\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306b\u306f\u3059\u3079\u3066\u306e\u6307\u793a\u3092\u660e\u78ba\u304b\u3064\u6b63\u78ba\u306b\u4f1d\u3048\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u66d6\u6627\u306a\u6307\u793a\u3084\u30df\u30b9\u304c\u3042\u308b\u3068\u3001\u6b63\u3057\u304f\u52d5\u4f5c\u3057\u307e\u305b\u3093\u3002</p> </li> <li> <p>\u300c\u30b3\u30d4\u30fc\u3001\u30da\u30fc\u30b9\u30c8\u3001\u4fee\u6b63\u300d\u30a2\u30d7\u30ed\u30fc\u30c1\u3092\u6d3b\u7528\u3059\u308b: \u6700\u521d\u306b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3092\u5b66\u3076\u3068\u304d\u3084\u3001\u7279\u306b\u8907\u96d1\u306a\u30b3\u30fc\u30c9\u3092\u7406\u89e3\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3068\u304d\u306f\u3001\u65e2\u5b58\u306e\u52d5\u4f5c\u3059\u308b\u30b3\u30fc\u30c9\u3092\u30b3\u30d4\u30fc\u3057\u3001\u81ea\u5206\u306e\u76ee\u7684\u306b\u5408\u308f\u305b\u3066\u4fee\u6b63\u3059\u308b\u306e\u304c\u52b9\u7387\u7684\u3067\u3059\u3002\u3053\u308c\u3092 \u300c\u30b3\u30d4\u30fc\u3001\u30da\u30fc\u30b9\u30c8\u3001\u4fee\u6b63\u300d \u30a2\u30d7\u30ed\u30fc\u30c1\u3068\u547c\u3073\u307e\u3059\u3002\u6700\u521d\u306f\u6697\u8a18\u3057\u3066\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u306e\u3067\u306f\u306a\u304f\u3001\u63d0\u4f9b\u3055\u308c\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u30b3\u30d4\u30fc\u3057\u3001\u305d\u308c\u3092\u4fee\u6b63\u3057\u306a\u304c\u3089\u5b66\u3076\u3053\u3068\u3092\u63a8\u5968\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u81ea\u8ee2\u8eca\u306e\u88dc\u52a9\u8f2a\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3001\u6163\u308c\u3066\u304f\u308c\u3070\u5f90\u3005\u306b\u88dc\u52a9\u306a\u3057\u3067\u30b3\u30fc\u30c9\u3092\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002</p> </li> <li> <p>\u5b9f\u8df5\u3092\u901a\u3058\u3066\u5b66\u3076\u306e\u304c\u6700\u826f\u306e\u65b9\u6cd5: \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u30b9\u30ad\u30eb\u3092\u5411\u4e0a\u3055\u305b\u308b\u6700\u3082\u52b9\u679c\u7684\u306a\u65b9\u6cd5\u306f\u3001\u5b9f\u969b\u306b\u624b\u3092\u52d5\u304b\u3057\u3066\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3053\u3068\u3067\u3059\u3002\u7279\u306b\u3001\u81ea\u5206\u304c\u8208\u5473\u306e\u3042\u308b\u30c7\u30fc\u30bf\u3092\u5206\u6790\u3059\u308b\u306a\u3069\u3001\u5177\u4f53\u7684\u306a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u6301\u3064\u3068\u3001\u5b66\u7fd2\u304c\u30b9\u30e0\u30fc\u30ba\u306b\u9032\u307f\u307e\u3059\u3002</p> </li> <li> <p>\u7df4\u7fd2\u304c\u9375: \u5916\u56fd\u8a9e\u3092\u4e0a\u9054\u3055\u305b\u308b\u552f\u4e00\u306e\u65b9\u6cd5\u304c\u7e70\u308a\u8fd4\u3057\u8a71\u3059\u3053\u3068\u3067\u3042\u308b\u3088\u3046\u306b\u3001\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u4e0a\u9054\u3055\u305b\u308b\u552f\u4e00\u306e\u65b9\u6cd5\u3082\u591a\u304f\u306e\u7df4\u7fd2\u3092\u7a4d\u3080\u3053\u3068\u3067\u3059\u3002\u5fc3\u914d\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\uff01 \u79c1\u305f\u3061\u306f\u5341\u5206\u306a\u7df4\u7fd2\u306e\u6a5f\u4f1a\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</p> </li> </ul> <p>Python \u3068 Google Colaboratory \u3092\u6d3b\u7528\u3057\u306a\u304c\u3089\u3001\u7e70\u308a\u8fd4\u3057\u7df4\u7fd2\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"lectures/SIWS/01-getting-started/#python_2","title":"Python\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u306f\uff1f","text":"<p>Python\u521d\u5fc3\u8005\u304c\u6700\u521d\u306b\u6238\u60d1\u3046\u6982\u5ff5\u306e\u3072\u3068\u3064\u306b\u3001Python\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\uff08\u307e\u305f\u306f\u30d1\u30c3\u30b1\u30fc\u30b8\uff09\u304c\u3042\u308a\u307e\u3059\u3002Python\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u3001\u8ffd\u52a0\u306e\u95a2\u6570\u3001\u30c7\u30fc\u30bf\u3001\u305d\u3057\u3066\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u63d0\u4f9b\u3059\u308b\u3053\u3068\u3067\u3001Python\u306e\u6a5f\u80fd\u3092\u62e1\u5f35\u3057\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u3001\u4e16\u754c\u4e2d\u306ePython\u30e6\u30fc\u30b6\u30fc\u306b\u3088\u3063\u3066\u4f5c\u3089\u308c\u3066\u304a\u308a\u3001\u901a\u5e38\u306fPyPI\uff08Python Package Index\uff09\u306a\u3069\u304b\u3089\u7121\u6599\u3067\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u672c\u66f8\u3067\u4f7f\u7528\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4e2d\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u3082\u306e\u304c\u3042\u308a\u307e\u3059\uff1a</p> <ul> <li>matplotlib: \u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316\u306e\u305f\u3081\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002</li> <li>Pandas: \u30c7\u30fc\u30bf\u306e\u6574\u5f62\u3084\u64cd\u4f5c\u306e\u305f\u3081\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002</li> <li>NumPy: \u6570\u5024\u8a08\u7b97\u3084\u914d\u5217\u64cd\u4f5c\u306e\u305f\u3081\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002</li> </ul> <p>Python\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u3001\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3067\u304d\u308b\u30a2\u30d7\u30ea\u306b\u4f8b\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3064\u307e\u308a\u3001Python\u81ea\u4f53\u306f\u65b0\u3057\u3044\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3059\u3002\u6700\u521d\u306f\u57fa\u672c\u7684\u306a\u6a5f\u80fd\u306f\u5099\u308f\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u3059\u3079\u3066\u306e\u6a5f\u80fd\u304c\u63c3\u3063\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002Python\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u3001\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u306bApp Store\u3084Google Play\u304b\u3089\u30a2\u30d7\u30ea\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u306e\u3068\u540c\u3058\u3088\u3046\u306b\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3067\u3001\u3042\u306a\u305f\u306e\u4f5c\u696d\u74b0\u5883\u3092\u62e1\u5f35\u3057\u3066\u304f\u308c\u307e\u3059\u3002</p> <p>\u3053\u306e\u30a2\u30ca\u30ed\u30b8\u30fc\u3092\u7d9a\u3051\u308b\u305f\u3081\u306b\u3001\u5199\u771f\u306e\u7de8\u96c6\u3084\u5171\u6709\u306b\u4f7f\u3046Instagram\u30a2\u30d7\u30ea\u3092\u4f8b\u306b\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u305f\u3068\u3048\u3070\u3001\u65b0\u3057\u3044\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u3092\u8cfc\u5165\u3057\u3066\u3001\u64ae\u3063\u305f\u5199\u771f\u3092\u53cb\u4eba\u3084\u5bb6\u65cf\u3068Instagram\u3067\u5171\u6709\u3057\u305f\u3044\u3068\u3057\u307e\u3059\u3002\u305d\u306e\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u30b9\u30c6\u30c3\u30d7\u304c\u5fc5\u8981\u3067\u3059\uff1a</p> <ol> <li> <p>\u30a2\u30d7\u30ea\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb:\u65b0\u3057\u3044\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u306b\u306fInstagram\u30a2\u30d7\u30ea\u304c\u30d7\u30ea\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u306a\u3044\u305f\u3081\u3001App Store\u3084Google Play\u304b\u3089\u30a2\u30d7\u30ea\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u4e00\u5ea6\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308c\u3070\u3001\u305d\u306e\u5f8c\u306f\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u304c\u3042\u308b\u307e\u3067\u518d\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002</p> </li> <li> <p>\u30a2\u30d7\u30ea\u306e\u8d77\u52d5:\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u304c\u5b8c\u4e86\u3057\u305f\u3089\u3001Instagram\u30a2\u30d7\u30ea\u3092\u8d77\u52d5\u3057\u307e\u3059\u3002</p> </li> </ol> <p>Instagram\u30a2\u30d7\u30ea\u3092\u8d77\u52d5\u3059\u308c\u3070\u3001\u5199\u771f\u3092\u53cb\u4eba\u3084\u5bb6\u65cf\u3068\u5171\u6709\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u308c\u3068\u540c\u69d8\u306b\u3001Python\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5229\u7528\u3059\u308b\u5834\u5408\u3082\u6b21\u306e2\u3064\u306e\u30b9\u30c6\u30c3\u30d7\u3092\u8e0f\u307f\u307e\u3059\uff1a</p> <ol> <li> <p>\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb:\u3053\u308c\u306f\u3001\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u306b\u30a2\u30d7\u30ea\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u306e\u3068\u540c\u3058\u3067\u3059\u3002\u591a\u304f\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u3001Python\u3084Google Colaboratory\u306e\u521d\u671f\u72b6\u614b\u306b\u306f\u542b\u307e\u308c\u3066\u3044\u306a\u3044\u305f\u3081\u3001\u521d\u3081\u3066\u4f7f\u7528\u3059\u308b\u969b\u306b\u306fpip\u306a\u3069\u3092\u4f7f\u3063\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u4e00\u5ea6\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308c\u3070\u3001\u901a\u5e38\u306f\u66f4\u65b0\u304c\u5fc5\u8981\u306b\u306a\u308b\u307e\u3067\u518d\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002</p> </li> <li> <p>\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8:\u3053\u308c\u306f\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u30a2\u30d7\u30ea\u3092\u8d77\u52d5\u3059\u308b\u306e\u3068\u540c\u3058\u3067\u3059\u3002Python\u3067\u306f\u3001\u4f7f\u7528\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u5185\u3067\u6bce\u56deimport\u6587\u3092\u7528\u3044\u3066\u8aad\u307f\u8fbc\u3080\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> </li> </ol> <p>\u3067\u306f\u3001\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316\u306e\u305f\u3081\u306ematplotlib\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f8b\u306b\u3001\u3053\u306e2\u3064\u306e\u30b9\u30c6\u30c3\u30d7\u3092\u5b9f\u969b\u306b\u884c\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <pre><code># matplotlib\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n!pip install matplotlib\n\n# matplotlib\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\nimport matplotlib.pyplot as plt\n\n# \u7c21\u5358\u306a\u6298\u308c\u7dda\u30b0\u30e9\u30d5\u306e\u63cf\u753b\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 25, 30, 40]\nplt.plot(x, y)\nplt.xlabel(\"X\u8ef8\")\nplt.ylabel(\"Y\u8ef8\")\nplt.title(\"Matplotlib\u306e\u30b5\u30f3\u30d7\u30eb\u30b0\u30e9\u30d5\")\nplt.show()\n</code></pre>"},{"location":"lectures/SIWS/01-getting-started/#python_3","title":"Python\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","text":"<p>Google Colaboratory\u306b\u3064\u3044\u3066\u306e\u6ce8\u610f:  Google Colaboratory\u3067\u306f\u3001\u591a\u304f\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u4e8b\u524d\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u8ffd\u52a0\u3067\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u81ea\u5206\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002Google Colaboratory\u3092\u4f7f\u308f\u305a\u306b\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u3067Python\u3092\u5b9f\u884c\u3059\u308b\u5834\u5408\u3082\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u624b\u9806\u3092\u77e5\u3063\u3066\u304a\u304f\u3053\u3068\u304c\u91cd\u8981\u3067\u3059\uff08\u4eca\u56de\u306f\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u306f\u4f7f\u7528\u3057\u307e\u305b\u3093\u304c\u3001\u4eca\u5f8c\u5229\u7528\u3059\u308b\u969b\u306e\u53c2\u8003\u306b\u8a18\u8f09\u3057\u3066\u304a\u304d\u307e\u3059\uff09\u3002</p> <p>Python\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u65b9\u6cd5\u306f2\u7a2e\u985e\u3042\u308a\u307e\u3059\u3002</p> <ol> <li>\u7c21\u5358\u306a\u65b9\u6cd5\uff08Google Colaboratory\u307e\u305f\u306fJupyter Notebook\u3067\u5b9f\u884c\uff09:     <code>!pip install</code> \u30b3\u30de\u30f3\u30c9\u3092\u7528\u3044\u3066\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002</li> </ol> <pre><code>!pip install seaborn pandas numpy matplotlib\n</code></pre> <ol> <li>\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u3067\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\uff08\u30bf\u30fc\u30df\u30ca\u30eb\u307e\u305f\u306f\u30b3\u30de\u30f3\u30c9\u30d7\u30ed\u30f3\u30d7\u30c8\u3067\u5b9f\u884c\uff1a\u4eca\u56de\u306f\u5229\u7528\u3057\u306a\u3044\uff09:</li> </ol> <pre><code>pip install seaborn pandas numpy matplotlib\n</code></pre> <p>\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u306b\u304a\u3044\u3066\u306f\u3001\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u306e\u30a2\u30d7\u30ea\u3068\u540c\u69d8\u3001\u4e00\u5ea6\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308c\u3070\u518d\u5ea6\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001Google Colaboratory\u306e\u74b0\u5883\u306b\u304a\u3044\u3066\u306f\u3001\u6642\u9593\u304c\u7d4c\u904e\u3059\u308b\u3068\u30ea\u30bb\u30c3\u30c8\u3055\u308c\u308b\u305f\u3081\u3001\u518d\u5ea6\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u304c\u5fc5\u8981\u306b\u306a\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u30a4\u30e1\u30fc\u30b8\u3068\u3057\u3066\u306f\u3001\u8cb8\u3057\u51fa\u3057\u30b9\u30de\u30db\u3067\u3059\u3002\u4e00\u5ea6\u5e97\u306b\u8fd4\u5374\u3059\u308b\u3068\u4e2d\u8eab\u306e\u30c7\u30fc\u30bf\u304c\u6d88\u3055\u308c\u3066\u3044\u3066\u3001\u518d\u5ea6\u30a2\u30d7\u30ea\u3092\u5165\u308c\u76f4\u3059\u5fc5\u8981\u304c\u3042\u308b\u306e\u3068\u540c\u3058\u3067\u3059\u3002</p>"},{"location":"lectures/SIWS/01-getting-started/#_4","title":"\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u8aad\u307f\u8fbc\u307f","text":"<p>\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u5f8c\u3001\u305d\u308c\u3092Python\u30d7\u30ed\u30b0\u30e9\u30e0\u5185\u3067\u4f7f\u7528\u3059\u308b\u305f\u3081\u306b\u306f\u300c\u8aad\u307f\u8fbc\u3080\u300d\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <pre><code># library\u306e\u8aad\u307f\u8fbc\u307f\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n</code></pre> <p>\u3082\u3057\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u304c\u8868\u793a\u3055\u308c\u305f\u5834\u5408:</p> <pre><code>ModuleNotFoundError: No module named 'seaborn'\n</code></pre> <p>\u3053\u308c\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u306a\u3044\u3053\u3068\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u5834\u5408\u306f\u3001\u524d\u8ff0\u306e<code>pip install</code>\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>Note</p> <p><code>pip</code> \u3092\u7528\u3044\u3066\u3001<code>seaborn</code> \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"lectures/SIWS/01-getting-started/#_5","title":"\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u5229\u7528","text":"<p>Python\u3067\u30c7\u30fc\u30bf\u5206\u6790\u3092\u884c\u3046\u969b\u3001\u9069\u5207\u306b\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3001\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304c\u91cd\u8981\u3067\u3059\u3002\u4f8b\u3048\u3070\u3001<code>seaborn</code> \u3092\u4f7f\u7528\u3057\u3066\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316\u3092\u884c\u3046\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068\u30b7\u30f3\u30d7\u30eb\u306a\u6563\u5e03\u56f3\u3092\u63cf\u753b\u3067\u304d\u307e\u3059\u3002</p> <pre><code># \u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u306e\u4f5c\u6210\nnp.random.seed(10)\ndata = pd.DataFrame({\n    \"x\": np.random.rand(50),\n    \"y\": np.random.rand(50)\n})\n\n# Seaborn\u3092\u4f7f\u3063\u305f\u6563\u5e03\u56f3\u306e\u63cf\u753b\nsns.scatterplot(x=\"x\", y=\"y\", data=data)\nplt.title(\"Seaborn\u3092\u7528\u3044\u305f\u6563\u5e03\u56f3\u306e\u4f8b\")\nplt.show()\n</code></pre> <p>\u3053\u306e\u3088\u3046\u306b\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u6b63\u3057\u304f\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3001\u8aad\u307f\u8fbc\u3080\u3053\u3068\u3067\u3001Python\u3067\u306e\u30c7\u30fc\u30bf\u5206\u6790\u3084\u53ef\u8996\u5316\u304c\u7c21\u5358\u306b\u884c\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/01-getting-started/#_6","title":"\u521d\u3081\u3066\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u63a2\u7d22\u3057\u3066\u307f\u3088\u3046","text":"<p>\u3053\u308c\u307e\u3067\u5b66\u3093\u3060\u3053\u3068\u3092\u6d3b\u7528\u3057\u3066\u3001\u5b9f\u969b\u306e\u30c7\u30fc\u30bf\u3092\u63a2\u7d22\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u30c7\u30fc\u30bf\u306f\u753b\u50cf\u3001\u30c6\u30ad\u30b9\u30c8\u3001\u6570\u5024\u306a\u3069\u3055\u307e\u3056\u307e\u306a\u5f62\u5f0f\u3067\u5b58\u5728\u3057\u307e\u3059\u304c\u3001\u672c\u66f8\u3067\u306f\u4e3b\u306b\u300c\u30b9\u30d7\u30ec\u30c3\u30c9\u30b7\u30fc\u30c8\u300d\u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u7126\u70b9\u3092\u5f53\u3066\u307e\u3059\u3002\u3053\u308c\u306f\u591a\u304f\u306e\u5206\u91ce\u3067\u30c7\u30fc\u30bf\u304c\u53ce\u96c6\u30fb\u4fdd\u5b58\u3055\u308c\u308b\u6700\u3082\u4e00\u822c\u7684\u306a\u65b9\u6cd5\u3067\u3059\u3002Python\u3067\u306f\u3001\u3053\u308c\u3089\u306e\u300c\u30b9\u30d7\u30ec\u30c3\u30c9\u30b7\u30fc\u30c8\u300d\u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3068\u547c\u3073\u307e\u3059\u3002\u4ee5\u964d\u3001\u672c\u66f8\u3067\u306f\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3068\u3057\u3066\u4fdd\u5b58\u3055\u308c\u305f\u30c7\u30fc\u30bf\u306e\u64cd\u4f5c\u306b\u6ce8\u76ee\u3057\u3066\u3044\u304d\u307e\u3059\u3002</p> <p>\u307e\u305a\u3001\u5fc5\u8981\u306a\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <pre><code>import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>"},{"location":"lectures/SIWS/01-getting-started/#_7","title":"\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f","text":"<p>\u4eca\u56de\u306f\u3001\u5e83\u544a\u8cbb\u7528\u3068\u58f2\u4e0a\u306e\u95a2\u4fc2\u3092\u793a\u3057\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u3053\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u306f\u3001TV\u3001\u30e9\u30b8\u30aa\u3001\u65b0\u805e\u306b\u6295\u3058\u305f\u4e88\u7b97\u3068\u58f2\u4e0a\u306e\u60c5\u5831\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <pre><code>url = 'https://raw.githubusercontent.com/a-martyn/ISL-python/ee156568a8f7307be71dad5390bae12b51dcd93f/Notebooks/data/Advertising.csv'\ndata = pd.read_csv(url, index_col=0)\n</code></pre>"},{"location":"lectures/SIWS/01-getting-started/#_8","title":"\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u69cb\u9020\u3092\u78ba\u8a8d\u3059\u308b","text":"<p>\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u69cb\u9020\u3092\u7406\u89e3\u3059\u308b\u305f\u3081\u306b\u3001\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <pre><code>data.info()\n</code></pre> <p>\u3053\u306e\u51fa\u529b\u304b\u3089\u3001\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306b\u306f200\u884c\u30684\u5217\u304c\u3042\u308a\u3001\u5404\u5217\u306e\u30c7\u30fc\u30bf\u578b\u3068\u6b20\u640d\u5024\u306e\u6709\u7121\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002</p> <p>\u6b21\u306b\u3001\u30c7\u30fc\u30bf\u306e\u6700\u521d\u306e\u6570\u884c\u3092\u8868\u793a\u3057\u3066\u3001\u30c7\u30fc\u30bf\u306e\u5185\u5bb9\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002</p> <pre><code>data.head()\n</code></pre> <p>\u3053\u306e\u51fa\u529b\u304b\u3089\u3001\u5404\u5217\u306e\u540d\u524d\u3068\u6700\u521d\u306e5\u884c\u306e\u30c7\u30fc\u30bf\u304c\u8868\u793a\u3055\u308c\u3001\u30c7\u30fc\u30bf\u306e\u6982\u8981\u3092\u628a\u63e1\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/01-getting-started/#_9","title":"\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u63a2\u7d22","text":"<p>\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u63a2\u7d22\u3059\u308b\u65b9\u6cd5\u306f\u3044\u304f\u3064\u304b\u3042\u308a\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u30013\u3064\u306e\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002</p> <ol> <li> <p><code>head()</code>\u30e1\u30bd\u30c3\u30c9: \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u6700\u521d\u306e\u6570\u884c\u3092\u8868\u793a\u3057\u307e\u3059\u3002</p> <p><code>python data.head()</code></p> </li> <li> <p><code>describe()</code>\u30e1\u30bd\u30c3\u30c9: \u6570\u5024\u30c7\u30fc\u30bf\u306e\u57fa\u672c\u7684\u306a\u7d71\u8a08\u91cf\u3092\u8868\u793a\u3057\u307e\u3059\u3002</p> <p><code>python data.describe()</code></p> </li> <li> <p><code>columns</code>\u5c5e\u6027: \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u5217\u540d\u3092\u8868\u793a\u3057\u307e\u3059\u3002</p> <p><code>python data.columns</code></p> </li> </ol> <p>\u3053\u308c\u3089\u306e\u65b9\u6cd5\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\u30c7\u30fc\u30bf\u306e\u6982\u8981\u3092\u628a\u63e1\u3057\u307e\u3057\u3087\u3046\u3002</p>"},{"location":"lectures/SIWS/01-getting-started/#_10","title":"\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316","text":"<p>\u30c7\u30fc\u30bf\u306e\u95a2\u4fc2\u6027\u3092\u8996\u899a\u7684\u306b\u7406\u89e3\u3059\u308b\u305f\u3081\u306b\u3001\u6563\u5e03\u56f3\u3092\u4f5c\u6210\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u4f8b\u3048\u3070\u3001TV\u5e83\u544a\u8cbb\u7528\u3068\u58f2\u4e0a\u306e\u95a2\u4fc2\u3092\u78ba\u8a8d\u3059\u308b\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002</p> <pre><code>plt.scatter(data['TV'], data['Sales'])\nplt.xlabel('TV Advertising Budget (in thousands of dollars)')\nplt.ylabel('Sales (in thousands of units)')\nplt.title('TV Advertising vs Sales')\nplt.show()\n</code></pre> <p>\u3053\u306e\u6563\u5e03\u56f3\u304b\u3089\u3001TV\u5e83\u544a\u8cbb\u7528\u3068\u58f2\u4e0a\u306e\u9593\u306b\u6b63\u306e\u76f8\u95a2\u304c\u3042\u308b\u3053\u3068\u304c\u8996\u899a\u7684\u306b\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002</p> <p>\u540c\u69d8\u306b\u3001\u30e9\u30b8\u30aa\u3084\u65b0\u805e\u306e\u5e83\u544a\u8cbb\u7528\u3068\u58f2\u4e0a\u306e\u95a2\u4fc2\u3082\u6563\u5e03\u56f3\u3067\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <pre><code># \u30e9\u30b8\u30aa\u5e83\u544a\u8cbb\u7528\u3068\u58f2\u4e0a\u306e\u95a2\u4fc2\nplt.scatter(data['Radio'], data['Sales'])\nplt.xlabel('Radio Advertising Budget (in thousands of dollars)')\nplt.ylabel('Sales (in thousands of units)')\nplt.title('Radio Advertising vs Sales')\nplt.show()\n\n# \u65b0\u805e\u5e83\u544a\u8cbb\u7528\u3068\u58f2\u4e0a\u306e\u95a2\u4fc2\nplt.scatter(data['Newspaper'], data['Sales'])\nplt.xlabel('Newspaper Advertising Budget (in thousands of dollars)')\nplt.ylabel('Sales (in thousands of units)')\nplt.title('Newspaper Advertising vs Sales')\nplt.show()\n</code></pre> <p>\u3053\u308c\u3089\u306e\u6563\u5e03\u56f3\u3092\u901a\u3058\u3066\u3001\u5404\u5e83\u544a\u5a92\u4f53\u306e\u4e88\u7b97\u3068\u58f2\u4e0a\u306e\u95a2\u4fc2\u6027\u3092\u8996\u899a\u7684\u306b\u7406\u89e3\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/01-getting-started/#_11","title":"\u30c7\u30fc\u30bf\u306e\u57fa\u672c\u7d71\u8a08\u91cf","text":"<p>\u30c7\u30fc\u30bf\u306e\u57fa\u672c\u7684\u306a\u7d71\u8a08\u91cf\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u3067\u3001\u30c7\u30fc\u30bf\u306e\u5206\u5e03\u3084\u4e2d\u5fc3\u50be\u5411\u3092\u7406\u89e3\u3067\u304d\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <pre><code>data.describe()\n</code></pre> <p>\u3053\u306e\u51fa\u529b\u304b\u3089\u3001\u5404\u5909\u6570\u306e\u5e73\u5747\u5024\u3001\u6a19\u6e96\u504f\u5dee\u3001\u6700\u5c0f\u5024\u3001\u6700\u5927\u5024\u3001\u56db\u5206\u4f4d\u6570\u306a\u3069\u306e\u60c5\u5831\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\u4ee5\u4e0a\u306e\u624b\u9806\u3067\u3001Python\u3068Pandas\u3092\u4f7f\u7528\u3057\u3066\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u307f\u3001\u305d\u306e\u69cb\u9020\u3092\u7406\u89e3\u3057\u3001\u57fa\u672c\u7684\u306a\u7d71\u8a08\u91cf\u3092\u78ba\u8a8d\u3057\u3001\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316\u3092\u884c\u3044\u307e\u3057\u305f\u3002\u3053\u308c\u3089\u306e\u65b9\u6cd5\u3092\u6d3b\u7528\u3057\u3066\u3001\u3055\u307e\u3056\u307e\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u63a2\u7d22\u3057\u3001\u5206\u6790\u306e\u57fa\u790e\u3092\u7bc9\u3044\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002</p>"},{"location":"lectures/SIWS/01-getting-started/#_12","title":"\u307e\u3068\u3081","text":"<p>\u672c\u7ae0\u3067\u306f\u3001Python\u3092\u4f7f\u7528\u3057\u3066\u30c7\u30fc\u30bf\u3092\u63a2\u7d22\u3059\u308b\u305f\u3081\u306e\u57fa\u672c\u7684\u306a\u30c4\u30fc\u30eb\u30bb\u30c3\u30c8\u3092\u7d39\u4ecb\u3057\u307e\u3057\u305f\u3002\u3053\u306e\u7ae0\u306b\u3059\u3079\u3066\u306e\u77e5\u8b58\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3059\u3079\u3066\u3092\u76db\u308a\u8fbc\u3080\u3068\u81a8\u5927\u306a\u91cf\u306b\u306a\u308a\u3001\u5b9f\u7528\u7684\u3067\u306f\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u304b\u3089\u3067\u3059\uff01\u6700\u3082\u91cd\u8981\u306a\u306e\u306f\u3001Google Colaboratory\u4e0a\u3067\u5b9f\u969b\u306b\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3001\u8a66\u884c\u932f\u8aa4\u3092\u7e70\u308a\u8fd4\u3057\u306a\u304c\u3089\u5b66\u3076\u3053\u3068\u3067\u3059\u3002</p>"},{"location":"lectures/SIWS/01-getting-started/#_13","title":"\u8ffd\u52a0\u30ea\u30bd\u30fc\u30b9","text":"<p>\u3082\u3057\u3001Python\u3084Google Colaboratory\u3001\u30c7\u30fc\u30bf\u5206\u6790\u306b\u4e0d\u6163\u308c\u3067\u3001\u3088\u308a\u8a73\u7d30\u306a\u5165\u9580\u66f8\u3092\u6c42\u3081\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u30ea\u30bd\u30fc\u30b9\u3092\u53c2\u7167\u3059\u308b\u3053\u3068\u3092\u304a\u3059\u3059\u3081\u3057\u307e\u3059\u3002</p> <ul> <li> <p>Python Data Science Handbook   NumPy\u3001Pandas\u3001Matplotlib\u3001Scikit-Learn\u306a\u3069\u3001Python\u3092\u4f7f\u3063\u305f\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u306e\u57fa\u790e\u3092\u5b66\u3076\u305f\u3081\u306e\u5305\u62ec\u7684\u306a\u30ac\u30a4\u30c9\u3067\u3059\u3002</p> </li> <li> <p>Google Colaboratory\u306e\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8   Google Colab\u306e\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\u3092\u5b66\u3076\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30af\u30e9\u30a6\u30c9\u74b0\u5883\u3067Python\u3092\u5b9f\u884c\u3067\u304d\u308b\u305f\u3081\u3001\u74b0\u5883\u69cb\u7bc9\u306a\u3057\u306b\u3059\u3050\u306b\u59cb\u3081\u3089\u308c\u307e\u3059\u3002</p> </li> <li> <p>Pandas\u306e\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8   \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u64cd\u4f5c\u306e\u8a73\u7d30\u306a\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3067\u3059\u3002</p> </li> <li> <p>Matplotlib\u306e\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8   \u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316\u306b\u95a2\u3059\u308b\u8a73\u7d30\u306a\u60c5\u5831\u304c\u5f97\u3089\u308c\u307e\u3059\u3002</p> </li> </ul>"},{"location":"lectures/SIWS/01-getting-started/#_14","title":"\u4eca\u5f8c\u306e\u5c55\u958b","text":"<p>\u6b21\u306e\u7ae0\u3067\u306f\u3001\u300c\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u306b\u304a\u3051\u308b\u6700\u3082\u91cd\u8981\u306a\u30c4\u30fc\u30eb\u306e1\u3064\u300d\u3068\u3082\u8a00\u3048\u308b\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316\u306b\u3064\u3044\u3066\u5b66\u3073\u307e\u3059\u3002Pandas\u3068Matplotlib\u3092\u6d3b\u7528\u3057\u3001\u8996\u899a\u7684\u306b\u30c7\u30fc\u30bf\u3092\u63a2\u7d22\u3059\u308b\u65b9\u6cd5\u3092\u63a2\u6c42\u3057\u3066\u3044\u304d\u307e\u3059\u3002</p> <p>\u30c7\u30fc\u30bf\u53ef\u8996\u5316\u306f\u3001<code>head()</code> \u3084 <code>describe()</code> \u306e\u3088\u3046\u306a\u95a2\u6570\u3067\u306f\u6349\u3048\u304d\u308c\u306a\u3044\u30d1\u30bf\u30fc\u30f3\u3084\u50be\u5411\u3092\u660e\u3089\u304b\u306b\u3059\u308b\u5f37\u529b\u306a\u30c4\u30fc\u30eb\u3067\u3059\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u57fa\u672c\u7684\u306a\u30d7\u30ed\u30c3\u30c8\u3092\u5b66\u3073\u3001\u30c7\u30fc\u30bf\u306e\u80cc\u5f8c\u306b\u3042\u308b\u30b9\u30c8\u30fc\u30ea\u30fc\u3092\u8aad\u307f\u89e3\u304f\u529b\u3092\u990a\u3044\u307e\u3057\u3087\u3046\u3002</p> <pre><code>import pandas as pd\nimport matplotlib.pyplot as plt\n\n# \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\nurl = 'https://raw.githubusercontent.com/a-martyn/ISL-python/ee156568a8f7307be71dad5390bae12b51dcd93f/Notebooks/data/Advertising.csv'\ndata = pd.read_csv(url, index_col=0)\n\n# \u6563\u5e03\u56f3\u306e\u4f5c\u6210\uff08TV\u5e83\u544a\u8cbb\u3068\u58f2\u4e0a\u306e\u95a2\u4fc2\uff09\nplt.scatter(data['TV'], data['Sales'])\nplt.xlabel('TV Advertising Budget (in thousands of dollars)')\nplt.ylabel('Sales (in thousands of units)')\nplt.title('TV Advertising vs Sales')\nplt.show()\n</code></pre> <p>\u3053\u306e\u3088\u3046\u306b\u3001\u6b21\u306e\u7ae0\u3067\u306f\u30c7\u30fc\u30bf\u306e\u30d1\u30bf\u30fc\u30f3\u3092\u3088\u308a\u76f4\u611f\u7684\u306b\u7406\u89e3\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u306e\u65c5\u3092\u7d9a\u3051\u3066\u3044\u304d\u307e\u3057\u3087\u3046\uff01</p> <p>\u6b21\u306e\u7ae0\u3067\u306f\u3001\u300c\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u306b\u304a\u3051\u308b\u6700\u3082\u91cd\u8981\u306a\u30c4\u30fc\u30eb\u306e1\u3064\u300d\u3068\u3082\u8a00\u3048\u308b\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316\u306b\u3064\u3044\u3066\u5b66\u3073\u307e\u3059\u3002Pandas\u3068Matplotlib\u3092\u6d3b\u7528\u3057\u3001\u8996\u899a\u7684\u306b\u30c7\u30fc\u30bf\u3092\u63a2\u7d22\u3059\u308b\u65b9\u6cd5\u3092\u63a2\u6c42\u3057\u3066\u3044\u304d\u307e\u3059\u3002</p> <p>\u30c7\u30fc\u30bf\u53ef\u8996\u5316\u306f\u3001<code>head()</code> \u3084 <code>describe()</code> \u306e\u3088\u3046\u306a\u95a2\u6570\u3067\u306f\u6349\u3048\u304d\u308c\u306a\u3044\u30d1\u30bf\u30fc\u30f3\u3084\u50be\u5411\u3092\u660e\u3089\u304b\u306b\u3059\u308b\u5f37\u529b\u306a\u30c4\u30fc\u30eb\u3067\u3059\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u57fa\u672c\u7684\u306a\u30d7\u30ed\u30c3\u30c8\u3092\u5b66\u3073\u3001\u30c7\u30fc\u30bf\u306e\u80cc\u5f8c\u306b\u3042\u308b\u30b9\u30c8\u30fc\u30ea\u30fc\u3092\u8aad\u307f\u89e3\u304f\u529b\u3092\u990a\u3044\u307e\u3057\u3087\u3046\u3002</p> <pre><code>import pandas as pd\nimport matplotlib.pyplot as plt\n\n# \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\nurl = 'https://raw.githubusercontent.com/a-martyn/ISL-python/ee156568a8f7307be71dad5390bae12b51dcd93f/Notebooks/data/Advertising.csv'\ndata = pd.read_csv(url, index_col=0)\n\n# \u6563\u5e03\u56f3\u306e\u4f5c\u6210\uff08TV\u5e83\u544a\u8cbb\u3068\u58f2\u4e0a\u306e\u95a2\u4fc2\uff09\nplt.scatter(data['TV'], data['Sales'])\nplt.xlabel('TV Advertising Budget (in thousands of dollars)')\nplt.ylabel('Sales (in thousands of units)')\nplt.title('TV Advertising vs Sales')\nplt.show()\n</code></pre>"},{"location":"lectures/SIWS/01-getting-started/#_15","title":"\u7406\u89e3\u5ea6\u30c1\u30a7\u30c3\u30af\u8ab2\u984c","text":"<p>\u4ee5\u4e0b\u306e\u554f\u984c\u3092\u89e3\u3044\u3066\u3001Python\u3001Google Colaboratory\u3001Pandas\u3001Matplotlib\u3092\u7528\u3044\u305f\u30c7\u30fc\u30bf\u63a2\u7d22\u306e\u7406\u89e3\u3092\u6df1\u3081\u307e\u3057\u3087\u3046\u3002</p>"},{"location":"lectures/SIWS/01-getting-started/#1","title":"\u554f\u984c 1: \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f","text":"<p>\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u3069\u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u304b\uff1f \u30c7\u30fc\u30bf\u306e\u6982\u8981\u3092\u8aac\u660e\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <pre><code>import pandas as pd\n\nurl = 'https://raw.githubusercontent.com/a-martyn/ISL-python/ee156568a8f7307be71dad5390bae12b51dcd93f/Notebooks/data/Advertising.csv'\ndata = pd.read_csv(url, index_col=0)\nprint(data.head())\n</code></pre>"},{"location":"lectures/SIWS/01-getting-started/#2","title":"\u554f\u984c 2: \u30c7\u30fc\u30bf\u306e\u7d71\u8a08\u60c5\u5831","text":"<p>\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u3069\u306e\u3088\u3046\u306a\u60c5\u5831\u304c\u5f97\u3089\u308c\u307e\u3059\u304b\uff1f \u5f97\u3089\u308c\u305f\u60c5\u5831\u304b\u3089\u3001\u3069\u306e\u5e83\u544a\u5a92\u4f53\u304c\u58f2\u4e0a\u306b\u6700\u3082\u5f71\u97ff\u3092\u4e0e\u3048\u3066\u3044\u308b\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u304b\uff1f</p> <pre><code>print(data.describe())\n</code></pre>"},{"location":"lectures/SIWS/01-getting-started/#3","title":"\u554f\u984c 3: \u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316","text":"<p>\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3066\u3001TV\u5e83\u544a\u8cbb\u3068\u58f2\u4e0a\u306e\u95a2\u4fc2\u3092\u30d7\u30ed\u30c3\u30c8\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30b0\u30e9\u30d5\u306e\u50be\u5411\u3092\u8aac\u660e\u3057\u3001\u58f2\u4e0a\u306b\u5bfe\u3059\u308bTV\u5e83\u544a\u306e\u5f71\u97ff\u306b\u3064\u3044\u3066\u8003\u5bdf\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <pre><code>import matplotlib.pyplot as plt\n\nplt.scatter(data['TV'], data['Sales'])\nplt.xlabel('TV Advertising Budget (in thousands of dollars)')\nplt.ylabel('Sales (in thousands of units)')\nplt.title('TV Advertising vs Sales')\nplt.show()\n</code></pre>"},{"location":"lectures/SIWS/01-getting-started/#4","title":"\u554f\u984c 4: \u4ed6\u306e\u5e83\u544a\u5a92\u4f53\u3068\u306e\u95a2\u4fc2","text":"<p>\u30e9\u30b8\u30aa (<code>Radio</code>) \u3084\u65b0\u805e (<code>Newspaper</code>) \u306e\u5e83\u544a\u8cbb\u3068\u58f2\u4e0a\u306e\u95a2\u4fc2\u3092\u8abf\u3079\u308b\u305f\u3081\u306b\u3001 \u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3092\u4fee\u6b63\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u6563\u5e03\u56f3\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u7d50\u679c\u304b\u3089\u3001\u3069\u306e\u5e83\u544a\u5a92\u4f53\u304c\u58f2\u4e0a\u306b\u5bfe\u3057\u3066\u6700\u3082\u5927\u304d\u306a\u5f71\u97ff\u3092\u6301\u3064\u304b\u8003\u5bdf\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"lectures/SIWS/01-getting-started/#5","title":"\u554f\u984c 5: \u30c7\u30fc\u30bf\u306e\u5fdc\u7528","text":"<p>\u4f01\u696d\u304c\u5e83\u544a\u8cbb\u3092\u6700\u9069\u306b\u914d\u5206\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u3069\u306e\u3088\u3046\u306a\u5206\u6790\u3092\u884c\u3046\u3079\u304d\u3067\u3057\u3087\u3046\u304b\uff1f \u307e\u305f\u3001Pandas\u3084Matplotlib\u3092\u6d3b\u7528\u3057\u3066\u3001\u3069\u306e\u3088\u3046\u306a\u8ffd\u52a0\u306e\u8996\u899a\u5316\u3084\u7d71\u8a08\u5206\u6790\u304c\u3067\u304d\u308b\u304b\u63d0\u6848\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>\u4ee5\u4e0a\u306e\u554f\u984c\u3092\u89e3\u304f\u3053\u3068\u3067\u3001Python\u3092\u7528\u3044\u305f\u30c7\u30fc\u30bf\u306e\u63a2\u7d22\u3068\u53ef\u8996\u5316\u306e\u57fa\u790e\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002 \u5b9f\u969b\u306b\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3001\u5f97\u3089\u308c\u305f\u7d50\u679c\u3092\u3082\u3068\u306b\u8003\u5bdf\u3092\u6df1\u3081\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"lectures/SIWS/02-visualization/","title":"\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316","text":"<p>\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u306e\u30c4\u30fc\u30eb\u30dc\u30c3\u30af\u30b9\u3092\u69cb\u7bc9\u3059\u308b\u6700\u521d\u306e\u30b9\u30c6\u30c3\u30d7\u3068\u3057\u3066\u3001\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316\u3092\u5b66\u3073\u307e\u3059\u3002\u30c7\u30fc\u30bf\u3092\u8996\u899a\u5316\u3059\u308b\u3053\u3068\u3067\u3001\u5358\u306a\u308b\u6570\u5024\u306e\u7f85\u5217\u3067\u306f\u898b\u3048\u306a\u304b\u3063\u305f\u30d1\u30bf\u30fc\u30f3\u3084\u50be\u5411\u3092\u767a\u898b\u3067\u304d\u307e\u3059\u3002Python\u3067\u306f\u3001<code>matplotlib</code> \u3084 <code>seaborn</code> \u3092\u5229\u7528\u3057\u3066\u30c7\u30fc\u30bf\u3092\u53ef\u8996\u5316\u3067\u304d\u307e\u3059\u3002\u672c\u7ae0\u3067\u306f\u3001\u3053\u308c\u3089\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u6d3b\u7528\u3057\u3001\u57fa\u672c\u7684\u306a\u30d7\u30ed\u30c3\u30c8\u3092\u4f5c\u6210\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002</p> <p>\u30b0\u30e9\u30d5\uff08\u30d7\u30ed\u30c3\u30c8\u3084\u30c1\u30e3\u30fc\u30c8\u3068\u3082\u547c\u3073\u307e\u3059\uff09\u306f\u3001\u30c7\u30fc\u30bf\u306e\u30d1\u30bf\u30fc\u30f3\u3092\u63a2\u308b\u305f\u3081\u306e\u5f37\u529b\u306a\u624b\u6cd5\u3067\u3059\u3002\u4f8b\u3048\u3070\u3001\u5916\u308c\u5024\u306e\u7279\u5b9a\u3001\u30c7\u30fc\u30bf\u306e\u5206\u5e03\u3001\u5909\u6570\u9593\u306e\u95a2\u4fc2\u6027\u3092\u7406\u89e3\u3059\u308b\u306e\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002\u9069\u5207\u306a\u53ef\u8996\u5316\u3092\u884c\u3046\u3053\u3068\u3067\u3001\u30c7\u30fc\u30bf\u304b\u3089\u5f97\u3089\u308c\u308b\u6d1e\u5bdf\u3092\u52b9\u679c\u7684\u306b\u4f1d\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u60c5\u5831\u3092\u8a70\u3081\u8fbc\u307f\u3059\u304e\u308b\u3068\u3001\u304b\u3048\u3063\u3066\u7406\u89e3\u3057\u306b\u304f\u304f\u306a\u308b\u3053\u3068\u3082\u3042\u308b\u305f\u3081\u3001\u9069\u5207\u306a\u30d0\u30e9\u30f3\u30b9\u3092\u53d6\u308b\u3053\u3068\u304c\u91cd\u8981\u3067\u3059\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#_2","title":"\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea","text":"<p>\u672c\u7ae0\u3067\u306f\u3001gapminder\u3068\u547c\u3070\u308c\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u5229\u7528\u3057\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u306b\u3001\u307e\u305a\u306f\u4ee5\u4e0b\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <pre><code>!pip install gapminder\n</code></pre> <p>\u6b21\u306b\u3001\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u307e\u3059\u3002</p> <pre><code>import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom gapminder import gapminder\n</code></pre>"},{"location":"lectures/SIWS/02-visualization/#_3","title":"\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u306e\u57fa\u790e\u7406\u8ad6","text":"<p>\u300c\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u306e\u6587\u6cd5\uff08Grammar of Graphics\uff09\u300d\u3068\u306f\u3001\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316\u3092\u4f53\u7cfb\u7684\u306b\u6574\u7406\u3059\u308b\u305f\u3081\u306e\u7406\u8ad6\u3067\u3059\u3002\u3053\u306e\u6982\u5ff5\u306f Leland Wilkinson \u306b\u3088\u3063\u3066\u63d0\u5531\u3055\u308c\u3001R\u306e <code>ggplot2</code> \u3084 Python\u306e <code>plotly</code> \u306a\u3069\u306e\u53ef\u8996\u5316\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3082\u5fdc\u7528\u3055\u308c\u3066\u3044\u307e\u3059\u3002</p> <p>\u3053\u306e\u7406\u8ad6\u306b\u3088\u308b\u3068\u3001\u7d71\u8a08\u30b0\u30e9\u30d5\u306f\u6b21\u306e3\u3064\u306e\u8981\u7d20\u304b\u3089\u69cb\u6210\u3055\u308c\u307e\u3059\u3002</p> <ol> <li>\u30c7\u30fc\u30bf (<code>data</code>): \u53ef\u8996\u5316\u306e\u5bfe\u8c61\u3068\u306a\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3002</li> <li>\u5e7e\u4f55\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 (<code>geom</code>): \u30b0\u30e9\u30d5\u306b\u63cf\u753b\u3055\u308c\u308b\u57fa\u672c\u8981\u7d20\uff08\u70b9\u3001\u7dda\u3001\u68d2\u306a\u3069\uff09\u3002</li> <li>\u7f8e\u7684\u8981\u7d20 (<code>aes</code>): \u5e7e\u4f55\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u898b\u305f\u76ee\u3092\u6c7a\u3081\u308b\u8981\u7d20\uff08\u4f4d\u7f6e\u3001\u8272\u3001\u5927\u304d\u3055\u306a\u3069\uff09\u3002</li> </ol> <p>\u3053\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3067\u3001\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316\u3092\u69cb\u7bc9\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#gapminder","title":"Gapminder\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316","text":"<p>Gapminder\u306f\u3001\u4e16\u754c\u306e\u7d4c\u6e08\u30fb\u5065\u5eb7\u30fb\u767a\u5c55\u72b6\u6cc1\u306b\u95a2\u3059\u308b\u30c7\u30fc\u30bf\u3092\u63d0\u4f9b\u3059\u308b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002\u3053\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u306f\u3001\u5404\u56fd\u306eGDP\u3001\u5bff\u547d\u3001\u4eba\u53e3\u306a\u3069\u306e\u60c5\u5831\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#_4","title":"\u30c7\u30fc\u30bf\u306e\u6e96\u5099","text":"<p>\u307e\u305a\u3001Gapminder\u30c7\u30fc\u30bf\u30922007\u5e74\u306e\u30c7\u30fc\u30bf\u306b\u7d5e\u308a\u8fbc\u3093\u3067\u8868\u793a\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <pre><code># 2007\u5e74\u306e\u30c7\u30fc\u30bf\u306e\u307f\u3092\u53d6\u5f97\ngapminder_2007 = gapminder[gapminder['year'] == 2007]\n\n# \u5fc5\u8981\u306a\u5217\u306e\u307f\u9078\u629e\ngapminder_2007 = gapminder_2007[['country', 'continent', 'lifeExp', 'pop', 'gdpPercap']]\ngapminder_2007.columns = ['Country', 'Continent', 'Life Expectancy', 'Population', 'GDP per Capita']\n\n# \u30c7\u30fc\u30bf\u306e\u5148\u982d\u3092\u8868\u793a\ngapminder_2007.head()\n</code></pre> <p>\u3053\u306e\u8868\u306e\u5404\u884c\u306f1\u3064\u306e\u56fd\u3092\u8868\u3057\u3001\u6b21\u306e\u60c5\u5831\u3092\u542b\u307f\u307e\u3059\u3002</p> <ol> <li>Country: \u56fd\u306e\u540d\u524d\u3002</li> <li>Continent: 5\u3064\u306e\u5927\u9678\u306e\u3044\u305a\u308c\u304b\uff08\u300cAmericas\u300d\u306f\u5317\u7c73\u3068\u5357\u7c73\u3092\u542b\u307f\u3001\u5357\u6975\u306f\u9664\u5916\uff09\u3002</li> <li>Life Expectancy: \u5e73\u5747\u5bff\u547d\uff08\u5e74\uff09\u3002</li> <li>Population: \u4eba\u53e3\uff08\u4eba\uff09\u3002</li> <li>GDP per Capita: 1\u4eba\u5f53\u305f\u308aGDP\uff08\u7c73\u30c9\u30eb\uff09\u3002</li> </ol>"},{"location":"lectures/SIWS/02-visualization/#_5","title":"\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316","text":"<p>2007\u5e74\u306eGDP\u3068\u5e73\u5747\u5bff\u547d\u306e\u95a2\u4fc2\u3092\u53ef\u8996\u5316\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <pre><code>plt.figure(figsize=(10, 6))\n\nsns.scatterplot(\n    data=gapminder_2007,\n    x='GDP per Capita',\n    y='Life Expectancy',\n    size='Population',\n    hue='Continent',\n    sizes=(10, 200),\n    alpha=0.7\n)\n\nplt.xscale('log')  # GDP\u306f\u5bfe\u6570\u30b9\u30b1\u30fc\u30eb\u306b\u5909\u63db\nplt.xlabel('GDP per Capita (log scale)')\nplt.ylabel('Life Expectancy (years)')\nplt.title('2007\u5e74\u306b\u304a\u3051\u308bGDP\u3068\u5e73\u5747\u5bff\u547d\u306e\u95a2\u4fc2')\nplt.legend(title='Continent', bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.show()\n</code></pre> <p>\u3053\u306e\u3068\u304d\u3001\u30b0\u30e9\u30d5\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u307f\u308b\u3068\u3001\u65e5\u672c\u8a9e\u304c\u8868\u793a\u3067\u304d\u3066\u3044\u306a\u3044\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u306d\u3002\u3053\u308c\u306f\u3001\u975e\u5e38\u306b\u3088\u304f\u8d77\u304d\u308b\u554f\u984c\u3067\u3059\u3002python\u3067\u306f\u3001\u3053\u308c\u3092\u4ee5\u4e0b\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3053\u3068\u3067\u89e3\u6d88\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <pre><code>    !pip install japanize-matplotlib\n</code></pre> <p>\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u5f8c\u3067\u3001\u6700\u521d\u306e <code>import</code> \u90e8\u5206\u3092\u6b21\u306e\u3088\u3046\u306b\u5909\u66f4\u3057\u307e\u3057\u3087\u3046\u3002</p> <pre><code>    import numpy as np\n    import pandas as pd\n    import matplotlib.pyplot as plt\n    import japanize_matplotlib\n    import seaborn as sns\n    from gapminder import gapminder\n</code></pre> <p>\u3053\u308c\u3067\u65e5\u672c\u8a9e\u304c\u8868\u793a\u3055\u308c\u308b\u306f\u305a\u3067\u3059\u3002\u6b21\u306b\u3001\u3053\u306e\u30d7\u30ed\u30c3\u30c8\u3092\u8a73\u3057\u304f\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002</p> <ul> <li>\u5909\u6570 GDP per Capita\uff081\u4eba\u5f53\u305f\u308aGDP\uff09 \u306f\u3001x\u8ef8\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u3066\u3044\u307e\u3059\u3002</li> <li>\u5909\u6570 Life Expectancy\uff08\u5e73\u5747\u5bff\u547d\uff09 \u306f\u3001\u30dd\u30a4\u30f3\u30c8\u306e y\u8ef8\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u3066\u3044\u307e\u3059\u3002</li> <li>\u5909\u6570 Population\uff08\u4eba\u53e3\uff09 \u306f\u3001\u30dd\u30a4\u30f3\u30c8\u306e \u30b5\u30a4\u30ba\uff08size aesthetic\uff09 \u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u307e\u3059\u3002</li> <li>\u5909\u6570 Continent\uff08\u5927\u9678\uff09 \u306f\u3001\u30dd\u30a4\u30f3\u30c8\u306e \u8272\uff08color aesthetic\uff09 \u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u307e\u3059\u3002</li> </ul> <p>\u3053\u3053\u3067\u3001<code>data</code>\uff08\u30c7\u30fc\u30bf\uff09\u3068\u306f python\u306e <code>dataframe</code>\u306b\u5bfe\u5fdc\u3057\u3001\u30c7\u30fc\u30bf\u5909\u6570\uff08data variables\uff09 \u304c\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u5185\u306e\u7279\u5b9a\u306e\u5217\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u3002\u7279\u306b\u3053\u306e\u30d7\u30ed\u30c3\u30c8\u3067\u306f\u30014\u3064\u306e\u60c5\u5831\u3092\u540c\u6642\u306b\u96c6\u7d04\u3057\u3066\u3044\u307e\u3059\u3002x\u8ef8\u306b\u4e00\u4eba\u3042\u305f\u308a\u306eGDP\u3001y\u8ef8\u306b\u5e73\u5747\u5bff\u547d\u3001\u3055\u3089\u306b\u70b9\u306e\u5927\u304d\u3055\u3067\u4eba\u53e3\u3001\u305d\u3057\u3066\u3001\u70b9\u306e\u8272\u3067\u5927\u9678\u3092\u8868\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u30d7\u30ed\u30c3\u30c8\u3092\u901a\u3058\u3066\u3001\u4ee5\u4e0b\u306e\u50be\u5411\u304c\u8aad\u307f\u53d6\u308c\u307e\u3059\u3002</p> <ul> <li>GDP\u304c\u9ad8\u3044\u56fd\u307b\u3069\u3001\u5e73\u5747\u5bff\u547d\u304c\u9577\u3044\u50be\u5411\u304c\u3042\u308b\u3002</li> <li>\u5927\u9678\u3054\u3068\u306b\u5206\u5e03\u304c\u7570\u306a\u308a\u3001\u7279\u306b\u30a2\u30d5\u30ea\u30ab\uff08Africa\uff09\u306e\u56fd\u3005\u306fGDP\u3068\u5e73\u5747\u5bff\u547d\u304c\u4f4e\u3044\u50be\u5411\u304c\u3042\u308b\u3002</li> <li>\u56fd\u3054\u3068\u306e\u4eba\u53e3\uff08\u70b9\u306e\u5927\u304d\u3055\uff09\u3082\u8996\u899a\u7684\u306b\u628a\u63e1\u3067\u304d\u308b\u3002</li> </ul> <p>\u3053\u306e\u3088\u3046\u306b\u81ea\u5206\u304c\u793a\u3057\u305f\u3044\u3082\u306e\u304c\u4f55\u304b\u3068\u3044\u3046\u3053\u3068\u3092\u610f\u8b58\u3057\u3066\u3001\u9069\u5207\u306a\u56f3\u3092\u66f8\u304f\u3053\u3068\u306f\u3001\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u306e\u57fa\u672c\u3068\u306a\u308b\u3082\u306e\u3067\u3059\u3002\u307e\u305f\u3001\u30c7\u30fc\u30bf\u306e\u7a2e\u985e\u306b\u3088\u3063\u3066\u3082\u3001\u6700\u9069\u306a\u56f3\u306e\u66f8\u304d\u65b9\u306f\u7570\u306a\u308a\u307e\u3059\u3002\u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u3068\u3057\u3066\u3001\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u306b\u304a\u3051\u308b5\u3064\u306e\u57fa\u672c\u7684\u306a\u56f3\u306b\u3064\u3044\u3066\u5b66\u3073\u307e\u3057\u3087\u3046\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#python-5-5ng","title":"Python\u306b\u3088\u308b\u30c7\u30fc\u30bf\u53ef\u8996\u5316\u5165\u9580: 5\u3064\u306e\u4ee3\u8868\u7684\u306a\u30b0\u30e9\u30d5 (5NG)","text":"<p>\u3053\u306e\u30c6\u30ad\u30b9\u30c8\u3067\u306f\u3001Google Colaboratory\u4e0a\u3067Python\u3001NumPy\u3001Pandas\u3001matplotlib\u3001seaborn\u3092\u7528\u3044\u3066\u3001\u30c7\u30fc\u30bf\u53ef\u8996\u5316\u306e\u57fa\u672c\u3068\u306a\u308b5\u7a2e\u985e\u306e\u30b0\u30e9\u30d5\uff085NG\uff09\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3001seaborn\u306b\u7d44\u307f\u8fbc\u307e\u308c\u3066\u3044\u308biris\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f8b\u3068\u3057\u3066\u4f7f\u7528\u3057\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#22-5-5ng","title":"2.2 5\u3064\u306e\u4ee3\u8868\u7684\u306a\u30b0\u30e9\u30d5 \u2013 5NG","text":"<p>\u672c\u66f8\u3067\u306f\u3001\u4ee5\u4e0b\u306e5\u7a2e\u985e\u306e\u30b0\u30e9\u30d5\u306b\u6ce8\u76ee\u3057\u307e\u3059\u3002\u3053\u308c\u3089\u306f\u4e00\u822c\u7684\u306b\u540d\u524d\u304c\u4ed8\u3051\u3089\u308c\u3066\u304a\u308a\u3001\u4ee5\u964d\u300c5NG\u300d\u3068\u547c\u3073\u307e\u3059\uff1a</p> <ul> <li>\u6563\u5e03\u56f3 (scatterplots)</li> <li>\u6298\u308c\u7dda\u30b0\u30e9\u30d5 (linegraphs)</li> <li>\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0 (histograms)</li> <li>\u7bb1\u3072\u3052\u56f3 (boxplots)</li> <li>\u68d2\u30b0\u30e9\u30d5 (barplots)</li> </ul> <p>\u3053\u308c\u3089\u306e\u57fa\u672c\u7684\u306a\u30b0\u30e9\u30d5\u3092\u899a\u3048\u3066\u304a\u304f\u3053\u3068\u3067\u3001\u3055\u307e\u3056\u307e\u306a\u7a2e\u985e\u306e\u5909\u6570\u3092\u8996\u899a\u7684\u306b\u8868\u73fe\u3059\u308b\u969b\u306b\u975e\u5e38\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002\u306a\u304a\u3001\u3042\u308b\u30b0\u30e9\u30d5\u306f\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u306b\u9069\u3057\u3066\u304a\u308a\u3001\u307e\u305f\u5225\u306e\u30b0\u30e9\u30d5\u306f\u6570\u5024\u5909\u6570\u306b\u9069\u3057\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#23-5ng1-scatterplots","title":"2.3 5NG#1: \u6563\u5e03\u56f3 (Scatterplots)","text":"<p>\u6563\u5e03\u56f3\u306f\u30012\u3064\u306e\u6570\u5024\u5909\u6570\u9593\u306e\u95a2\u4fc2\u6027\u3092\u8996\u899a\u5316\u3059\u308b\u6700\u3082\u57fa\u672c\u7684\u306a\u30b0\u30e9\u30d5\u3067\u3059\u3002\u3053\u3053\u3067\u306f\u3001iris\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u4ee5\u4e0b\u306e2\u3064\u306e\u6570\u5024\u5909\u6570\u306e\u95a2\u4fc2\u3092\u6563\u5e03\u56f3\u3067\u8868\u73fe\u3057\u307e\u3059\uff1a</p> <ul> <li>sepal_length\uff1ax\u8ef8</li> <li>petal_length\uff1ay\u8ef8</li> </ul>"},{"location":"lectures/SIWS/02-visualization/#231","title":"2.3.1 \u57fa\u672c\u7684\u306a\u6563\u5e03\u56f3\u306e\u4f5c\u6210","text":"<p>\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306f\u3001iris\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u307f\u3001<code>sepal_length</code> \u3068 <code>petal_length</code> \u306e\u95a2\u4fc2\u3092\u6563\u5e03\u56f3\u3067\u53ef\u8996\u5316\u3059\u308b\u4f8b\u3067\u3059\u3002</p> <pre><code>import seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Iris\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f\niris = sns.load_dataset(\"iris\")\n\n# \u57fa\u672c\u7684\u306a\u6563\u5e03\u56f3\u306e\u4f5c\u6210\nsns.scatterplot(data=iris, x=\"sepal_length\", y=\"petal_length\")\nplt.title(\"Iris\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8: sepal_length\u3068petal_length\u306e\u6563\u5e03\u56f3\")\nplt.xlabel(\"sepal_length\")\nplt.ylabel(\"petal_length\")\nplt.show()\n</code></pre> <p>\u3053\u306e\u30b3\u30fc\u30c9\u3067\u306f\u3001sns.scatterplot \u95a2\u6570\u3092\u7528\u3044\u3066\u3001iris\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5185\u306esepal_length\uff08x\u8ef8\uff09\u3068petal_length\uff08y\u8ef8\uff09\u306e\u5404\u30b5\u30f3\u30d7\u30eb\u3092\u70b9\u3068\u3057\u3066\u30d7\u30ed\u30c3\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\u56f3\u3067\u306f\u3001\u5404\u70b9\u304c1\u3064\u306e\u82b1\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u8868\u3057\u3066\u304a\u308a\u3001\u4e21\u5909\u6570\u9593\u306e\u95a2\u4fc2\u6027\u304c\u8996\u899a\u7684\u306b\u628a\u63e1\u3067\u304d\u307e\u3059\u3002</p> <p>Note</p> <p>(LC2.1) Iris\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092Pandas\u306eDataFrame\u3068\u3057\u3066\u8868\u793a\u3057\u3001\u5404\u5909\u6570\uff08sepal_length, sepal_width, petal_length, petal_width, species\uff09\u306e\u578b\u3068\u5185\u5bb9\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#232","title":"2.3.2 \u904e\u5270\u306a\u30d7\u30ed\u30c3\u30c8\uff08\u30aa\u30fc\u30d0\u30fc\u30d7\u30ed\u30c3\u30c6\u30a3\u30f3\u30b0\uff09\u3078\u306e\u5bfe\u51e6","text":"<p>\u30c7\u30fc\u30bf\u6570\u304c\u975e\u5e38\u306b\u591a\u3044\u5834\u5408\u3001\u540c\u3058\u4f4d\u7f6e\u306b\u70b9\u304c\u91cd\u306a\u3063\u3066\u3057\u307e\u3044\u3001\u5b9f\u969b\u306b\u30d7\u30ed\u30c3\u30c8\u3055\u308c\u3066\u3044\u308b\u70b9\u306e\u6570\u304c\u5206\u304b\u308a\u306b\u304f\u304f\u306a\u308b\u300c\u30aa\u30fc\u30d0\u30fc\u30d7\u30ed\u30c3\u30c6\u30a3\u30f3\u30b0\u300d\u304c\u767a\u751f\u3057\u307e\u3059\u3002\u3053\u308c\u306b\u5bfe\u51e6\u3059\u308b\u65b9\u6cd5\u306f\u4e3b\u306b2\u3064\u3042\u308a\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#1-alpha","title":"\u65b9\u6cd51: \u900f\u660e\u5ea6 (alpha) \u306e\u8abf\u6574","text":"<p>\u70b9\u306e\u900f\u660e\u5ea6\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u3067\u3001\u91cd\u306a\u3063\u305f\u90e8\u5206\u304c\u6fc3\u304f\u898b\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u3001\u70b9\u306e\u5bc6\u96c6\u5ea6\u304c\u8996\u899a\u7684\u306b\u5206\u304b\u308a\u3084\u3059\u304f\u306a\u308a\u307e\u3059\u3002\u4ee5\u4e0b\u306f\u900f\u660e\u5ea6\u3092\u8a2d\u5b9a\u3057\u305f\u6563\u5e03\u56f3\u306e\u4f8b\u3067\u3059\u3002</p> <p>python \u30b3\u30d4\u30fc\u3059\u308b sns.scatterplot(data=iris, x=\"sepal_length\", y=\"petal_length\", alpha=0.5) plt.title(\"\u900f\u660e\u5ea6\u3092\u8abf\u6574\u3057\u305f\u6563\u5e03\u56f3 (alpha=0.5)\") plt.xlabel(\"sepal_length\") plt.ylabel(\"petal_length\") plt.show() \u3053\u3053\u3067\u306f\u3001alpha \u30d1\u30e9\u30e1\u30fc\u30bf\u30920.5\u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u5404\u70b9\u306e\u4e0d\u900f\u660e\u5ea6\u304c50%\u3068\u306a\u308a\u3001\u91cd\u306a\u3063\u3066\u3044\u308b\u90e8\u5206\u306f\u3088\u308a\u6fc3\u304f\u8868\u793a\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#2-jitter","title":"\u65b9\u6cd52: \u30b8\u30c3\u30bf\u30fc (Jitter) \u306e\u8ffd\u52a0","text":"<p>\u30b8\u30c3\u30bf\u30fc\u306f\u3001\u5404\u70b9\u306b\u5c0f\u3055\u306a\u30e9\u30f3\u30c0\u30e0\u306a\u305a\u308c\uff08\u30ce\u30a4\u30ba\uff09\u3092\u52a0\u3048\u3066\u3001\u540c\u3058\u4f4d\u7f6e\u306b\u91cd\u306a\u3063\u3066\u8868\u793a\u3055\u308c\u308b\u70b9\u3092\u5c11\u3057\u305a\u3089\u3059\u624b\u6cd5\u3067\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u91cd\u306a\u308a\u5408\u3063\u3066\u3044\u308b\u70b9\u304c\u500b\u5225\u306b\u898b\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306f\u30b8\u30c3\u30bf\u30fc\u3092\u52a0\u3048\u305f\u6563\u5e03\u56f3\u306e\u4f8b\u3067\u3059\u3002</p> <pre><code>import numpy as np\n\n# \u30b8\u30c3\u30bf\u30fc\u306e\u5f37\u3055\uff08\u8abf\u6574\u53ef\u80fd\uff09\njitter_strength = 0.1\n\n# sepal_length\u3068petal_length\u306b\u30e9\u30f3\u30c0\u30e0\u306a\u30ce\u30a4\u30ba\u3092\u52a0\u3048\u308b\nx_jittered = iris[\"sepal_length\"] + np.random.uniform(-jitter_strength, jitter_strength, size=len(iris))\ny_jittered = iris[\"petal_length\"] + np.random.uniform(-jitter_strength, jitter_strength, size=len(iris))\n\nplt.figure()\nplt.scatter(x_jittered, y_jittered, alpha=0.7)\nplt.title(\"\u30b8\u30c3\u30bf\u30fc\u3092\u52a0\u3048\u305f\u6563\u5e03\u56f3\")\nplt.xlabel(\"sepal_length (jittered)\")\nplt.ylabel(\"petal_length (jittered)\")\nplt.show()\n</code></pre> <p>\u3053\u306e\u4f8b\u3067\u306f\u3001np.random.uniform \u3092\u7528\u3044\u3066\u3001\u5404\u70b9\u306b -0.1 \u304b\u3089 0.1 \u306e\u7bc4\u56f2\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u5024\u3092\u52a0\u3048\u3066\u3044\u307e\u3059\u3002\u30b8\u30c3\u30bf\u30fc\u306f\u3042\u304f\u307e\u3067\u8996\u899a\u5316\u306e\u305f\u3081\u306e\u624b\u6cd5\u3067\u3042\u308a\u3001\u5143\u306e\u30c7\u30fc\u30bf\u81ea\u4f53\u306f\u5909\u66f4\u3055\u308c\u307e\u305b\u3093\u3002</p> <p>Learning Check</p> <p>(LC2.2) \u900f\u660e\u5ea6\uff08alpha\uff09\u306e\u8a2d\u5b9a\u304c\u3001\u91cd\u306a\u308a\u5408\u3046\u70b9\u306e\u5bc6\u96c6\u5ea6\u3092\u3069\u306e\u3088\u3046\u306b\u8868\u73fe\u3059\u308b\u304b\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002 (LC2.3) \u30b8\u30c3\u30bf\u30fc\u306b\u3088\u3063\u3066\u70b9\u304c\u308f\u305a\u304b\u306b\u305a\u308c\u308b\u3068\u3001\u5143\u306e\u30c7\u30fc\u30bf\u306e\u30d1\u30bf\u30fc\u30f3\u306f\u3069\u306e\u3088\u3046\u306b\u5909\u5316\u3059\u308b\u3067\u3057\u3087\u3046\u304b\uff1f\u307e\u305f\u3001\u30b8\u30c3\u30bf\u30fc\u306e\u5f37\u3055\u306f\u3069\u306e\u3088\u3046\u306b\u8abf\u6574\u3059\u308b\u306e\u304c\u9069\u5207\u304b\u691c\u8a0e\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#233","title":"2.3.3 \u307e\u3068\u3081","text":"<p>\u6563\u5e03\u56f3\u306f\u30012\u3064\u306e\u6570\u5024\u5909\u6570\u9593\u306e\u95a2\u4fc2\u3092\u76f4\u611f\u7684\u306b\u628a\u63e1\u3059\u308b\u305f\u3081\u306e\u57fa\u672c\u7684\u306a\u53ef\u8996\u5316\u624b\u6cd5\u3067\u3059\u3002\u7279\u306b\u30c7\u30fc\u30bf\u91cf\u304c\u591a\u3044\u5834\u5408\u3001\u900f\u660e\u5ea6\u306e\u8abf\u6574\u3084\u30b8\u30c3\u30bf\u30fc\u306e\u8ffd\u52a0\u3068\u3044\u3063\u305f\u5de5\u592b\u3092\u3059\u308b\u3053\u3068\u3067\u3001\u91cd\u306a\u308a\u5408\u3063\u305f\u30c7\u30fc\u30bf\u70b9\u306e\u60c5\u5831\u3092\u3088\u308a\u660e\u78ba\u306b\u4f1d\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3069\u306e\u624b\u6cd5\u3092\u7528\u3044\u308b\u304b\u306f\u3001\u30c7\u30fc\u30bf\u306e\u7279\u6027\u3084\u4f1d\u3048\u305f\u3044\u5185\u5bb9\u306b\u5fdc\u3058\u3066\u5224\u65ad\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>Learning Check</p> <p>(LC2.4) \u900f\u660e\u5ea6\u306e\u8abf\u6574\u3068\u30b8\u30c3\u30bf\u30fc\u306e\u8ffd\u52a0\u3001\u305d\u308c\u305e\u308c\u306e\u624b\u6cd5\u306e\u30e1\u30ea\u30c3\u30c8\u30fb\u30c7\u30e1\u30ea\u30c3\u30c8\u3092\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 (LC2.5) Iris\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5185\u306e\u4ed6\u306e\u6570\u5024\u5909\u6570\uff08\u4f8b\u3048\u3070\u3001sepal_width\u3084petal_width\uff09\u3092\u7528\u3044\u3066\u3001\u5225\u306e\u6563\u5e03\u56f3\u3092\u4f5c\u6210\u3057\u3001\u5f97\u3089\u308c\u308b\u30d1\u30bf\u30fc\u30f3\u306e\u9055\u3044\u3092\u89b3\u5bdf\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002 \u3053\u306e\u3088\u3046\u306b\u3001Python\u3068Google Colaboratory\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3001R\u3084RStudio\u3067\u884c\u3063\u3066\u3044\u305f\u3088\u3046\u306a\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u306e\u57fa\u672c\u64cd\u4f5c\u3092\u624b\u8efd\u306b\u518d\u73fe\u3057\u3001\u3055\u307e\u3056\u307e\u306a\u624b\u6cd5\u3067\u30c7\u30fc\u30bf\u306e\u7279\u5fb4\u3092\u660e\u3089\u304b\u306b\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\u6b21\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3001\u6298\u308c\u7dda\u30b0\u30e9\u30d5\u3001\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3001\u7bb1\u3072\u3052\u56f3\u3001\u68d2\u30b0\u30e9\u30d5\u306e\u4f5c\u6210\u65b9\u6cd5\u306b\u3064\u3044\u3066\u3082\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#5ng2-linegraphs","title":"5NG#2: \u6298\u308c\u7dda\u30b0\u30e9\u30d5 (Linegraphs)","text":"<p>\u6298\u308c\u7dda\u30b0\u30e9\u30d5\u306f\u3001x\u8ef8\u306b\u9806\u5e8f\u6027\uff08\u7279\u306b\u6642\u9593\u306a\u3069\u306e\u9023\u7d9a\u7684\u306a\u60c5\u5831\uff09\u304c\u3042\u308b\u5834\u5408\u306b\u30012\u3064\u306e\u6570\u5024\u5909\u6570\u9593\u306e\u95a2\u4fc2\u3092\u8996\u899a\u5316\u3059\u308b\u305f\u3081\u306e\u30b0\u30e9\u30d5\u3067\u3059\u3002\u96a3\u63a5\u3059\u308b\u30c7\u30fc\u30bf\u70b9\u3092\u7dda\u3067\u7d50\u3076\u3053\u3068\u3067\u3001\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306e\u5909\u5316\u3084\u30c8\u30ec\u30f3\u30c9\u3092\u660e\u78ba\u306b\u793a\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <p>\u3053\u3053\u3067\u306f\u3001seaborn\u306b\u7d44\u307f\u8fbc\u307e\u308c\u3066\u3044\u308bflights\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f7f\u7528\u3057\u3066\u30011949\u5e74\u304b\u30891960\u5e74\u307e\u3067\u306e\u6708\u3054\u3068\u306e\u4e57\u5ba2\u6570\u306e\u63a8\u79fb\u3092\u6298\u308c\u7dda\u30b0\u30e9\u30d5\u3067\u53ef\u8996\u5316\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002 flights\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u3001\u4ee5\u4e0b\u306e\u5909\u6570\u3092\u542b\u3093\u3067\u3044\u307e\u3059\uff1a</p> <ul> <li>year: \u5e74\uff081949\uff5e1960\uff09</li> <li>month: \u6708\uff08\"Jan\", \"Feb\", \u2026, \"Dec\" \u3068\u3044\u3063\u305f\u6587\u5b57\u5217\uff09</li> <li>passengers: \u5404\u6708\u306e\u4e57\u5ba2\u6570</li> </ul>"},{"location":"lectures/SIWS/02-visualization/#flights","title":"flights\u30c7\u30fc\u30bf\u306e\u6e96\u5099\u3068\u65e5\u6642\u5909\u6570\u306e\u4f5c\u6210","text":"<p>\u6298\u308c\u7dda\u30b0\u30e9\u30d5\u3092\u4f5c\u6210\u3059\u308b\u969b\u306b\u306f\u3001x\u8ef8\u306b\u9806\u5e8f\u6027\u306e\u3042\u308b\u5909\u6570\uff08\u3053\u3053\u3067\u306f\u65e5\u6642\uff09\u304c\u5fc5\u8981\u3067\u3059\u3002 flights\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u306f\u3001<code>year</code> \u3068 <code>month</code> \u306e2\u3064\u306e\u5909\u6570\u304b\u3089\u65e5\u6642\u60c5\u5831\u3092\u4f5c\u6210\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u306f\u3001Pandas\u3092\u7528\u3044\u3066\u3053\u308c\u3089\u306e\u5909\u6570\u3092\u7d44\u307f\u5408\u308f\u305b\u3001<code>date</code> \u3068\u3044\u3046\u65b0\u3057\u3044\u65e5\u6642\u578b\u306e\u5909\u6570\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002</p> <pre><code>import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# flights\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f\nflights = sns.load_dataset(\"flights\")\nprint(flights.head())\n\n# year\u3068month\u304b\u3089datetime\u578b\u306e\u5909\u6570\u3092\u4f5c\u6210\n# flights\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306emonth\u5217\u306f \"Jan\", \"Feb\", ... \u306e\u5f62\u5f0f\u306e\u305f\u3081\u3001'%Y-%b' \u3092\u6307\u5b9a\nflights['date'] = pd.to_datetime(flights['year'].astype(str) + '-' + flights['month'], format='%Y-%b')\nprint(flights.head())\n</code></pre>"},{"location":"lectures/SIWS/02-visualization/#_6","title":"\u6298\u308c\u7dda\u30b0\u30e9\u30d5\u306e\u4f5c\u6210","text":"<p>\u4f5c\u6210\u3057\u305fdate\u5909\u6570\u3092x\u8ef8\u3001passengers\u5909\u6570\u3092y\u8ef8\u3068\u3057\u3066\u3001seaborn\u306elineplot()\u95a2\u6570\u3092\u4f7f\u3044\u6298\u308c\u7dda\u30b0\u30e9\u30d5\u3092\u63cf\u3044\u3066\u307f\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u306f\u3001\u56f3\u306e\u30b5\u30a4\u30ba\u3092\u8abf\u6574\u3057\u3001\u30bf\u30a4\u30c8\u30eb\u3084\u8ef8\u30e9\u30d9\u30eb\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002</p> <pre><code>plt.figure(figsize=(12,6))\nsns.lineplot(data=flights, x=\"date\", y=\"passengers\")\nplt.title(\"1949\u5e74\uff5e1960\u5e74\u306e\u6708\u3054\u3068\u306e\u4e57\u5ba2\u6570\u306e\u63a8\u79fb\")\nplt.xlabel(\"\u65e5\u4ed8\")\nplt.ylabel(\"\u4e57\u5ba2\u6570\")\nplt.show()\n</code></pre> <p>\u3053\u306e\u30b3\u30fc\u30c9\u3067\u306f\u3001date\uff08\u65e5\u6642\u578b\u306e\u5909\u6570\uff09\u306b\u6cbf\u3063\u3066passengers\uff08\u4e57\u5ba2\u6570\uff09\u306e\u5404\u30c7\u30fc\u30bf\u70b9\u3092\u7dda\u3067\u7d50\u3093\u3067\u3044\u307e\u3059\u3002\u65e5\u6642\u306e\u9806\u5e8f\u304c\u4fdd\u305f\u308c\u308b\u305f\u3081\u3001\u9023\u7d9a\u3057\u305f\u30c7\u30fc\u30bf\u306e\u5909\u5316\u3092\u76f4\u611f\u7684\u306b\u628a\u63e1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#_7","title":"\u30c1\u30a7\u30c3\u30af\u9805\u76ee","text":"<p>(LC1) flights\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306emonth\u5217\u306f\u3069\u306e\u3088\u3046\u306a\u5f62\u5f0f\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304b\uff1f\u307e\u305f\u3001\u306a\u305cyear\u3068month\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u65e5\u6642\u578b\u306e\u5909\u6570\u3092\u4f5c\u6210\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f (LC2) \u6298\u308c\u7dda\u30b0\u30e9\u30d5\u3067\u30c7\u30fc\u30bf\u70b9\u3092\u7dda\u3067\u7d50\u3076\u3053\u3068\u306f\u3001\u3069\u306e\u3088\u3046\u306a\u60c5\u5831\uff08\u4f8b\uff1a\u50be\u5411\u3084\u5909\u5316\u306e\u65b9\u5411\u6027\uff09\u3092\u8996\u899a\u7684\u306b\u4f1d\u3048\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f (LC3) \u4ed6\u306e\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\uff08\u4f8b\uff1a\u3042\u308b\u90fd\u5e02\u306e\u6708\u5225\u5e73\u5747\u6c17\u6e29\u306a\u3069\uff09\u306b\u304a\u3044\u3066\u3001\u540c\u69d8\u306e\u65b9\u6cd5\u3067\u6298\u308c\u7dda\u30b0\u30e9\u30d5\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u306f\u53ef\u80fd\u3067\u3057\u3087\u3046\u304b\uff1f\u305d\u306e\u5834\u5408\u3001\u3069\u306e\u3088\u3046\u306a\u70b9\u306b\u6ce8\u610f\u3059\u3079\u304d\u3067\u3057\u3087\u3046\u304b\uff1f</p>"},{"location":"lectures/SIWS/02-visualization/#_8","title":"\u307e\u3068\u3081","text":"<p>\u6298\u308c\u7dda\u30b0\u30e9\u30d5\u306f\u3001\u6642\u9593\u3084\u9806\u5e8f\u6027\u306e\u3042\u308b\u5909\u6570\u3092x\u8ef8\u306b\u3068\u308b\u3053\u3068\u3067\u3001\u9023\u7d9a\u3057\u305f\u30c7\u30fc\u30bf\u306e\u5909\u5316\u3092\u52b9\u679c\u7684\u306b\u8868\u73fe\u3067\u304d\u307e\u3059\u3002 \u3053\u3053\u3067\u306f\u3001seaborn\u306eflights\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f7f\u7528\u3057\u3001year \u3068 month \u304b\u3089\u4f5c\u6210\u3057\u305f\u65e5\u6642\u578b\u306e\u5909\u6570\u3092\u7528\u3044\u3066\u30011949\u5e74\u304b\u30891960\u5e74\u307e\u3067\u306e\u6708\u3054\u3068\u306e\u4e57\u5ba2\u6570\u306e\u63a8\u79fb\u3092\u7dda\u30b0\u30e9\u30d5\u3067\u53ef\u8996\u5316\u3057\u307e\u3057\u305f\u3002 \u3053\u306e\u624b\u6cd5\u306f\u3001\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306e\u5206\u6790\u3084\u30c8\u30ec\u30f3\u30c9\u306e\u628a\u63e1\u306b\u975e\u5e38\u306b\u6709\u7528\u3067\u3059\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#5ng3-histograms-histograms","title":"5NG#3: Histograms {#histograms}","text":"<p>Let's consider the <code>temp</code> variable in the <code>weather</code> data frame once again, but unlike with the linegraphs in Section \\@ref(linegraphs), let's say we don't care about its relationship with time, but rather we only care about how the values of <code>temp</code> distribute. In other words:</p> <ol> <li>What are the smallest and largest values?</li> <li>What is the \"center\" or \"most typical\" value?</li> <li>How do the values spread out?</li> <li>What are frequent and infrequent values?</li> </ol> <p>One way to visualize this distribution \\index{distribution} of this single variable <code>temp</code> is to plot them on a horizontal line as we do in Figure \\@ref(fig:temp-on-line):</p> <pre><code>ggplot(data = weather, mapping = aes(x = temp, y = factor(\"A\"))) +\n  geom_point() +\n  theme(\n    axis.ticks.y = element_blank(),\n    axis.title.y = element_blank(),\n    axis.text.y = element_blank()\n  )\nhist_title &lt;- \"Histogram of Hourly Temperature Recordings from NYC in 2013\"\n</code></pre> <p>This gives us a general idea of how the values of <code>temp</code> distribute: observe that temperatures vary from around <code>r round(min(weather$temp, na.rm = TRUE), 0)</code>\u00b0F (-11\u00b0C) up to <code>r round(max(weather$temp, na.rm = TRUE), 0)</code>\u00b0F (38\u00b0C).  Furthermore, there appear to be more recorded temperatures between 40\u00b0F and 60\u00b0F than outside this range. However, because of the high degree of overplotting in the points, it's hard to get a sense of exactly how many values are between say 50\u00b0F and 55\u00b0F.</p> <p>What is commonly produced instead of Figure \\@ref(fig:temp-on-line) is known as a \\index{histograms} histogram.  A histogram is a plot that visualizes the distribution of a numerical value as follows:</p> <ol> <li>We first cut up the x-axis into a series of \\index{histograms!bins} bins, where each bin represents a range of values. </li> <li>For each bin, we count the number of observations that fall in the range corresponding to that bin.</li> <li>Then for each bin, we draw a bar whose height marks the corresponding count.</li> </ol> <p>Let's drill-down on an example of a histogram, shown in Figure \\@ref(fig:histogramexample).</p> <pre><code>ggplot(data = weather, mapping = aes(x = temp)) +\n  geom_histogram(binwidth = 10, boundary = 70, color = \"white\")\n</code></pre> <p>Let's focus only on temperatures between 30\u00b0F (-1\u00b0C) and 60\u00b0F (15\u00b0C) for now. Observe that there are three bins of equal width between 30\u00b0F and 60\u00b0F. Thus we have three bins of width 10\u00b0F each: one bin for the 30-40\u00b0F range, another bin for the 40-50\u00b0F range, and another bin for the 50-60\u00b0F range. Since:</p> <ol> <li>The bin for the 30-40\u00b0F range has a height of around 5000. In other words, around 5000 of the hourly temperature recordings are between 30\u00b0F and 40\u00b0F.</li> <li>The bin for the 40-50\u00b0F range has a height of around 4300. In other words, around 4300 of the hourly temperature recordings are between 40\u00b0F and 50\u00b0F.</li> <li>The bin for the 50-60\u00b0F range has a height of around 3500. In other words, around 3500 of the hourly temperature recordings are between 50\u00b0F and 60\u00b0F.</li> </ol> <p>All nine bins spanning 10\u00b0F to 100\u00b0F on the x-axis have this interpretation.</p>"},{"location":"lectures/SIWS/02-visualization/#histograms-via-geom_histogram-geomhistogram","title":"Histograms via <code>geom_histogram</code> {#geomhistogram}","text":"<p>Let's now present the <code>ggplot()</code> code to plot your first histogram! Unlike with scatterplots and linegraphs, there is now only one variable being mapped in <code>aes()</code>: the single numerical variable <code>temp</code>. The y-aesthetic of a histogram, the count of the observations in each bin, gets computed for you automatically. Furthermore, the geometric object layer is now a <code>geom_histogram()</code>. \\index{ggplot2!geom_histogram()} After running the following code, you'll see the histogram in Figure \\@ref(fig:weather-histogram) as well as warning messages. We'll discuss the warning messages first. </p> <pre><code>ggplot(data = weather, mapping = aes(x = temp)) +\n  geom_histogram()\n</code></pre> <p>The first message is telling us that the histogram was constructed using <code>bins = 30</code> for 30 equally spaced bins. This is known in computer programming as a default value; unless you override this default number of bins with a number you specify, R will choose 30 by default. We'll see in the next section how to change the number of bins to another value than the default.</p> <p>The second message is telling us something similar to the warning message we received when we ran the code to create a scatterplot of departure and arrival delays for Alaska Airlines flights in Figure \\@ref(fig:noalpha): that because one row has a missing <code>NA</code> value for <code>temp</code>, it was omitted from the histogram. R is just giving us a friendly heads up that this was the case. </p> <p>Now let's unpack the resulting histogram in Figure \\@ref(fig:weather-histogram). Observe that values less than 25\u00b0F as well as values above 80\u00b0F are rather rare. However, because of the large number of bins, it's hard to get a sense for which range of temperatures is spanned by each bin; everything is one giant amorphous blob. So let's add white vertical borders demarcating the bins by adding a <code>color = \"white\"</code> argument to <code>geom_histogram()</code> and ignore the warning about setting the number of bins to a better value:</p> <pre><code>ggplot(data = weather, mapping = aes(x = temp)) +\n  geom_histogram(color = \"white\")\n</code></pre> <p>We now have an easier time associating ranges of temperatures to each of the bins in Figure \\@ref(fig:weather-histogram-2). We can also vary the color of the bars by setting the \\index{ggplot2!fill} <code>fill</code> argument. For example, you can set the bin colors to be \"blue steel\" by setting <code>fill = \"steelblue\"</code>:</p> <pre><code>ggplot(data = weather, mapping = aes(x = temp)) +\n  geom_histogram(color = \"white\", fill = \"steelblue\")\n</code></pre> <p>If you're curious, run \\index{colors()} <code>colors()</code> to see all <code>r colors() %&gt;% length()</code> possible choice of colors in R!</p>"},{"location":"lectures/SIWS/02-visualization/#adjusting-the-bins-adjustbins","title":"Adjusting the bins {#adjustbins}","text":"<p>Observe in Figure \\@ref(fig:weather-histogram-2) that in the 50-75\u00b0F range there appear to be roughly 8 bins. Thus each bin has width 25 divided by 8, or  3.125\u00b0F, which is not a very easily interpretable range to work with. Let's improve this by adjusting the number of bins in our histogram in one of two ways:</p> <ol> <li>By adjusting the number of bins via the \\index{geom_histogram()!bins} <code>bins</code> argument to <code>geom_histogram()</code>. </li> <li>By adjusting the width of the bins via the \\index{geom_histogram()!binwidth} <code>binwidth</code> argument to <code>geom_histogram()</code>. </li> </ol> <p>Using the first method, we have the power to specify how many bins we would like to cut the x-axis up in. As mentioned in the previous section, the default number of bins is 30. We can override this default, to say 40 bins, as follows:</p> <pre><code>ggplot(data = weather, mapping = aes(x = temp)) +\n  geom_histogram(bins = 40, color = \"white\")\n</code></pre> <p>Using the second method, instead of specifying the number of bins, we specify the width of the bins by using the <code>binwidth</code> argument in the <code>geom_histogram()</code> layer. For example, let's set the width of each bin to be 10\u00b0F.</p> <pre><code>ggplot(data = weather, mapping = aes(x = temp)) +\n  geom_histogram(binwidth = 10, color = \"white\")\n</code></pre> <p>We compare both resulting histograms side-by-side in Figure \\@ref(fig:hist-bins). </p> <pre><code>hist_1 &lt;- ggplot(data = weather, mapping = aes(x = temp)) +\n  geom_histogram(bins = 40, color = \"white\") +\n  labs(title = \"With 40 bins\")\nhist_2 &lt;- ggplot(data = weather, mapping = aes(x = temp)) +\n  geom_histogram(binwidth = 10, color = \"white\") +\n  labs(title = \"With binwidth = 10 degrees F\")\nhist_1 + hist_2\n</code></pre> <pre><code>\\vspace{-0.15in}\n**_Learning check_**\n\\vspace{-0.1in}\n</code></pre> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> What does changing the number of bins from 30 to 40 tell us about the distribution of temperatures?</p> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> Would you classify the distribution of temperatures as symmetric or skewed in one direction or another?</p> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> What would you guess is the \"center\" value in this distribution?  Why did you make that choice?</p> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> Is this data spread out greatly from the center or is it close?  Why?</p> <pre><code>\\vspace{-0.25in}\n\\vspace{-0.25in}\n</code></pre>"},{"location":"lectures/SIWS/02-visualization/#summary","title":"Summary","text":"<p>Histograms, unlike scatterplots and linegraphs, present information on only a single numerical variable. Specifically, they are visualizations of the distribution of the numerical variable in question. </p>"},{"location":"lectures/SIWS/02-visualization/#facets-facets","title":"Facets {#facets}","text":"<p>Before continuing with the next of the 5NG, let's briefly introduce a new concept called faceting.  Faceting is used when we'd like to split a particular visualization by the values of another variable. This will create multiple copies of the same type of plot with matching x and y axes, but whose content will differ. </p> <p>For example, suppose we were interested in looking at how the histogram of hourly temperature recordings at the three NYC airports we saw in Figure \\@ref(fig:histogramexample) differed in each month. We could \"split\" this histogram by the 12 possible months in a given year. In other words, we would plot histograms of <code>temp</code> for each <code>month</code> separately. We do this by adding <code>facet_wrap(~ month)</code> layer. Note the <code>~</code> is a \"tilde\" and can generally be found on the key next to the \"1\" key on US keyboards. The tilde is required and you'll receive the error <code>Error in as.quoted(facets) : object 'month' not found</code> if you don't include it here. </p> <pre><code>ggplot(data = weather, mapping = aes(x = temp)) +\n  geom_histogram(binwidth = 5, color = \"white\") +\n  facet_wrap(~ month)\n</code></pre> <pre><code>month_facet &lt;- ggplot(data = weather, mapping = aes(x = temp)) +\n  geom_histogram(binwidth = 5, color = \"white\") +\n  facet_wrap(~month)\n\nif (is_latex_output()) {\n  month_facet +\n    theme(\n      strip.text = element_text(colour = \"black\"),\n      strip.background = element_rect(fill = \"grey93\")\n    )\n} else {\n  month_facet\n}\n</code></pre> <p>We can also specify the number of rows and columns in the grid by using the <code>nrow</code> and <code>ncol</code> arguments inside of \\index{ggplot2!facet_wrap()} <code>facet_wrap()</code>. For example, say we would like our faceted histogram to have 4 rows instead of 3. We simply add an <code>nrow = 4</code> argument to <code>facet_wrap(~ month)</code>.</p> <pre><code>ggplot(data = weather, mapping = aes(x = temp)) +\n  geom_histogram(binwidth = 5, color = \"white\") +\n  facet_wrap(~ month, nrow = 4)\n</code></pre> <pre><code>month_facet_4 &lt;- ggplot(data = weather, mapping = aes(x = temp)) +\n  geom_histogram(binwidth = 5, color = \"white\") +\n  facet_wrap(~month, nrow = 4)\n\nif (is_latex_output()) {\n  month_facet_4 +\n    theme(\n      strip.text = element_text(colour = \"black\"),\n      strip.background = element_rect(fill = \"grey93\")\n    )\n} else {\n  month_facet_4\n}\n</code></pre> <p>Observe in both Figures \\@ref(fig:facethistogram) and \\@ref(fig:facethistogram2) that as we might expect in the Northern Hemisphere, temperatures tend to be higher in the summer months, while they tend to be lower in the winter. </p> <pre><code>\\vspace{-0.15in}\n**_Learning check_**\n\\vspace{-0.1in}\n</code></pre> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> What other things do you notice about this faceted plot?  How does a faceted plot help us see relationships between two variables?</p> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> What do the numbers 1-12 correspond to in the plot?  What about 25, 50, 75, 100?</p> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> For which types of datasets would faceted plots not work well in comparing relationships between variables? Give an example describing the nature of these variables and other important characteristics.</p> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> Does the <code>temp</code> variable in the <code>weather</code> dataset have a lot of variability?  Why do you say that?</p> <pre><code>\\vspace{-0.25in}\n\\vspace{-0.25in}\n</code></pre>"},{"location":"lectures/SIWS/02-visualization/#5ng4-boxplots-boxplots","title":"5NG#4: Boxplots {#boxplots}","text":"<pre><code>n_nov &lt;- weather %&gt;%\n  filter(month == 11) %&gt;%\n  nrow()\nmin_nov &lt;- weather %&gt;%\n  filter(month == 11) %&gt;%\n  pull(temp) %&gt;%\n  min(na.rm = TRUE) %&gt;%\n  round(0)\nmax_nov &lt;- weather %&gt;%\n  filter(month == 11) %&gt;%\n  pull(temp) %&gt;%\n  max(na.rm = TRUE) %&gt;%\n  round(0)\nquartiles &lt;- weather %&gt;%\n  filter(month == 11) %&gt;%\n  pull(temp) %&gt;%\n  quantile(prob = c(0.25, 0.5, 0.75)) %&gt;%\n  round(0)\nfive_number_summary &lt;- tibble(\n  temp = c(min_nov, quartiles, max_nov)\n)\n</code></pre> <p>While faceted histograms are one type of visualization used to compare the distribution of a numerical variable split by the values of another variable, another type of visualization that achieves this same goal is a side-by-side boxplot. A boxplot \\index{boxplots} is constructed from the information provided in the five-number summary of a numerical variable (see Appendix \\@ref(appendix-stat-terms)).  </p> <p>To keep things simple for now, let's only consider the <code>r n_nov</code> hourly temperature recordings for the month of November, each represented as a jittered point in Figure \\@ref(fig:nov1). </p> <pre><code>base_plot &lt;- weather %&gt;%\n  filter(month %in% c(11)) %&gt;%\n  ggplot(mapping = aes(x = factor(month), y = temp)) +\n  labs(x = \"\")\nbase_plot +\n  geom_jitter(width = 0.075, height = 0.5, alpha = 0.1)\n</code></pre> <p>These <code>r n_nov</code> observations have the following five-number summary:</p> <ol> <li>Minimum: <code>r min_nov</code>\u00b0F</li> <li>First quartile (25th percentile): <code>r quartiles[1]</code>\u00b0F</li> <li>Median (second quartile, 50th percentile): <code>r quartiles[2]</code>\u00b0F</li> <li>Third quartile (75th percentile): <code>r quartiles[3]</code>\u00b0F</li> <li>Maximum: <code>r max_nov</code>\u00b0F</li> </ol> <p>In the leftmost plot of Figure \\@ref(fig:nov2), let's mark these 5 values with dashed horizontal lines on top of the <code>r n_nov</code> points. In the middle plot of Figure \\@ref(fig:nov2) let's add the boxplot. In the rightmost plot of Figure \\@ref(fig:nov2), let's remove the points and the dashed horizontal lines for clarity's sake.</p> <pre><code>boxplot_1 &lt;- base_plot +\n  geom_hline(data = five_number_summary, aes(yintercept = temp), linetype = \"dashed\") +\n  geom_jitter(width = 0.075, height = 0.5, alpha = 0.1)\nboxplot_2 &lt;- base_plot +\n  geom_boxplot() +\n  geom_hline(data = five_number_summary, aes(yintercept = temp), linetype = \"dashed\") +\n  geom_jitter(width = 0.075, height = 0.5, alpha = 0.1)\nboxplot_3 &lt;- base_plot +\n  geom_boxplot()\nboxplot_1 + boxplot_2 + boxplot_3\n</code></pre> <p>What the boxplot does is visually summarize the <code>r weather %&gt;% filter(month == 11) %&gt;% nrow()</code> points by cutting the <code>r n_nov</code> temperature recordings into quartiles at the dashed lines, where each quartile contains roughly <code>r n_nov</code> \\(\\div\\) 4 \\(\\approx\\) <code>r round(n_nov / 4)</code> observations. Thus</p> <pre><code># This redundant code is used for dynamic non-static in-line text output purposes\nquartile_1 &lt;- quartiles[1] %&gt;% round(3)\nquartile_2 &lt;- quartiles[2] %&gt;% round(3)\nquartile_3 &lt;- quartiles[3] %&gt;% round(3)\n</code></pre> <ol> <li>25% of points fall below the bottom edge of the box, which is the first quartile of <code>r quartile_1</code>\u00b0F. In other words, 25% of observations were below <code>r quartile_1</code>\u00b0F.</li> <li>25% of points fall between the bottom edge of the box and the solid middle line, which is the median of <code>r quartile_2</code>\u00b0F. Thus, 25% of observations were between <code>r quartile_1</code>\u00b0F and <code>r quartile_2</code>\u00b0F and 50% of observations were below <code>r quartile_2</code>\u00b0F.</li> <li>25% of points fall between the solid middle line and the top edge of the box, which is the third quartile of <code>r quartile_3</code>\u00b0F. It follows that 25% of observations were between <code>r quartile_2</code>\u00b0F and <code>r quartile_3</code>\u00b0F and 75% of observations were below <code>r quartile_3</code>\u00b0F.</li> <li>25% of points fall above the top edge of the box. In other words, 25% of observations were above <code>r quartile_3</code>\u00b0F.</li> <li>The middle 50% of points lie within the interquartile range (IQR) \\index{interquartile range (IQR)} between the first and third quartile. Thus, the IQR for this example is <code>r quartile_3</code> - <code>r quartile_1</code> = <code>r (quartiles[3] - quartiles[1]) %&gt;% round(3)</code>\u00b0F. The interquartile range is a measure of a numerical variable's spread.</li> </ol> <p>Furthermore, in the rightmost plot of Figure \\@ref(fig:nov2), we see the whiskers \\index{boxplots!whiskers} of the boxplot. The whiskers stick out from either end of the box all the way to the minimum and maximum observed temperatures of <code>r min_nov</code>\u00b0F and <code>r max_nov</code>\u00b0F, respectively. However, the whiskers don't always extend to the smallest and largest observed values as they do here. They in fact extend no more than 1.5 \\(\\times\\) the interquartile range from either end of the box. In this case of the November temperatures, no more than 1.5 \\(\\times\\) <code>r (quartiles[3] - quartiles[1]) %&gt;% round(3)</code>\u00b0F = <code>r (1.5*(quartiles[3] - quartiles[1])) %&gt;% round(3)</code>\u00b0F from either end of the box. Any observed values outside this range get marked with points called outliers, which we'll see in the next section.</p>"},{"location":"lectures/SIWS/02-visualization/#boxplots-via-geom_boxplot-geomboxplot","title":"Boxplots via <code>geom_boxplot</code> {#geomboxplot}","text":"<p>Let's now create a side-by-side boxplot \\index{boxplots!side-by-side} of hourly temperatures split by the 12 months as we did previously with the faceted histograms. We do this by mapping the <code>month</code> variable to the x-position aesthetic, the <code>temp</code> variable to the y-position aesthetic, and by adding a <code>geom_boxplot()</code> layer:</p> <pre><code>ggplot(data = weather, mapping = aes(x = month, y = temp)) +\n  geom_boxplot()\n</code></pre> <pre><code>Warning messages:\n1: Continuous x aesthetic -- did you forget aes(group=...)? \n2: Removed 1 rows containing non-finite values (stat_boxplot). \n</code></pre> <p>Observe in Figure \\@ref(fig:badbox) that this plot does not provide information about temperature separated by month. The first warning message clues us in as to why. It is telling us that we have a \"continuous\", or numerical variable, on the x-position aesthetic. Boxplots, however, require a categorical variable to be mapped to the x-position aesthetic. The second warning message is identical to the warning message when plotting a histogram of hourly temperatures: that one of the values was recorded as <code>NA</code> missing. </p> <p>We can convert the numerical variable <code>month</code> into a <code>factor</code> categorical variable by using the <code>factor()</code> \\index{factors} function. So after applying <code>factor(month)</code>, month goes from having numerical values just the 1, 2, ..., and 12 to having an associated ordering. With this ordering, <code>ggplot()</code> now knows how to work with this variable to produce the needed plot. </p> <pre><code>ggplot(data = weather, mapping = aes(x = factor(month), y = temp)) +\n  geom_boxplot()\n</code></pre> <p>The resulting Figure \\@ref(fig:monthtempbox) shows 12 separate \"box and whiskers\" plots similar to the rightmost plot of Figure \\@ref(fig:nov2) of only November temperatures. Thus the different boxplots are shown \"side-by-side.\"</p> <ul> <li>The \"box\" portions of the visualization represent the 1st quartile, the median (the 2nd quartile), and the 3rd quartile.</li> <li>The height of each box (the value of the 3rd quartile minus the value of the 1st quartile) is the interquartile range (IQR). It is a measure of the spread of the middle 50% of values, with longer boxes indicating more variability.</li> <li>The \"whisker\" portions of these plots extend out from the bottoms and tops of the boxes and represent points less than the 25th percentile and greater than the 75th percentiles, respectively. They're set to extend out no more than \\(1.5 \\times IQR\\) units away from either end of the boxes. We say \"no more than\" because the ends of the whiskers have to correspond to observed temperatures.  The length of these whiskers show how the data outside the middle 50% of values vary, with longer whiskers indicating more variability.</li> <li>The dots representing values falling outside the whiskers are called \\index{outliers} outliers. These can be thought of as anomalous (\"out-of-the-ordinary\") values.</li> </ul> <p>It is important to keep in mind that the definition of an outlier is somewhat arbitrary and not absolute. In this case, they are defined by the length of the whiskers, which are no more than \\(1.5 \\times IQR\\) units long for each boxplot. Looking at this side-by-side plot we can see, as expected, that summer months (6 through 8) have higher median temperatures as evidenced by the higher solid lines in the middle of the boxes. We can easily compare temperatures across months by drawing imaginary horizontal lines across the plot. Furthermore, the heights of the 12 boxes as quantified by the interquartile ranges are informative too; they tell us about variability, or spread, of temperatures recorded in a given month. </p> <pre><code>\\vspace{-0.15in}\n**_Learning check_**\n\\vspace{-0.1in}\n</code></pre> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> What does the dot at the bottom of the plot for May correspond to?  Explain what might have occurred in May to produce this point.</p> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> Which months have the highest variability in temperature?  What reasons can you give for this?</p> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> We looked at the distribution of the numerical variable <code>temp</code> split by the numerical variable <code>month</code> that we converted using the <code>factor()</code> function in order to make a side-by-side boxplot. Why would a boxplot of <code>temp</code> split by the numerical variable <code>pressure</code> similarly converted to a categorical variable using the <code>factor()</code> not be informative?</p> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> Boxplots provide a simple way to identify outliers.  Why may outliers be easier to identify when looking at a boxplot instead of a faceted histogram?</p> <pre><code>\\vspace{-0.25in}\n\\vspace{-0.25in}\n</code></pre>"},{"location":"lectures/SIWS/02-visualization/#summary_1","title":"Summary","text":"<p>Side-by-side boxplots provide us with a way to compare the distribution of a numerical variable across multiple values of another variable. One can see where the median falls across the different groups by comparing the solid lines in the center of the boxes. </p> <p>To study the spread of a numerical variable within one of the boxes, look at both the length of the box and also how far the whiskers extend from either end of the box. Outliers are even more easily identified when looking at a boxplot than when looking at a histogram as they are marked with distinct points.</p>"},{"location":"lectures/SIWS/02-visualization/#5ng5-barplots-geombar","title":"5NG#5: Barplots {#geombar}","text":"<p>Both histograms and boxplots are tools to visualize the distribution of numerical variables. Another commonly desired task is to visualize the distribution of a categorical variable. This is a simpler task, as we are simply counting different categories within a categorical variable, also known as the \\index{levels} levels of the categorical variable. Often the best way to visualize these different counts, also known as \\index{frequencies} frequencies, is with barplots (also called barcharts).</p> <p>One complication, however, is how your data is represented. Is the categorical variable of interest \"pre-counted\" or not? For example, run the following code that manually creates two data frames representing a collection of fruit: 3 apples and 2 oranges.</p> <pre><code>fruits &lt;- tibble(\n  fruit = c(\"apple\", \"apple\", \"orange\", \"apple\", \"orange\")\n)\nfruits_counted &lt;- tibble(\n  fruit = c(\"apple\", \"orange\"),\n  number = c(3, 2)\n)\n</code></pre> <p>We see both the <code>fruits</code> and <code>fruits_counted</code> data frames represent the same collection of fruit. Whereas <code>fruits</code> just lists the fruit individually...</p> <pre><code>fruits\n</code></pre> <p>... <code>fruits_counted</code> has a variable <code>count</code> which represent the \"pre-counted\" values of each fruit. </p> <pre><code>fruits_counted\n</code></pre> <p>Depending on how your categorical data is represented, you'll need to add a different <code>geom</code>etric layer type to your <code>ggplot()</code> to create a barplot, as we now explore. </p>"},{"location":"lectures/SIWS/02-visualization/#barplots-via-geom_bar-or-geom_col","title":"Barplots via <code>geom_bar</code> or <code>geom_col</code>","text":"<p>Let's generate barplots using these two different representations of the same basket of fruit: 3 apples and 2 oranges. Using the <code>fruits</code> data frame where all 5 fruits are listed individually in 5 rows, we map the <code>fruit</code> variable to the x-position aesthetic and add a \\index{ggplot2!geom_bar()} <code>geom_bar()</code> layer:</p> <pre><code>ggplot(data = fruits, mapping = aes(x = fruit)) +\n  geom_bar()\n</code></pre> <p>However, using the <code>fruits_counted</code> data frame where the fruits have been \"pre-counted\", we once again map the <code>fruit</code> variable to the x-position aesthetic, but here we also map the <code>count</code> variable to the y-position aesthetic, and add a \\index{ggplot2!geom_col()} <code>geom_col()</code> layer instead.</p> <pre><code>ggplot(data = fruits_counted, mapping = aes(x = fruit, y = number)) +\n  geom_col()\n</code></pre> <p>Compare the barplots in Figures \\@ref(fig:geombar) and \\@ref(fig:geomcol). They are identical because they reflect counts of the same five fruits. However, depending on how our categorical data is represented, either \"pre-counted\" or not, we must add a different <code>geom</code> layer. When the categorical variable whose distribution you want to visualize</p> <ul> <li>Is not pre-counted in your data frame, we use <code>geom_bar()</code>.</li> <li>Is pre-counted in your data frame, we use <code>geom_col()</code> with the y-position aesthetic mapped to the variable that has the counts.</li> </ul> <p>Let's now go back to the <code>flights</code> data frame in the <code>nycflights13</code> package and visualize the distribution of the categorical variable <code>carrier</code>. In other words, let's visualize the number of domestic flights out of New York City each airline company flew in 2013. Recall from Subsection \\@ref(exploredataframes) when you first explored the <code>flights</code> data frame, you saw that each row corresponds to a flight. In other words, the <code>flights</code> data frame is more like the <code>fruits</code> data frame than the <code>fruits_counted</code> data frame because the flights have not been pre-counted by <code>carrier</code>. Thus we should use <code>geom_bar()</code> instead of <code>geom_col()</code> to create a barplot. Much like a <code>geom_histogram()</code>, there is only one variable in the <code>aes()</code> aesthetic mapping: the variable <code>carrier</code> gets mapped to the <code>x</code>-position. As a difference though, histograms have bars that touch whereas bar graphs have white space between the bars going from left to right.</p> <p>(ref:geombar) Number of flights departing NYC in 2013 by airline using geom_bar().</p> <pre><code>ggplot(data = flights, mapping = aes(x = carrier)) +\n  geom_bar()\n</code></pre> <p>Observe in Figure \\@ref(fig:flightsbar) that United Airlines (UA), JetBlue Airways (B6), and ExpressJet Airlines (EV) had the most flights depart NYC in 2013. If you don't know which airlines correspond to which carrier codes, then run <code>View(airlines)</code> to see a directory of airlines. For example, B6 is JetBlue Airways. Alternatively, say you had a data frame where the number of flights for each <code>carrier</code> was pre-counted as in Table \\@ref(tab:flights-counted).</p> <pre><code>flights_counted &lt;- flights %&gt;%\n  group_by(carrier) %&gt;%\n  summarize(number = n())\nkbl(flights_counted,\n  digits = 3,\n  caption = \"Number of flights pre-counted for each carrier\",\n  booktabs = TRUE,\n  longtable = TRUE,\n  linesep = \"\"\n) %&gt;%\n  kable_styling(\n    font_size = ifelse(is_latex_output(), 10, 16),\n    latex_options = c(\"hold_position\")\n  )\n</code></pre> <p>In order to create a barplot visualizing the distribution of the categorical variable <code>carrier</code> in this case, we would now use <code>geom_col()</code> instead of <code>geom_bar()</code>, with an additional <code>y = number</code> in the aesthetic mapping on top of the <code>x = carrier</code>. The resulting barplot would be identical to Figure \\@ref(fig:flightsbar).</p> <pre><code>\\vspace{-0.15in}\n**_Learning check_**\n\\vspace{-0.1in}\n</code></pre> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> Why are histograms inappropriate for categorical variables?</p> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> What is the difference between histograms and barplots?</p> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> How many Envoy Air flights departed NYC in 2013?</p> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> What was the 7th highest airline for departed flights from NYC in 2013? How could we better present the table to get this answer quickly?</p> <pre><code>\\vspace{-0.25in}\n\\vspace{-0.25in}\n</code></pre>"},{"location":"lectures/SIWS/02-visualization/#must-avoid-pie-charts","title":"Must avoid pie charts!","text":"<p>One of the most common plots used to visualize the distribution of categorical data is the \\index{pie charts} pie chart. While they may seem harmless enough, pie charts actually present a problem in that humans are unable to judge angles well. As Naomi Robbins describes in her book, Creating More Effective Graphs [@robbins2013], we overestimate angles greater than 90 degrees and we underestimate angles less than 90 degrees. In other words, it is difficult for us to determine the relative size of one piece of the pie compared to another.  </p> <p>Let's examine the same data used in our previous barplot of the number of flights departing NYC by airline in Figure \\@ref(fig:flightsbar), but this time we will use a pie chart in Figure \\@ref(fig:carrierpie). Try to answer the following questions:</p> <ul> <li>How much larger is the portion of the pie for ExpressJet Airlines (<code>EV</code>)  compared to US Airways (<code>US</code>)? </li> <li>What is the third largest carrier in terms of departing flights?</li> <li>How many carriers have fewer flights than United Airlines (<code>UA</code>)?</li> </ul> <pre><code>if (is_html_output()) {\n  ggplot(flights, mapping = aes(x = factor(1), fill = carrier)) +\n    geom_bar(width = 1) +\n    coord_polar(theta = \"y\") +\n    theme(\n      axis.title.x = element_blank(),\n      axis.title.y = element_blank(),\n      axis.ticks = element_blank(),\n      axis.text.y = element_blank(),\n      axis.text.x = element_blank(),\n      panel.grid.major = element_blank(),\n      panel.grid.minor = element_blank()\n    ) +\n    guides(fill = guide_legend(keywidth = 0.8, keyheight = 0.8))\n} else {\n  ggplot(flights, mapping = aes(x = factor(1), fill = carrier)) +\n    geom_bar(width = 1) +\n    coord_polar(theta = \"y\") +\n    theme_light() +\n    theme(\n      axis.title.x = element_blank(),\n      axis.title.y = element_blank(),\n      axis.ticks = element_blank(),\n      axis.text.y = element_blank(),\n      axis.text.x = element_blank(),\n      panel.grid.major = element_blank(),\n      panel.grid.minor = element_blank()\n    ) +\n    guides(fill = guide_legend(keywidth = 0.8, keyheight = 0.8)) +\n    scale_fill_grey()\n}\n</code></pre> <p>While it is quite difficult to answer these questions when looking at the pie chart in Figure \\@ref(fig:carrierpie), we can much more easily answer these questions using the barchart in Figure \\@ref(fig:flightsbar). This is true since barplots present the information in a way such that comparisons between categories can be made with single horizontal lines, whereas pie charts present the information in a way such that comparisons must be made by \\index{pie charts!problems with} comparing angles. </p> <pre><code>\\vspace{-0.15in}\n**_Learning check_**\n\\vspace{-0.1in}\n</code></pre> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> Why should pie charts be avoided and replaced by barplots?</p> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> Why do you think people continue to use pie charts?</p> <pre><code>\\vspace{-0.25in}\n\\vspace{-0.25in}\n</code></pre>"},{"location":"lectures/SIWS/02-visualization/#two-categorical-variables-two-categ-barplot","title":"Two categorical variables {#two-categ-barplot}","text":"<p>Barplots are a very common way to visualize the frequency of different categories, or levels, of a single categorical variable. Another use of barplots is to visualize the joint distribution of two categorical variables at the same time.  Let's examine the joint distribution of outgoing domestic flights from NYC by <code>carrier</code> as well as <code>origin</code>. In other words, the number of flights for each <code>carrier</code> and <code>origin</code> combination. </p> <p>For example, the number of WestJet flights from <code>JFK</code>, the number of WestJet flights from <code>LGA</code>, the number of WestJet flights from <code>EWR</code>, the number of American Airlines flights from <code>JFK</code>, and so on. Recall the <code>ggplot()</code> code that created the barplot of <code>carrier</code> frequency in Figure \\@ref(fig:flightsbar):</p> <pre><code>ggplot(data = flights, mapping = aes(x = carrier)) + \n  geom_bar()\n</code></pre> <p>We can now map the additional variable <code>origin</code> by adding a <code>fill = origin</code> inside the <code>aes()</code> aesthetic mapping.</p> <pre><code>ggplot(data = flights, mapping = aes(x = carrier, fill = origin)) +\n  geom_bar()\n</code></pre> <pre><code>if (is_html_output()) {\n  ggplot(data = flights, mapping = aes(x = carrier, fill = origin)) +\n    geom_bar()\n} else {\n  ggplot(data = flights, mapping = aes(x = carrier, fill = origin)) +\n    geom_bar() +\n    scale_fill_grey()\n}\n</code></pre> <p>Figure \\@ref(fig:flights-stacked-bar) is an example of a \\index{barplot!stacked} stacked barplot.  While simple to make, in certain aspects it is not ideal. For example, it is difficult to compare the heights of the different colors between the bars, corresponding to comparing the number of flights from each <code>origin</code> airport between the carriers.</p> <p>Before we continue, let's address some common points of confusion among new R users. First, the <code>fill</code> aesthetic corresponds to the color used to fill the bars, while the <code>color</code> aesthetic corresponds to the color of the outline of the bars. This is identical to how we added color to our histogram in Subsection \\@ref(geomhistogram): we set the outline of the bars to white by setting <code>color = \"white\"</code> and the colors of the bars to blue steel by setting <code>fill = \"steelblue\"</code>. Observe in Figure \\@ref(fig:flights-stacked-bar-color) that mapping <code>origin</code> to <code>color</code> and not <code>fill</code> yields grey bars with different colored outlines.</p> <pre><code>ggplot(data = flights, mapping = aes(x = carrier, color = origin)) +\n  geom_bar()\n</code></pre> <pre><code>if (is_html_output()) {\n  ggplot(data = flights, mapping = aes(x = carrier, color = origin)) +\n    geom_bar()\n} else {\n  ggplot(data = flights, mapping = aes(x = carrier, color = origin)) +\n    geom_bar() +\n    scale_color_grey()\n}\n</code></pre> <p>Second, note that <code>fill</code> is another aesthetic mapping much like <code>x</code>-position; thus we were careful to include it within the parentheses of the <code>aes()</code> mapping. The following code, where the <code>fill</code> aesthetic is specified outside the <code>aes()</code> mapping will yield an error. This is a fairly common error that new <code>ggplot</code> users make:</p> <pre><code>ggplot(data = flights, mapping = aes(x = carrier), fill = origin) +\n  geom_bar()\n</code></pre> <p>An alternative to stacked barplots are \\index{barplot!side-by-side} side-by-side barplots, also known as dodged barplots, as seen in Figure \\@ref(fig:flights-dodged-bar-color). The code to create a side-by-side barplot is identical to the code to create a stacked barplot, but with a \\index{ggplot2!position} <code>position = \"dodge\"</code> argument added to <code>geom_bar()</code>. In other words, we are overriding the default barplot type, which is a stacked barplot, and specifying it to be a side-by-side barplot instead.</p> <pre><code>ggplot(data = flights, mapping = aes(x = carrier, fill = origin)) +\n  geom_bar(position = \"dodge\")\n</code></pre> <pre><code>if (is_html_output()) {\n  ggplot(data = flights, mapping = aes(x = carrier, fill = origin)) +\n    geom_bar(position = \"dodge\")\n} else {\n  ggplot(data = flights, mapping = aes(x = carrier, fill = origin)) +\n    geom_bar(position = \"dodge\") +\n    scale_fill_grey()\n}\n</code></pre> <p>Note the width of the bars for <code>AS</code>, <code>F9</code>, <code>FL</code>, <code>HA</code> and <code>YV</code> is different than the others. We can make one tweak to the <code>position</code> argument to get them to be the same size in terms of width as the other bars by using the more robust <code>position_dodge()</code> function.</p> <pre><code>ggplot(data = flights, mapping = aes(x = carrier, fill = origin)) +\n  geom_bar(position = position_dodge(preserve = \"single\"))\n</code></pre> <pre><code>if (is_html_output()) {\n  ggplot(data = flights, mapping = aes(x = carrier, fill = origin)) +\n    geom_bar(position = position_dodge(preserve = \"single\"))\n} else {\n  ggplot(data = flights, mapping = aes(x = carrier, fill = origin)) +\n    geom_bar(position = position_dodge(preserve = \"single\")) +\n    scale_fill_grey()\n}\n</code></pre> <p>Lastly, another type of barplot is a \\index{barplot!faceted} faceted barplot. Recall in Section \\@ref(facets) we visualized the distribution of hourly temperatures at the 3 NYC airports split by month using facets. We apply the same principle to our barplot visualizing the frequency of <code>carrier</code> split by <code>origin</code>: instead of mapping <code>origin</code> to <code>fill</code> we include it as the variable to create small multiples of the plot across the levels of <code>origin</code>.</p> <pre><code>ggplot(data = flights, mapping = aes(x = carrier)) +\n  geom_bar() +\n  facet_wrap(~ origin, ncol = 1)\n</code></pre> <pre><code>month_facet_ncol &lt;- ggplot(data = flights, mapping = aes(x = carrier)) +\n  geom_bar() +\n  facet_wrap(~origin, ncol = 1)\n\nif (is_latex_output()) {\n  month_facet_ncol +\n    theme(\n      strip.text = element_text(colour = \"black\"),\n      strip.background = element_rect(fill = \"grey93\")\n    )\n} else {\n  month_facet_ncol\n}\n</code></pre> <pre><code>\\vspace{-0.15in}\n**_Learning check_**\n\\vspace{-0.1in}\n</code></pre> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> What kinds of questions are not easily answered by looking at Figure \\@ref(fig:flights-stacked-bar)?</p> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> What can you say, if anything, about the relationship between airline and airport in NYC in 2013 in regards to the number of departing flights?</p> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> Why might the side-by-side barplot be preferable to a stacked barplot in this case?</p> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> What are the disadvantages of using a dodged barplot, in general?</p> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> Why is the faceted barplot preferred to the side-by-side and stacked barplots in this case?</p> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> What information about the different carriers at different airports is more easily seen in the faceted barplot?</p> <pre><code>\\vspace{-0.25in}\n\\vspace{-0.25in}\n</code></pre>"},{"location":"lectures/SIWS/02-visualization/#summary_2","title":"Summary","text":"<p>Barplots are a common way of displaying the distribution of a categorical variable, or in other words the frequency with which the different categories (also called levels) occur.  They are easy to understand and make it easy to make comparisons across levels.  Furthermore, when trying to visualize the relationship of two categorical variables, you have many options: stacked barplots, side-by-side barplots, and faceted barplots. Depending on what aspect of the relationship you are trying to emphasize, you will need to make a choice between these three types of barplots and own that choice.</p>"},{"location":"lectures/SIWS/02-visualization/#conclusion-data-vis-conclusion","title":"Conclusion {#data-vis-conclusion}","text":""},{"location":"lectures/SIWS/02-visualization/#summary-table","title":"Summary table","text":"<p>Let's recap all five of the five named graphs (5NG) \\index{five named graphs} in Table \\@ref(tab:viz-summary-table) summarizing their differences. Using these 5NG, you'll be able to visualize the distributions and relationships of variables contained in a wide array of datasets. This will be even more the case as we start to map more variables to more of each <code>geom</code>etric object's <code>aes</code>thetic attribute options, further unlocking the awesome power of the <code>ggplot2</code> package.</p> <pre><code># The following Google Doc is published to CSV and loaded using read_csv():\n# https://docs.google.com/spreadsheets/d/1vzqlFiT6qm5wzy_L_0nL7EWAd6jiUZmLSCFhDhztDSg/edit#gid=0\n\nif (!file.exists(\"rds/summary_table_ch2.rds\")) {\n  summary_table_ch3 &lt;-\n    \"https://docs.google.com/spreadsheets/d/e/2PACX-1vRGaUW6EMIGPhg2V7CahoSdVi_JCcESFRYV5tov6bjcwOcn7DZDzfpZgrvjfFG6PV57gcJYIrwl_Q2c/pub?gid=0&amp;single=true&amp;output=csv\" %&gt;%\n    read_csv(na = \"\")\n  summary_table_ch3$Notes[2] &lt;- \"Used when there is a sequential order to x-variable, e.g., time\"\n  write_rds(summary_table_ch3, \"rds/summary_table_ch2.rds\")\n} else {\n  summary_table_ch2 &lt;- read_rds(\"rds/summary_table_ch2.rds\") %&gt;%\n    rename(` ` = `X1`)\n}\n\nif (is_latex_output()) {\n  summary_table_ch2 %&gt;%\n    # Weird tick marks show up in PDF:\n    mutate(`Geometric object` = str_replace_all(`Geometric object`, \"`\", \"\")) %&gt;%\n    kbl(\n      caption = \"Summary of Five Named Graphs\",\n      booktabs = TRUE,\n      format = \"latex\",\n      linesep = \"\"\n    ) %&gt;%\n    kable_styling(font_size = 10) %&gt;%\n    column_spec(3, width = \"1.1in\") %&gt;%\n    column_spec(4, width = \"1.2in\") %&gt;%\n    column_spec(5, width = \"1.6in\")\n} else {\n  summary_table_ch2 %&gt;%\n    kbl(\n      caption = \"Summary of Five Named Graphs\",\n      booktabs = TRUE,\n      format = \"html\"\n    )\n}\n</code></pre>"},{"location":"lectures/SIWS/02-visualization/#function-argument-specification","title":"Function argument specification","text":"<p>Let's go over some important points about specifying the arguments (i.e., inputs) to functions. Run the following two segments of code:</p> <pre><code># Segment 1:\nggplot(data = flights, mapping = aes(x = carrier)) +\n  geom_bar()\n\n# Segment 2:\nggplot(flights, aes(x = carrier)) +\n  geom_bar()\n</code></pre> <p>You'll notice that both code segments create the same barplot, even though in the second segment we omitted the <code>data =</code> and <code>mapping =</code> code argument names. This is because the <code>ggplot()</code> function by default assumes that the <code>data</code> argument comes first and the <code>mapping</code> argument comes second. \\index{functions!argument order} As long as you specify the data frame in question first and the <code>aes()</code> mapping second, you can omit the explicit statement of the argument names <code>data =</code> and <code>mapping =</code>. </p> <p>Going forward for the rest of this book, all <code>ggplot()</code> code will be like the second segment: with the <code>data =</code> and <code>mapping =</code> explicit naming of the argument omitted with the default ordering of arguments respected. We'll do this for brevity's sake; it's common to see this style when reviewing other R users' code.</p>"},{"location":"lectures/SIWS/02-visualization/#additional-resources","title":"Additional resources","text":"<pre><code>if (is_latex_output()) {\n  cat(\"Solutions to all *Learning checks* can be found online in [Appendix D](https://moderndive.com/D-appendixD.html).\")\n}\n</code></pre> <pre><code>generate_r_file_link(\"02-visualization.R\")\n</code></pre> <p>If you want to further unlock the power of the <code>ggplot2</code> package for data visualization, we suggest that you check out RStudio's \"Data Visualization with ggplot2\" cheatsheet. This cheatsheet summarizes much more than what we've discussed in this chapter. In particular, it presents many more than the 5 <code>geom</code>etric objects we covered in this chapter while providing quick and easy to read visual descriptions. For all the <code>geom</code>etric objects, it also lists all the possible aesthetic attributes one can tweak. In the current version of RStudio in mid 2024, you can access this cheatsheet by going to the RStudio Menu Bar -&gt; Help -&gt; Cheatsheets -&gt; \"Data Visualization with ggplot2.\" <code>r if(is_html_output()) \"You can see a preview in the figure below.\"</code> Alternatively, you can preview the cheat sheet by going to the ggplot2 Github page with this link.</p> <pre><code>if (is_html_output()) {\n  include_graphics(\"images/cheatsheets/ggplot_cheatsheet-1.png\")\n}\n</code></pre>"},{"location":"lectures/SIWS/02-visualization/#whats-to-come-whats-to-come-3","title":"What's to come {#whats-to-come-3}","text":"<pre><code># This redundant code is used for dynamic non-static in-line text output purposes\nflights_rows &lt;- flights %&gt;%\n  nrow() %&gt;%\n  comma()\nalaska_flights_rows &lt;- flights %&gt;%\n  filter(carrier == \"AS\") %&gt;%\n  nrow() %&gt;%\n  comma()\n</code></pre> <p>Recall in Figure \\@ref(fig:noalpha) in Section \\@ref(scatterplots) we visualized the relationship between departure delay and arrival delay for Alaska Airlines flights only, rather than all flights. This data is saved in the <code>alaska_flights</code> data frame from the <code>moderndive</code> package.</p> <p>In reality, the <code>alaska_flights</code> data frame is merely a subset of the <code>flights</code> data frame from the <code>nycflights13</code> package consisting of all flights that left NYC in 2013. We created <code>alaska_flights</code> using the following code that uses the <code>dplyr</code> package for data wrangling:</p> <pre><code>library(dplyr)\n\nalaska_flights &lt;- flights %&gt;% \n  filter(carrier == \"AS\")\n\nggplot(data = alaska_flights, mapping = aes(x = dep_delay, y = arr_delay)) + \n  geom_point()\n</code></pre> <p>This code takes the <code>flights</code> data frame and <code>filter()</code> it to only return the <code>r alaska_flights_rows</code> rows where <code>carrier</code> is equal to <code>\"AS\"</code>, Alaska Airlines' carrier code. (Recall from Section \\@ref(code) that testing for equality is specified with \\index{using == instead of =} <code>==</code> and not <code>=</code>.) The code then cycles back to save the output in a new data frame called <code>alaska_flights</code> using the <code>&lt;-</code> assignment operator\\index{operators!assignment (&lt;-)}. </p> <p>Similarly, recall in Figure \\@ref(fig:hourlytemp) in Section \\@ref(linegraphs) we visualized hourly temperature recordings at Newark airport only for the first 15 days of January 2013. This data is saved in the <code>early_january_weather</code> data frame from the <code>moderndive</code> package.</p> <p>In reality, the <code>early_january_weather</code> data frame is merely a subset of the <code>weather</code> data frame from the <code>nycflights13</code> package consisting of all hourly weather observations in 2013 for all three NYC airports. We created <code>early_january_weather</code> using the following <code>dplyr</code> code:  </p> <pre><code>early_january_weather &lt;- weather %&gt;% \n  filter(origin == \"EWR\" &amp; month == 1 &amp; day &lt;= 15)\n\nggplot(data = early_january_weather, mapping = aes(x = time_hour, y = temp)) +\n  geom_line()\n</code></pre> <p>This code pares down the <code>weather</code> data frame to a new data frame <code>early_january_weather</code> consisting of hourly temperature recordings only for <code>origin == \"EWR\"</code>, <code>month == 1</code>, and day less than or equal to <code>15</code>. </p> <p>These two code segments are a preview of Chapter \\@ref(wrangling) on data wrangling using the <code>dplyr</code> package. Data wrangling is the process of transforming and modifying existing data with the intent of making it more appropriate for analysis purposes. For example, these two code segments used the <code>filter()</code> function to create new data frames (<code>alaska_flights</code> and <code>early_january_weather</code>) by choosing only a subset of rows of existing data frames (<code>flights</code> and <code>weather</code>). In the next chapter, we'll formally introduce the <code>filter()</code> and other data wrangling functions as well as the pipe operator <code>%&gt;%</code> which allows you to combine multiple data wrangling actions into a single sequential chain of actions. On to Chapter \\@ref(wrangling) on data wrangling!</p>"},{"location":"lectures/SP/","title":"Index","text":""},{"location":"lectures/SP/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul> \\[ f(x) = \\int_{-\\infty}^\\infty     \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}     \\,d\\xi \\] <p>inline tex codes \\(E=mc^2\\).</p> \\[ \\cos x=\\sum_{k=0}^{\\infty}\\frac{(-1)^k}{(2k)!}x^{2k} \\]"},{"location":"research/","title":"Index","text":""},{"location":"research/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul> \\[ f(x) = \\int_{-\\infty}^\\infty     \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}     \\,d\\xi \\] <p>inline tex codes \\(E=mc^2\\).</p> \\[ \\cos x=\\sum_{k=0}^{\\infty}\\frac{(-1)^k}{(2k)!}x^{2k} \\]"}]}