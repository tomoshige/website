{"config":{"lang":["ja"],"separator":"[\\s\\-\u3000\u3001\u3002\uff0c\uff0e]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Welcome to Statistical Learning Laboratory","text":"<p>My name is Tomoshige Nakamura. I am an Assistant Professor in the Department of Health Data Science at Juntendo University. I received my Ph.D. in Engineering from the Keio University in Feb, 2021. I am very fortunate to be supervised by Professor Mihoko Minami. I am also very fortunate to work with Professor Hiroshi Shiraishi on random forest research.</p>"},{"location":"#contact","title":"Contact","text":"<ul> <li>Address : 6-8-1, Hinode, Urayasu Shi, Chiba Prefecture, 279-0013, Japan</li> <li>Email : t.nakamura.gs[at]juntendo.ac.jp</li> </ul>"},{"location":"#research-interest","title":"Research Interest","text":"<p>My research focuses on elucidating the properties of tree-structured models, such as decision trees and regression trees, and developing novel variants of these models. Tree-structured models have a unique advantage in that a single tree can effectively compress and visualize data, while an ensemble of multiple trees (e.g., random forests) can attain high predictive accuracy. Moreover, these models accommodate continuous, categorical, and discrete variables in a unified manner, making them both versatile and practical. It is no surprise, therefore, that tree-based methods consistently appear among the top-performing approaches in competitive data analytics venues such as Kaggle.</p> <p>Recent theoretical advances have shed light on the statistical properties of tree-structured models, pointing to continued improvements in their performance and interpretability. For example, new modeling techniques, such as recursive partitioning models, Isolation Forests for anomaly detection, and causal trees and forests for causal inference, highlight the growing versatility of tree-structured approaches. These models also provide a straightforward measure of variable importance, enabling analysts and domain experts to interpret how different predictors contribute to the final outcome.</p> <p>In my work, I aim to develop new tree architectures that not only preserve high predictive accuracy but also support more complex background information. By integrating hierarchical Bayesian models, it becomes possible to combine rich contextual details\u2014such as multi-level factors or nested data structures\u2014while maintaining strong predictive capabilities. This fusion of tree-based learning and hierarchical modeling is especially promising for tackling challenging research questions that require both flexibility and interpretability.</p> <p>Beyond conventional domains, tree-structured models show great potential in health and medical applications. For instance, the interpretability offered by these models can help medical professionals identify critical risk factors and intervene more effectively. Their ability to deal with heterogeneous data types\u2014ranging from imaging features to genomic markers\u2014makes them well suited for integrative analyses in personalized medicine and other emerging areas. Although this is a challenging field due to the complexity and sensitivity of medical data, the ongoing convergence of statistical theory, machine learning, and healthcare innovation offers immense opportunities to push these models into clinical practice.</p> <p>By advancing the theoretical and practical foundations of tree-structured models, my research strives to illuminate new frontiers in data-driven decision making. From competitive data analytics to healthcare, these models hold promise for more interpretable, accurate, and robust solutions in a wide range of applications. It is my goal to continue exploring these possibilities, driving tree-based methods into even more challenging and impactful domains.</p>"},{"location":"#links","title":"Links","text":"<ul> <li>Department of Health Data Science, Juntendo University</li> <li>Stat Lab, Department of Mathematics, Keio Universiry</li> </ul>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre> \\[ f(x) = \\int_{-\\infty}^\\infty     \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}     \\,d\\xi \\] <p>inline tex codes \\(E=mc^2\\).</p> \\[ \\cos x=\\sum_{k=0}^{\\infty}\\frac{(-1)^k}{(2k)!}x^{2k} \\]"},{"location":"lectures/","title":"Lecture","text":"<p>\u62c5\u5f53\u3057\u3066\u3044\u308b\u8b1b\u7fa9\u306e\u30da\u30fc\u30b8\u3067\u3059\u3002</p>"},{"location":"lectures/#i-ii","title":"\u7dda\u5f62\u4ee3\u6570\u5b66I / \u57fa\u790e / II","text":"<p>\u672c\u8b1b\u7fa9\u3067\u306f\u3001\u7dda\u5f62\u4ee3\u6570\u5b66\u306e\u57fa\u672c\u6982\u5ff5\u3068\u305d\u306e\u5fdc\u7528\u306b\u3064\u3044\u3066\u5b66\u3073\u307e\u3059\u3002\u7dda\u5f62\u4ee3\u6570\u5b66\u306f\u3001\u6570\u5b66\u3001\u7269\u7406\u5b66\u3001\u5de5\u5b66\u3001\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u306a\u3069\u591a\u304f\u306e\u5206\u91ce\u3067\u91cd\u8981\u306a\u5f79\u5272\u3092\u679c\u305f\u3057\u307e\u3059\u3002\u672c\u8b1b\u7fa9\u3092\u901a\u3058\u3066\u3001\u30d9\u30af\u30c8\u30eb\u3001\u884c\u5217\u3001\u9023\u7acb\u65b9\u7a0b\u5f0f\u3001\u884c\u5217\u5f0f\u3001\u7dda\u5f62\u7a7a\u9593\u3001\u7dda\u5f62\u5199\u50cf\u3001\u56fa\u6709\u5024\u3068\u56fa\u6709\u30d9\u30af\u30c8\u30eb\u306a\u3069\u306e\u57fa\u672c\u7684\u306a\u6982\u5ff5\u3092\u7406\u89e3\u3059\u308b\u3053\u3068\u3092\u76ee\u6307\u3057\u307e\u3059\u3002Lecture page</p>"},{"location":"lectures/#_1","title":"\u6570\u7406\u60c5\u5831\u30ea\u30c6\u30e9\u30b7\u30fc","text":"<p>\u672c\u8b1b\u7fa9\u306f\u3001\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u306e\u57fa\u790e\u3092\u5b66\u3076\u3053\u3068\u3092\u76ee\u7684\u3068\u3057\u3001\u6570\u5b66\uff08\u4ee3\u6570\u3084\u5fae\u7a4d\u5206\uff09\u3084\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u4e8b\u524d\u77e5\u8b58\u3092\u5fc5\u8981\u3068\u3057\u307e\u305b\u3093\u3002\u672c\u8b1b\u7fa9\u3067\u306f\u3001\u30c7\u30fc\u30bf\u306e\u5206\u6790\u3084\u53ef\u8996\u5316\u3001\u7d71\u8a08\u30e2\u30c7\u30eb\u306e\u69cb\u7bc9\u3001\u7d71\u8a08\u7684\u63a8\u8ad6\u3092\u5b9f\u8df5\u3057\u306a\u304c\u3089\u5b66\u3073\u307e\u3059\u3002\u4f7f\u7528\u3059\u308b\u74b0\u5883\u306f\u3001Google Colab + \u5185\u8535\u3055\u308c\u3066\u3044\u308b\u751f\u6210AI\u3092\u7528\u3044\u307e\u3059\u3002\u4f7f\u7528\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306f Python \u3067\u3042\u308a\u3001\u7279\u306b pandas \u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u6d3b\u7528\u3057\u3066\u30c7\u30fc\u30bf\u5206\u6790\u3092\u884c\u3044\u307e\u3059\u3002Lecture page</p>"},{"location":"lectures/#i-ii_1","title":"\u78ba\u7387\u3068\u7d71\u8a08I / II","text":"<p>\u672c\u8b1b\u7fa9\u306f\u3001\u78ba\u7387\u3068\u7d71\u8a08 I \u306e\u7d9a\u7de8\u3068\u3057\u3066\u3001\u78ba\u7387\u3068\u7d71\u8a08 II \u3067\u306f\u3001\u6570\u5b66\u7d71\u8a08\u5b66\u306e\u91cd\u8981\u306a\u6982\u5ff5\u3092\u5b66\u3076\u3053\u3068\u3092\u76ee\u7684\u3068\u3057\u307e\u3059\u3002\u672c\u8b1b\u7fa9\u3067\u306f\u3001\u78ba\u7387\u5909\u6570\u306e\u95a2\u6570\u3068\u3057\u3066\u306e\u63a8\u5b9a\u91cf\u3001\u6a19\u672c\u5206\u5e03\u3001\u63a8\u5b9a\u7406\u8ad6\u3001\u304a\u3088\u3073\u63a8\u5b9a\u91cf\u306e\u6027\u8cea\u306b\u95a2\u3059\u308b\u7406\u8ad6\u3068\u5fdc\u7528\u3092\u53d6\u308a\u6271\u3044\u307e\u3059\u3002\u8b1b\u7fa9\u3067\u306f\u7dda\u5f62\u4ee3\u6570\u304a\u3088\u3073\u5fae\u7a4d\u5206\u3092\u6d3b\u7528\u3057\u3066\u7406\u8ad6\u7684\u306a\u7d50\u679c\u3092\u5c0e\u304d\u51fa\u3057\u3001\u305d\u308c\u3089\u3092\u5b9f\u969b\u306e\u554f\u984c\u306b\u9069\u7528\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002Lecture page</p>"},{"location":"lectures/LA/","title":"Index","text":""},{"location":"lectures/LA/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul> \\[ f(x) = \\int_{-\\infty}^\\infty     \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}     \\,d\\xi \\] <p>inline tex codes \\(E=mc^2\\).</p> \\[ \\cos x=\\sum_{k=0}^{\\infty}\\frac{(-1)^k}{(2k)!}x^{2k} \\]"},{"location":"lectures/LA/00-vector-and-matrix/","title":"Prefare","text":"<p>aaaa</p>"},{"location":"lectures/LA/00-vector-and-matrix/#vectors","title":"Vectors","text":"<p>\\(a\\)\u3092\u30d9\u30af\u30c8\u30eb\u3068\u3059\u308b\u3002</p>"},{"location":"lectures/LA/00-vector-and-matrix/#matrix","title":"Matrix","text":""},{"location":"lectures/SIWS/","title":"Index","text":""},{"location":"lectures/SIWS/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul> \\[ f(x) = \\int_{-\\infty}^\\infty     \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}     \\,d\\xi \\] <p>inline tex codes \\(E=mc^2\\).</p> \\[ \\cos x=\\sum_{k=0}^{\\infty}\\frac{(-1)^k}{(2k)!}x^{2k} \\]"},{"location":"lectures/SIWS/01-getting-started/","title":"Python\u3067\u306e\u30c7\u30fc\u30bf\u5206\u6790\u3092\u59cb\u3081\u3088\u3046","text":"<p>Python\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u3092\u63a2\u7d22\u3059\u308b\u524d\u306b\u3001\u307e\u305a\u7406\u89e3\u3057\u3066\u304a\u304f\u3079\u304d\u91cd\u8981\u306a\u6982\u5ff5\u304c\u3042\u308a\u307e\u3059\u3002</p> <ol> <li>Python\u3068Google Colaboratory\u3068\u306f\u4f55\u304b\uff1f</li> <li>Python\u306e\u30b3\u30fc\u30c9\u306e\u66f8\u304d\u65b9</li> <li>Python\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u306f\uff1f</li> </ol> <p>\u3053\u308c\u3089\u306e\u6982\u5ff5\u306b\u3064\u3044\u3066\u3001\u6b21\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u8a73\u3057\u304f\u8aac\u660e\u3057\u307e\u3059\uff08\u30bb\u30af\u30b7\u30e7\u30f3aaa\uff09\u3002\u3059\u3067\u306b\u3042\u308b\u7a0b\u5ea6\u306e\u77e5\u8b58\u304c\u3042\u308b\u5834\u5408\u306f\u3001\u30bb\u30af\u30b7\u30e7\u30f3aaa \u306b\u9032\u3093\u3067\u3001\u6700\u521d\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u7d39\u4ecb\u3059\u308b\u90e8\u5206\u304b\u3089\u8aad\u307f\u59cb\u3081\u3066\u3082\u69cb\u3044\u307e\u305b\u3093\u3002\u672c\u66f8\u3067\u306f\u30012013\u5e74\u306b\u30cb\u30e5\u30fc\u30e8\u30fc\u30af\u5e02\uff08NYC\uff09\u306e\u4e3b\u89813\u7a7a\u6e2f\u304b\u3089\u51fa\u767a\u3057\u305f\u3059\u3079\u3066\u306e\u56fd\u5185\u7dda\u30d5\u30e9\u30a4\u30c8\u306e\u30c7\u30fc\u30bf \u3092\u6271\u3044\u3001\u4ee5\u964d\u306e\u7ae0\u3067\u8a73\u3057\u304f\u5206\u6790\u3057\u3066\u3044\u304d\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/01-getting-started/#python-google-colaboratory","title":"Python \u3068 Google Colaboratory\u3068\u306f\uff1f","text":"<p>\u672c\u66f8\u3067\u306f\u3001Python\u3092Google Colaboratory\uff08\u4ee5\u4e0b\u3001Google Colab\uff09 \u3092\u901a\u3058\u3066\u4f7f\u7528\u3059\u308b\u3053\u3068\u3092\u524d\u63d0\u3068\u3057\u307e\u3059\u3002\u521d\u3081\u3066\u306e\u65b9\u306e\u4e2d\u306b\u306f\u3001Python\u3068Google Colab\u306e\u9055\u3044\u304c\u308f\u304b\u308a\u306b\u304f\u3044\u3068\u611f\u3058\u308b\u3053\u3068\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u3053\u308c\u3092\u308f\u304b\u308a\u3084\u3059\u304f\u8aac\u660e\u3059\u308b\u3068\u3001Python\u306f\u8eca\u306e\u30a8\u30f3\u30b8\u30f3\u3001Google Colab\u306f\u8eca\u306e\u30c0\u30c3\u30b7\u30e5\u30dc\u30fc\u30c9 \u306e\u3088\u3046\u306a\u95a2\u4fc2\u306b\u3042\u308a\u307e\u3059\uff08\u56f3\u3092\u53c2\u7167\uff09\u3002</p> <p>Note</p> <p>\u3053\u3053\u306b\u30a4\u30e1\u30fc\u30b8\u56f3\u3092\u633f\u5165</p> <p>\u3082\u3046\u5c11\u3057\u8a73\u3057\u304f\u8aac\u660e\u3059\u308b\u3068\u3001Python\u306f\u8a08\u7b97\u3092\u5b9f\u884c\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e \u3067\u3042\u308a\u3001\u4e00\u65b9\u3067Google Colab\u306f\u3001Google\u793e\u304c\u63d0\u4f9b\u3059\u308b\u6a5f\u68b0\u5b66\u7fd2\u5411\u3051\u306e\u7d71\u5408\u958b\u767a\u74b0\u5883\uff08IDE\uff09 \u3067\u3059\u3002Google Colab\u306b\u306f\u3001Python\u3092\u4fbf\u5229\u306b\u4f7f\u3046\u305f\u3081\u306e\u3055\u307e\u3056\u307e\u306a\u6a5f\u80fd\u3084\u30c4\u30fc\u30eb\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3044\u307e\u3059\u3002</p> <p>\u3053\u308c\u306f\u3001\u904b\u8ee2\u3059\u308b\u3068\u304d\u306b\u30b9\u30d4\u30fc\u30c9\u30e1\u30fc\u30bf\u30fc\u3084\u30d0\u30c3\u30af\u30df\u30e9\u30fc\u3001\u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30b7\u30b9\u30c6\u30e0\u304c\u3042\u308b\u3053\u3068\u3067\u5b89\u5168\u304b\u3064\u30b9\u30e0\u30fc\u30ba\u306b\u904b\u8ee2\u3067\u304d\u308b\u306e\u3068\u540c\u3058\u3088\u3046\u306b\u3001Google Colab\u3092\u4f7f\u3046\u3053\u3068\u3067Python\u3092\u3088\u308a\u76f4\u611f\u7684\u304b\u3064\u52b9\u7387\u7684\u306b\u64cd\u4f5c\u3067\u304d\u308b \u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002</p>"},{"location":"lectures/SIWS/01-getting-started/#google-colaboratory-python","title":"Google Colaboratory \u3067 Python \u3092\u59cb\u3081\u308b","text":"<p>Google Colaboratory\uff08Google Colab\uff09 \u306f\u3001Google \u304c\u63d0\u4f9b\u3059\u308b\u7121\u6599\u306e\u30af\u30e9\u30a6\u30c9\u74b0\u5883\u3067\u3001Python \u3092\u30d6\u30e9\u30a6\u30b6\u4e0a\u3067\u5b9f\u884c\u3067\u304d\u308b\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u3059\u3002\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u4e0d\u8981\u3067\u4f7f\u3048\u308b\u305f\u3081\u3001\u521d\u5fc3\u8005\u3067\u3082\u7c21\u5358\u306b Python \u3092\u59cb\u3081\u3089\u308c\u307e\u3059\u3002</p> <p>1. Google Colab \u3092\u4f7f\u3046\u6e96\u5099</p> <p>Google Colab \u3092\u4f7f\u7528\u3059\u308b\u306b\u306f\u3001Google \u30a2\u30ab\u30a6\u30f3\u30c8\u304c\u5fc5\u8981\u3067\u3059\u3002\u4ee5\u4e0b\u306e\u624b\u9806\u306b\u5f93\u3063\u3066\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3092\u884c\u3044\u307e\u3057\u3087\u3046\u3002</p> <p>2: Google Colab \u306b\u30a2\u30af\u30bb\u30b9</p> <ol> <li>Google Colaboratory \u306b\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\u3002</li> <li>Google \u30a2\u30ab\u30a6\u30f3\u30c8\u3067\u30ed\u30b0\u30a4\u30f3\u3057\u307e\u3059\u3002</li> </ol> <p>3: \u65b0\u3057\u3044\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u3092\u4f5c\u6210</p> <ol> <li>Google Colab \u306e\u30db\u30fc\u30e0\u753b\u9762\u3067 \u300c\u65b0\u3057\u3044\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u300d \u3092\u30af\u30ea\u30c3\u30af\u3057\u307e\u3059\u3002</li> <li>\u65b0\u3057\u3044 Python \u306e Jupyter Notebook \u304c\u958b\u304d\u307e\u3059\u3002</li> </ol> <p>4: \u7c21\u5358\u306a Python \u30b3\u30fc\u30c9\u3092\u5b9f\u884c</p> <ol> <li>\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u306e\u30bb\u30eb\u306b\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5165\u529b\u3057\u307e\u3059\uff1a   <code>python   print(\"Hello, Google Colab!\")</code></li> <li>Shift + Enter \u3092\u62bc\u3059\u304b\u3001\u30bb\u30eb\u306e\u5de6\u5074\u306b\u3042\u308b\u518d\u751f\u30dc\u30bf\u30f3 \u25b6 \u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u5b9f\u884c\u3057\u307e\u3059\u3002</li> <li>\u51fa\u529b\u3068\u3057\u3066 <code>Hello, Google Colab!</code> \u3068\u8868\u793a\u3055\u308c\u308c\u3070\u6210\u529f\u3067\u3059\u3002</li> </ol>"},{"location":"lectures/SIWS/01-getting-started/#google-colaboratory-python_1","title":"Google Colaboratory \u3067 Python \u3092\u4f7f\u3046","text":"<p>\u4ee5\u524d\u306e\u8eca\u306e\u30a2\u30ca\u30ed\u30b8\u30fc\u3092\u601d\u3044\u51fa\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u79c1\u305f\u3061\u306f\u30a8\u30f3\u30b8\u30f3\u3092\u76f4\u63a5\u64cd\u4f5c\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u30c0\u30c3\u30b7\u30e5\u30dc\u30fc\u30c9\u4e0a\u306e\u8981\u7d20\u3092\u4f7f\u3063\u3066\u8eca\u3092\u904b\u8ee2\u3057\u307e\u3059\u3002\u540c\u69d8\u306b\u3001Python \u3092\u76f4\u63a5\u64cd\u4f5c\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001Google Colaboratory\uff08Google Colab\uff09 \u3092\u4f7f\u7528\u3057\u3066 Python \u3092\u5b9f\u884c\u3057\u307e\u3059\u3002</p> <p>Google Colab \u306f\u3001Google \u304c\u63d0\u4f9b\u3059\u308b\u30af\u30e9\u30a6\u30c9\u30d9\u30fc\u30b9\u306e Jupyter Notebook \u74b0\u5883\u3067\u3059\u3002\u3053\u308c\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3001Python \u306e\u74b0\u5883\u69cb\u7bc9\u3092\u884c\u3046\u3053\u3068\u306a\u304f\u3001\u30d6\u30e9\u30a6\u30b6\u4e0a\u3067\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u3001\u5b9f\u884c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <p>Google Colab \u3092\u958b\u304f\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002</p> <p>Note</p> <p>\u3053\u3053\u306b Google Colab \u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u753b\u50cf\u3092\u633f\u5165</p> <p>Google Colab \u306e\u753b\u9762\u306f\u3001\u5927\u304d\u304f\u5206\u3051\u3066 3 \u3064\u306e\u90e8\u5206\u306b\u5206\u304b\u308c\u3066\u3044\u307e\u3059\u3002</p> <ol> <li>\u30b3\u30fc\u30c9\u30bb\u30eb: \u3053\u3053\u306b Python \u30b3\u30fc\u30c9\u3092\u8a18\u8ff0\u3057\u3001\u5b9f\u884c\u3057\u307e\u3059\u3002</li> <li>\u51fa\u529b\u30a8\u30ea\u30a2: \u30b3\u30fc\u30c9\u306e\u5b9f\u884c\u7d50\u679c\u304c\u8868\u793a\u3055\u308c\u308b\u5834\u6240\u3067\u3059\u3002</li> <li>\u30d5\u30a1\u30a4\u30eb\u7ba1\u7406\u30a8\u30ea\u30a2: Google \u30c9\u30e9\u30a4\u30d6\u3084\u30ed\u30fc\u30ab\u30eb\u30d5\u30a1\u30a4\u30eb\u3092\u7ba1\u7406\u3067\u304d\u307e\u3059\u3002</li> </ol>"},{"location":"lectures/SIWS/01-getting-started/#python-code","title":"Python \u306e\u57fa\u672c\u7684\u306a\u66f8\u304d\u65b9 {#code}","text":"<p>Python \u3092\u4f7f\u3044\u59cb\u3081\u308b\u3068\u3001\u300cPython \u306f\u3069\u3046\u3084\u3063\u3066\u4f7f\u3046\u306e\uff1f\u300d\u3068\u3044\u3046\u7591\u554f\u304c\u6d6e\u304b\u3076\u3067\u3057\u3087\u3046\u3002Python \u306f \u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u578b\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e \u3067\u3042\u308a\u3001Excel \u3084 SPSS \u306e\u3088\u3046\u306a \u30dd\u30a4\u30f3\u30c8 &amp; \u30af\u30ea\u30c3\u30af \u64cd\u4f5c\u3067\u306f\u306a\u304f\u3001\u30b3\u30fc\u30c9\u3092\u5165\u529b\u3057\u3066\u5b9f\u884c\u3059\u308b \u3053\u3068\u3067\u52d5\u4f5c\u3057\u307e\u3059\u3002</p> <p>Python \u3092\u4f7f\u3046\u306b\u306f\u3001\u57fa\u672c\u7684\u306a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u6982\u5ff5\u3092\u7406\u89e3\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u672c\u66f8\u306f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306b\u7279\u5316\u3057\u305f\u66f8\u7c4d\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u30c7\u30fc\u30bf\u3092\u63a2\u7d22\u30fb\u5206\u6790\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u6700\u4f4e\u9650\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u77e5\u8b58\u3092\u5b66\u3093\u3067\u3044\u304d\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/01-getting-started/#programming-concepts","title":"\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u57fa\u672c\u6982\u5ff5\u3068\u7528\u8a9e {#programming-concepts}","text":"<p>\u3053\u3053\u3067\u306f\u3001Python \u306b\u304a\u3051\u308b\u57fa\u672c\u7684\u306a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u6982\u5ff5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\u3053\u308c\u3089\u3092\u4e00\u5ea6\u306b\u3059\u3079\u3066\u899a\u3048\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u672c\u66f8\u3092\u901a\u3058\u3066\u3001\u300c\u5b9f\u8df5\u3057\u306a\u304c\u3089\u5b66\u3076\u300d \u3053\u3068\u3067\u81ea\u7136\u306b\u7406\u89e3\u3092\u6df1\u3081\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002</p>"},{"location":"lectures/SIWS/01-getting-started/#_1","title":"\u57fa\u672c\u6982\u5ff5","text":"<ul> <li>\u30b3\u30fc\u30c9\u30bb\u30eb: Python \u306e\u30b3\u30fc\u30c9\u3092\u5165\u529b\u3057\u3001\u5b9f\u884c\u3059\u308b\u305f\u3081\u306e\u9818\u57df\u3002</li> <li>\u30b3\u30fc\u30c9\u306e\u5b9f\u884c: \u30b3\u30fc\u30c9\u30bb\u30eb\u306b\u5165\u529b\u3057\u305f\u547d\u4ee4\u3092 Python \u306b\u5b9f\u884c\u3055\u305b\u308b\u3053\u3068\u3002   \u4f8b: <code>print(\"Hello, Python!\")</code></li> <li>\u5909\u6570\uff08Variables\uff09: \u30c7\u30fc\u30bf\u3092\u683c\u7d0d\u3059\u308b\u305f\u3081\u306e\u540d\u524d\u4ed8\u304d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3002   \u4f8b: <code>x = 10</code></li> <li>\u30c7\u30fc\u30bf\u578b\uff08Data Types\uff09: Python \u306b\u306f\u3055\u307e\u3056\u307e\u306a\u30c7\u30fc\u30bf\u578b\u304c\u5b58\u5728\u3057\u307e\u3059\u3002</li> <li>\u6574\u6570\uff08int\uff09: <code>-1, 0, 2, 4092</code></li> <li>\u6d6e\u52d5\u5c0f\u6570\u70b9\uff08float\uff09: <code>-24.932, 0.8</code></li> <li>\u30d6\u30fc\u30eb\u5024\uff08bool\uff09: <code>True</code> \u307e\u305f\u306f <code>False</code></li> <li>\u6587\u5b57\u5217\uff08str\uff09: <code>\"Python\", \"\u30c7\u30fc\u30bf\u5206\u6790\", \"Colab\"</code></li> </ul>"},{"location":"lectures/SIWS/01-getting-started/#_2","title":"\u914d\u5217\u3084\u30c7\u30fc\u30bf\u69cb\u9020","text":"<ul> <li>\u30ea\u30b9\u30c8\uff08List\uff09: \u4e00\u9023\u306e\u5024\u3092\u683c\u7d0d\u3059\u308b\u30c7\u30fc\u30bf\u69cb\u9020\u3002   \u4f8b: <code>numbers = [6, 11, 13, 31, 90, 92]</code></li> <li>NumPy \u914d\u5217\uff08NumPy Array\uff09: \u6570\u5024\u30c7\u30fc\u30bf\u3092\u52b9\u7387\u7684\u306b\u6271\u3046\u305f\u3081\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u3002   \u4f8b: <code>python   import numpy as np   arr = np.array([1, 2, 3, 4, 5])</code></li> <li>\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\uff08DataFrame\uff09: \u30c7\u30fc\u30bf\u3092\u8868\u306e\u5f62\u5f0f\u3067\u6271\u3046\u305f\u3081\u306e\u69cb\u9020\uff08pandas \u3092\u4f7f\u7528\uff09\u3002   \u4f8b:   <code>python   import pandas as pd   data = {'\u540d\u524d': ['Alice', 'Bob', 'Charlie'], '\u5e74\u9f62': [25, 30, 35]}   df = pd.DataFrame(data)   print(df)</code>   \u51fa\u529b   <code>python       \u540d\u524d  \u5e74\u9f62   0  Alice  25   1    Bob  30   2 Charlie  35</code></li> </ul>"},{"location":"lectures/SIWS/01-getting-started/#_3","title":"\u6761\u4ef6\u5206\u5c90","text":"<ul> <li> <p>\u6bd4\u8f03\u6f14\u7b97\u5b50 <code>==</code> \uff08\u7b49\u3057\u3044\uff09: <code>2 + 1 == 3</code> \u2192 <code>True</code> <code>!=</code> \uff08\u7b49\u3057\u304f\u306a\u3044\uff09: <code>2 + 1 != 3</code> \u2192 <code>False</code> <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code> \uff08\u5927\u5c0f\u6bd4\u8f03\uff09</p> </li> <li> <p>\u8ad6\u7406\u6f14\u7b97\u5b50 <code>and</code> \uff08\u4e21\u65b9\u304c True \u306e\u3068\u304d True\uff09   \u4f8b: <code>(2 + 1 == 3) and (2 + 1 == 4)</code> \u2192 <code>False</code> <code>or</code> \uff08\u3069\u3061\u3089\u304b\u304c True \u306a\u3089 True\uff09   \u4f8b: <code>(2 + 1 == 3) or (2 + 1 == 4)</code> \u2192 <code>True</code></p> </li> </ul>"},{"location":"lectures/SIWS/01-getting-started/#functions","title":"**\u95a2\u6570 (Functions) \uff0a\uff0a","text":"<p>\u95a2\u6570 \u306f\u3001\u3042\u308b\u5165\u529b\uff08\u5f15\u6570\uff09\u3092\u53d7\u3051\u53d6\u308a\u3001\u51e6\u7406\u3092\u884c\u3044\u3001\u7d50\u679c\u3092\u8fd4\u3059\u3082\u306e\u3067\u3059\u3002Python \u3067\u306f\u3001\u591a\u304f\u306e\u7d44\u307f\u8fbc\u307f\u95a2\u6570\u304c\u5229\u7528\u3067\u304d\u307e\u3059\u3002</p> <p>Python \u306e\u57fa\u672c\u7684\u306a\u95a2\u6570 - <code>print()</code> \u2192 \u753b\u9762\u306b\u8868\u793a\u3059\u308b   <code>python   print(\"Hello, Python!\")</code></p> <ul> <li> <p><code>len()</code> \u2192 \u30ea\u30b9\u30c8\u3084\u6587\u5b57\u5217\u306e\u9577\u3055\u3092\u53d6\u5f97   <code>python   words = [\"Python\", \"Colab\", \"Data\"]   print(len(words))  # \u51fa\u529b: 3</code></p> </li> <li> <p><code>sum()</code> \u2192 \u6570\u5024\u306e\u30ea\u30b9\u30c8\u306e\u5408\u8a08\u3092\u8a08\u7b97   <code>python   numbers = [1, 2, 3, 4, 5]   print(sum(numbers))  # \u51fa\u529b: 15</code></p> </li> <li> <p>\u72ec\u81ea\u306e\u95a2\u6570\u3092\u5b9a\u7fa9 <code>def</code> \u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u65b0\u3057\u3044\u95a2\u6570\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> </li> </ul> <pre><code>def square(x):\n    return x ** 2\n\nprint(square(5))  # \u51fa\u529b: 25\n</code></pre>"},{"location":"lectures/SIWS/01-getting-started/#_4","title":"\u307e\u3068\u3081","text":"<p>\u3053\u3053\u3067\u7d39\u4ecb\u3057\u305f\u306e\u306f\u3001Python \u3092\u4f7f\u3044\u59cb\u3081\u308b\u4e0a\u3067\u5fc5\u8981\u306a \u6700\u4f4e\u9650\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u6982\u5ff5 \u3067\u3059\u3002\u672c\u66f8\u3092\u901a\u3058\u3066\u3001\u3088\u308a\u6df1\u304f\u5b66\u3073\u306a\u304c\u3089\u5b9f\u8df5\u3057\u3066\u3044\u304d\u307e\u3059\u3002Python \u306e\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u30b9\u30ad\u30eb\u306f\u3001\u7e70\u308a\u8fd4\u3057\u7df4\u7fd2\u3059\u308b\u3053\u3068\u3067\u81ea\u7136\u306b\u8eab\u306b\u3064\u304f \u3082\u306e\u306a\u306e\u3067\u3001\u7126\u3089\u305a\u306b\u4e00\u6b69\u305a\u3064\u9032\u3081\u3066\u3044\u304d\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"lectures/SIWS/01-getting-started/#basic-programming-concepts-and-terminology-programming-concepts","title":"Basic programming concepts and terminology {#programming-concepts}","text":"<p>We now introduce some basic programming concepts and terminology. Instead of asking you to memorize all these concepts and terminology right now, we'll guide you so that you'll \"learn by doing.\" To help you learn, we will always use a different font to distinguish regular text from <code>computer_code</code>. The best way to master these topics is, in our opinions, through deliberate practice with R and lots of repetition.</p> <ul> <li>Basics: \\index{programming language basics}<ul> <li>Console pane: where you enter in commands. \\index{console}</li> <li>Running code: the act of telling R to perform an act by giving it commands in the console.</li> <li>Objects: where values are saved in R. We'll show you how to assign values to objects and how to display the contents of objects. \\index{objects}</li> <li>Data types: integers, doubles/numerics, logicals, and characters. \\index{data types} Integers are values like -1, 0, 2, 4092. Doubles or numerics are a larger set of values containing both the integers but also fractions and decimal values like -24.932 and 0.8. Logicals are either <code>TRUE</code> or <code>FALSE</code> while characters are text such as \"cabbage\", \"Hamilton\", \"The Wire is the greatest TV show ever\", and \"This ramen is delicious.\" Note that characters are often denoted with the quotation marks around them.</li> </ul> </li> <li>Vectors: a series of values. These are created using the <code>c()</code> function, where <code>c()</code> stands for \"combine\" or \"concatenate.\" For example, <code>c(6, 11, 13, 31, 90, 92)</code> creates a six element series of positive integer values \\index{vectors}.</li> <li>Factors: categorical data are commonly represented in R as factors. \\index{factors} Categorical data can also be represented as strings. We'll study this difference as we progress through the book.</li> <li>Data frames: rectangular spreadsheets. They are representations of datasets in R where the rows correspond to observations and the columns correspond to variables that describe the observations. \\index{data frame} We'll cover data frames later in Section \\@ref(nycflights13).</li> <li>Conditionals: \\index{conditionals}</li> <li>Testing for equality in R using <code>==</code> (and not <code>=</code>, which is typically used for assignment). For example, <code>2 + 1 == 3</code> compares <code>2 + 1</code> to <code>3</code> and is correct R code, while <code>2 + 1 = 3</code> will return an error.</li> <li>Boolean algebra: <code>TRUE/FALSE</code> statements and mathematical operators such as <code>&lt;</code> (less than), <code>&lt;=</code> (less than or equal), and <code>!=</code> (not equal to). \\index{Boolean algebra} For example, <code>4 + 2 &gt;= 3</code> will return <code>TRUE</code>, but <code>3 + 5 &lt;= 1</code> will return <code>FALSE</code>.</li> <li>Logical operators: <code>&amp;</code> representing \"and\" as well as <code>|</code> representing \"or.\" For example, <code>(2 + 1 == 3) &amp; (2 + 1 == 4)</code> returns <code>FALSE</code> since both clauses are not <code>TRUE</code> (only the first clause is <code>TRUE</code>). On the other hand, <code>(2 + 1 == 3) | (2 + 1 == 4)</code> returns <code>TRUE</code> since at least one of the two clauses is <code>TRUE</code>. \\index{operators!logical}</li> <li>Functions, also called commands: Functions perform tasks in R. They take in inputs called arguments and return outputs. You can either manually specify a function's arguments or use the function's default values. \\index{functions} </li> <li>For example, the function <code>seq()</code> in R generates a sequence of numbers. If you just run <code>seq()</code> it will return the value 1. That doesn't seem very useful! This is because the default arguments are set as <code>seq(from = 1, to = 1)</code>. Thus, if you don't pass in different values for <code>from</code> and <code>to</code> to change this behavior, R just assumes all you want is the number 1. You can change the argument values by updating the values after the <code>=</code> sign. If we try out <code>seq(from = 2, to = 5)</code> we get the result <code>2 3 4 5</code> that we might expect. </li> <li>We'll work with functions a lot throughout this book and you'll get lots of practice in understanding their behaviors. To further assist you in understanding when a function is mentioned in the book, we'll also include the <code>()</code> after them as we did with <code>seq()</code> above.</li> </ul> <p>This list is by no means an exhaustive list of all the programming concepts and terminology needed to become a savvy R user; such a list would be so large it wouldn't be very useful, especially for novices. Rather, we feel this is a minimally viable list of programming concepts and terminology you need to know before getting started. We feel that you can learn the rest as you go.  Remember that your mastery of all of these concepts and terminology will build as you practice more and more.</p>"},{"location":"lectures/SIWS/01-getting-started/#errors-warnings-and-messages-messages","title":"Errors, warnings, and messages {#messages}","text":"<p>One thing that intimidates new R and RStudio users is how it reports errors, warnings, and messages. R reports errors, warnings, and messages in a glaring red font, which makes it seem like it is scolding you. However, seeing red text in the console is not always bad.</p> <p>R will show red text in the console pane in three different situations:</p> <ul> <li>Errors: \\index{R!errors} When the red text is a legitimate error, it will be prefaced with \"Error in\u2026\" and will try to explain what went wrong. Generally when there's an error, the code will not run. For example, we'll see in Subsection \\@ref(package-use) if you see <code>Error in ggplot(...) : could not find function \"ggplot\"</code>, it means that the <code>ggplot()</code> function is not accessible because the package that contains the function (<code>ggplot2</code>) was not loaded with <code>library(ggplot2)</code>. Thus you cannot use the <code>ggplot()</code> function without the <code>ggplot2</code> package being loaded first.</li> <li>Warnings: \\index{R!warnings} When the red text is a warning, it will be prefaced with \"Warning:\" and R will try to explain why there's a warning. Generally your code will still work, but with some caveats. For example, you will see in Chapter \\@ref(viz) if you create a scatterplot based on a dataset where two of the rows of data have missing entries that would be needed to create points in the scatterplot, you will see this warning: <code>Warning: Removed 2 rows containing missing values (geom_point)</code>. R will still produce the scatterplot with all the remaining non-missing values, but it is warning you that two of the points aren't there.</li> <li>Messages: \\index{R!messages} When the red text doesn't start with either \"Error\" or \"Warning\", it's just a friendly message. You'll see these messages when you load R packages in the upcoming Subsection \\@ref(package-loading) or when you read data saved in spreadsheet files with the <code>read_csv()</code> function as you'll see in Chapter \\@ref(tidy). These are helpful diagnostic messages and they don't stop your code from working. Additionally, you'll see these messages when you install packages too using <code>install.packages()</code> as discussed in Subsection \\@ref(package-installation).</li> </ul> <p>Remember, when you see red text in the console, don't panic. It doesn't necessarily mean anything is wrong. Rather:</p> <ul> <li>If the text starts with \"Error\", figure out what's causing it. Think of errors as a red traffic light: something is wrong!</li> <li>If the text starts with \"Warning\", figure out if it's something to worry about. For instance, if you get a warning about missing values in a scatterplot and you know there are missing values, you're fine. If that's surprising, look at your data and see what's missing. Think of warnings as a yellow traffic light: everything is working fine, but watch out/pay attention.</li> <li>Otherwise, the text is just a message. Read it, wave back at R, and thank it for talking to you. Think of messages as a green traffic light: everything is working fine and keep on going!</li> </ul>"},{"location":"lectures/SIWS/01-getting-started/#tips-on-learning-to-code-tips-code","title":"Tips on learning to code {#tips-code}","text":"<p>Learning to code/program is quite similar to learning a foreign language. It can be daunting and frustrating at first. Such frustrations are common and it is normal to feel discouraged as you learn. However, just as with learning a foreign language, if you put in the effort and are not afraid to make mistakes, anybody can learn and improve. </p> <p>Here are a few useful tips to keep in mind as you learn to program:</p> <ul> <li>Remember that computers are not actually that smart: You may think your computer or smartphone is \"smart,\" but really people spent a lot of time and energy designing them to appear \"smart.\" In reality, you have to tell a computer everything it needs to do. Furthermore, the instructions you give your computer can't have any mistakes in them, nor can they be ambiguous in any way.</li> <li>Take the \"copy, paste, and tweak\" approach: Especially when you learn your first programming language or you need to understand particularly complicated code, it is often much easier to take existing code that you know works and modify it to suit your ends. This is as opposed to trying to type out the code from scratch. We call this the \"copy, paste, and tweak\" approach. So early on, we suggest not trying to write code from memory, but rather take existing examples we have provided you, then copy, paste, and tweak them to suit your goals. After you start feeling more confident, you can slowly move away from this approach and write code from scratch. Think of the \"copy, paste, and tweak\" approach as training wheels for a child learning to ride a bike. After getting comfortable, they won't need them anymore. </li> <li>The best way to learn to code is by doing: Rather than learning to code for its own sake, we find that learning to code goes much smoother when you have a goal in mind or when you are working on a particular project, like analyzing data that you are interested in and that is important to you. </li> <li>Practice is key:  Just as the only method to improve your foreign language skills is through lots of practice and speaking, the only method to improving your coding skills is through lots of practice. Don't worry, however, we'll give you plenty of opportunities to do so!</li> </ul>"},{"location":"lectures/SIWS/01-getting-started/#what-are-r-packages-packages","title":"What are R packages? {#packages}","text":"<p>Another point of confusion with many new R users is the idea of an R package. R packages \\index{R!packages} extend the functionality of R by providing additional functions, data, and documentation. They are written by a worldwide community of R users and can be downloaded for free from the internet. </p> <p>For example, among the many packages we will use in this book are the <code>ggplot2</code> package [@R-ggplot2] for data visualization in Chapter \\@ref(viz)\\index{R packages!ggplot2}, the <code>dplyr</code> package [@R-dplyr] for data wrangling in Chapter \\@ref(wrangling)\\index{R packages!dplyr}, the <code>moderndive</code> package [@R-moderndive] that accompanies this book\\index{R packages!moderndive}, and the <code>infer</code> package [@R-infer] for \"tidy\" and transparent statistical inference in Chapters \\@ref(confidence-intervals), \\@ref(hypothesis-testing), and \\@ref(inference-for-regression)\\index{R packages!infer}.</p> <p>A good analogy for R packages \\index{R packages} is they are like apps you can download onto a mobile phone:</p> <pre><code>include_graphics(\"images/shutterstock/R_vs_R_packages.png\")\n</code></pre> <p>So R is like a new mobile phone: while it has a certain amount of features when you use it for the first time, it doesn't have everything. R packages are like the apps you can download onto your phone from Apple's App Store or Android's Google Play. </p> <p>Let's continue this analogy by considering the Instagram app for editing and sharing pictures. Say you have purchased a new phone and you would like to share a photo you have just taken with friends on Instagram. You need to:</p> <ol> <li>Install the app: Since your phone is new and does not include the Instagram app, you need to download the app from either the App Store or Google Play. You do this once and you're set for the time being. You might need to do this again in the future when there is an update to the app.</li> <li>Open the app: After you've installed Instagram, you need to open it.</li> </ol> <p>Once Instagram is open on your phone, you can then proceed to share your photo with your friends and family. The process is very similar for using an R package. You need to:</p> <ol> <li>Install the package: This is like installing an app on your phone. Most packages are not installed by default when you install R and RStudio. Thus if you want to use a package for the first time, you need to install it first. Once you've installed a package, you likely won't install it again unless you want to update it to a newer version.</li> <li>\"Load\" the package: \"Loading\" a package is like opening an app on your phone. Packages are not \"loaded\" by default when you start RStudio on your computer; you need to \"load\" each package you want to use every time you start RStudio.</li> </ol> <p>Let's perform these two steps for the <code>ggplot2</code> package for data visualization.</p>"},{"location":"lectures/SIWS/01-getting-started/#package-installation-package-installation","title":"Package installation {#package-installation}","text":"<p>Note about RStudio Server or RStudio Cloud: If your instructor has provided you with a link and access to RStudio Server or RStudio Cloud, you might not need to install packages, as they might be preinstalled for you by your instructor. That being said, it is still a good idea to know this process for later on when you are not using RStudio Server or Cloud, but rather RStudio Desktop on your own computer.</p> <p>There are two ways to install an R package: an easy way and a more advanced way. \\index{R packages!installation} Let's install the <code>ggplot2</code> package the easy way first as shown in Figure \\@ref(fig:easy-way-install). In the Files pane of RStudio:</p> <p>a) Click on the \"Packages\" tab. a) Click on \"Install\" next to Update. a) Type the name of the package under \"Packages (separate multiple with space or comma):\" In this case, type <code>ggplot2</code>. a) Click \"Install.\"  </p> <pre><code>include_graphics(\"images/rstudio_screenshots/install_packages_easy_way.png\")\n</code></pre> <p>An alternative but slightly less convenient way to install a package is by typing <code>install.packages(\"ggplot2\")</code> in the console pane of RStudio and pressing Return/Enter on your keyboard. Note you must include the quotation marks around the name of the package.</p> <p>Much like an app on your phone, you only have to install a package once. However, if you want to update a previously installed package to a newer version, you need to reinstall it by repeating the earlier steps.</p> <p>\\vspace{0.1in}</p> <pre><code>\\vspace{-0.15in}\n**_Learning check_**\n\\vspace{-0.1in}\n</code></pre> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> Repeat the earlier installation steps, but for the <code>dplyr</code>, <code>nycflights13</code>, and <code>knitr</code> packages. This will install the earlier mentioned <code>dplyr</code> package for data wrangling, the <code>nycflights13</code> package containing data on all domestic flights leaving a NYC airport in 2013, and the <code>knitr</code> package for generating easy-to-read tables in R. We'll use these packages in the next section.</p> <pre><code>\\vspace{-0.25in}\n\\vspace{-0.25in}\n</code></pre> <p>\\vspace{0.1in}</p> <p>Note that if you'd like your output on your computer to match up exactly with the output presented throughout the book, you may want to use the exact versions of the packages that we used. You can find a full listing of these packages and their versions in Appendix \\@ref(appendixE). This likely won't be relevant for novices, but we included it for reproducibility reasons.</p>"},{"location":"lectures/SIWS/01-getting-started/#package-loading-package-loading","title":"Package loading {#package-loading}","text":"<p>Recall that after you've installed a package, you need to \"load it.\" In other words, you need to \"open it.\" We do this by using the <code>library()</code> command. \\index{R packages!loading} </p> <p>For example, to load the <code>ggplot2</code> package, run the following code in the console pane. What do we mean by \"run the following code\"? Either type or copy-and-paste the following code into the console pane and then hit the Enter key. </p> <pre><code>library(ggplot2)\n</code></pre> <p>If after running the earlier code, a blinking cursor returns next to the <code>&gt;</code> \"prompt\" sign, it means you were successful and the <code>ggplot2</code> package is now loaded and ready to use. If, however, you get a red \"error message\" that reads <code>...</code> \\index{R packages!loading error}</p> <pre><code>Error in library(ggplot2) : there is no package called \u2018ggplot2\u2019\n</code></pre> <p><code>...</code> it means that you didn't successfully install it. This is an example of an \"error message\" we discussed in Subsection \\@ref(messages). If you get this error message, go back to Subsection \\@ref(package-installation) on R package installation and make sure to install the <code>ggplot2</code> package before proceeding. </p> <p>\\vspace{0.1in}</p> <pre><code>\\vspace{-0.15in}\n**_Learning check_**\n\\vspace{-0.1in}\n</code></pre> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> \"Load\" the <code>dplyr</code>, <code>nycflights13</code>, and <code>knitr</code> packages as well by repeating the earlier steps.</p> <pre><code>\\vspace{-0.25in}\n\\vspace{-0.25in}\n</code></pre> <p>\\vspace{0.1in}</p>"},{"location":"lectures/SIWS/01-getting-started/#package-use-package-use","title":"Package use {#package-use}","text":"<p>One very common mistake new R users make when wanting to use particular packages is they forget to \"load\" them first by using the <code>library()</code> command we just saw. Remember: you have to load each package you want to use every time you start RStudio. If you don't first \"load\" a package, but attempt to use one of its features, you'll see an error message similar to:</p> <pre><code>Error: could not find function\n</code></pre> <p>This is a different error message than the one you just saw on a package not having been installed yet. R is telling you that you are trying to use a function in a package that has not yet been \"loaded.\" R doesn't know where to find the function you are using. Almost all new users forget to do this when starting out, and it is a little annoying to get used to doing it. However, you'll remember with practice and after some time it will become second nature for you.</p>"},{"location":"lectures/SIWS/01-getting-started/#explore-your-first-datasets-nycflights13","title":"Explore your first datasets {#nycflights13}","text":"<p>Let's put everything we've learned so far into practice and start exploring some real data! Data comes to us in a variety of formats, from pictures to text to numbers.  Throughout this book, we'll focus on datasets that are saved in \"spreadsheet\"-type format. This is probably the most common way data are collected and saved in many fields.  Remember from Subsection \\@ref(programming-concepts) that these \"spreadsheet\"-type datasets are called data frames in R. \\index{data frame} We'll focus on working with data saved as data frames throughout this book.</p> <p>Let's first load all the packages needed for this chapter, assuming you've already installed them. Read Section \\@ref(packages) for information on how to install and load R packages if you haven't already.</p> <pre><code>library(nycflights13)\nlibrary(dplyr)\nlibrary(knitr)\n</code></pre> <p>At the beginning of all subsequent chapters in this book, we'll always have a list of packages that you should have installed and loaded in order to work with that chapter's R code. </p>"},{"location":"lectures/SIWS/01-getting-started/#nycflights13-package","title":"<code>nycflights13</code> package","text":"<p>Many of us have flown on airplanes or know someone who has. Air travel has become an ever-present aspect of many people's lives. If you look at the Departures flight information board at an airport, you will frequently see that some flights are delayed for a variety of reasons. Are there ways that we can understand the reasons that cause flight delays?  </p> <p>We'd all like to arrive at our destinations on time whenever possible. (Unless you secretly love hanging out at airports.  If you are one of these people, pretend for a moment that you are very much anticipating being at your final destination.)  Throughout this book, we're going to analyze data related to all domestic flights departing from one of New York City's three main airports in 2013: Newark Liberty International (EWR), John F. Kennedy International (JFK), and LaGuardia Airport (LGA). We'll access this data using the <code>nycflights13</code> \\index{R packages!nycflights13} R package, which contains five datasets saved in five data frames:</p> <pre><code># This redundant code is used for dynamic non-static in-line text output purposes\nflights_rows &lt;- flights %&gt;%\n  nrow() %&gt;%\n  comma()\nflights_cols &lt;- flights %&gt;% ncol()\n</code></pre> <ul> <li><code>flights</code>: Information on all <code>r flights_rows</code> flights.</li> <li><code>airlines</code>: A table matching airline names and their two-letter International Air Transport Association (IATA) airline codes (also known as carrier codes) for <code>r airlines %&gt;% nrow()</code> airline companies. For example, \"DL\" is the two-letter code for Delta.</li> <li><code>planes</code>: Information about each of the <code>r planes %&gt;% nrow() %&gt;% comma()</code> physical aircraft used.</li> <li><code>weather</code>: Hourly meteorological data for each of the three NYC airports. This data frame has <code>r weather %&gt;% nrow() %&gt;% comma()</code> rows, roughly corresponding to the \\(365 \\times 24 \\times 3 = 26,280\\) possible hourly measurements one can observe at three locations over the course of a year.</li> <li><code>airports</code>: Names, codes, and locations of the <code>r airports %&gt;% nrow() %&gt;% comma()</code> domestic destinations.</li> </ul>"},{"location":"lectures/SIWS/01-getting-started/#flights-data-frame","title":"<code>flights</code> data frame","text":"<p>We'll begin by exploring the <code>flights</code> data frame and get an idea of its structure. Run the following code in your console, either by typing it or by cutting-and-pasting it. It displays the contents of the <code>flights</code> data frame in your console. Note that depending on the size of your monitor, the output may vary slightly. </p> <pre><code>flights\n</code></pre> <p>Let's unpack this output:</p> <ul> <li><code>A tibble: `r flights_rows` x `r flights_cols`</code>: A <code>tibble</code> is a specific kind of data frame in R.\\index{tibble}  This particular data frame has<ul> <li><code>`r flights_rows`</code> rows corresponding to different observations. Here, each observation is a flight.</li> <li><code>`r flights_cols`</code> columns corresponding to <code>r flights_cols</code> variables describing each observation.</li> </ul> </li> <li><code>year</code>, <code>month</code>, <code>day</code>, <code>dep_time</code>, <code>sched_dep_time</code>, <code>dep_delay</code>, and <code>arr_time</code> are the different columns, in other words, the different variables of this dataset.</li> <li>We then have a preview of the first 10 rows of observations corresponding to the first 10 flights. R is only showing the first 10 rows, because if it showed all <code>`r flights_rows`</code> rows, it would overwhelm your screen.</li> <li><code>... with `r (flights %&gt;% nrow() - 10) %&gt;% comma()` more rows, and `r flights_cols - 8` more variables:</code> indicating to us that <code>r (flights %&gt;% nrow() - 10) %&gt;% comma()</code> more rows of data and 11 more variables could not fit in this screen.</li> </ul> <p>Unfortunately, this output does not allow us to explore the data very well, but it does give a nice preview. Let's look at some different ways to explore data frames.</p>"},{"location":"lectures/SIWS/01-getting-started/#exploring-data-frames-exploredataframes","title":"Exploring data frames {#exploredataframes}","text":"<p>There are many ways to get a feel for the data contained in a data frame such as <code>flights</code>. We present three functions that take as their \"argument\" (their input) the data frame in question. We also include a fourth method for exploring one particular column of a data frame:</p> <ol> <li>Using the <code>View()</code> function, which brings up RStudio's built-in data viewer.</li> <li>Using the <code>glimpse()</code> function, which is included in the <code>dplyr</code> package.</li> <li>Using the <code>kable()</code> function, which is included in the <code>knitr</code> package.</li> <li>Using the <code>$</code> \"extraction operator,\" which is used to view a single variable/column in a data frame.</li> </ol> <p>1. <code>View()</code>:</p> <p>Run <code>View(flights)</code> \\index{R packages!utils!View()} in your console in RStudio, either by typing it or cutting-and-pasting it into the console pane. Explore this data frame in the resulting pop up viewer. You should get into the habit of viewing any data frames you encounter. Note the uppercase <code>V</code> in <code>View()</code>. R is case-sensitive, so you'll get an error message if you run <code>view(flights)</code> instead of <code>View(flights)</code>.</p> <p>\\vspace{0.1in}</p> <pre><code>\\vspace{-0.15in}\n**_Learning check_**\n\\vspace{-0.1in}\n</code></pre> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> What does any ONE row in this <code>flights</code> dataset refer to?</p> <ul> <li>A. Data on an airline </li> <li>B. Data on a flight</li> <li>C. Data on an airport</li> <li>D. Data on multiple flights</li> </ul> <pre><code>\\vspace{-0.25in}\n\\vspace{-0.25in}\n</code></pre> <p>\\vspace{0.1in}</p> <p>By running <code>View(flights)</code>, we can explore the different variables listed in the columns. Observe that there are many different types of variables.  Some of the variables like <code>distance</code>, <code>day</code>, and <code>arr_delay</code> are what we will call quantitative variables. \\index{quantitative} These variables are numerical in nature.  Other variables here are \\index{categorical} categorical.</p> <p>Note that if you look in the leftmost column of the <code>View(flights)</code> output, you will see a column of numbers. These are the row numbers of the dataset. If you glance across a row with the same number, say row 5, you can get an idea of what each row is representing. This will allow you to identify what object is being described in a given row by taking note of the values of the columns in that specific row. This is often called the observational unit.\\index{observational unit} The observational unit in this example is an individual flight departing from New York City in 2013. You can identify the observational unit by determining what \"thing\" is being measured or described by each of the variables. We'll talk more about observational units in Subsection \\@ref(identification-vs-measurement-variables) on identification and measurement variables.</p> <p>2. <code>glimpse()</code>:</p> <p>The second way we'll cover to explore a data frame is using the <code>glimpse()</code> function \\index{dplyr!glimpse()} included in the \\index{dplyr|seealso{R packages!dplyr}} <code>dplyr</code> package. Thus, you can only use the <code>glimpse()</code> function after you've loaded the <code>dplyr</code> package by running <code>library(dplyr)</code>. This function provides us with an alternative perspective for exploring a data frame than the <code>View()</code> function:</p> <pre><code>glimpse(flights)\n</code></pre> <p>Observe that <code>glimpse()</code> will give you the first few entries of each variable in a row after the variable name.  In addition, the data type (see Subsection \\@ref(programming-concepts)) of the variable is given immediately after each variable's name inside <code>&lt; &gt;</code>.  Here, <code>int</code> and <code>dbl</code> refer to \"integer\" and \"double\", which are computer coding terminology for quantitative/numerical variables. \"Doubles\" take up twice the size to store on a computer compared to integers. </p> <p>In contrast, <code>chr</code> refers to \"character\", which is computer terminology for text data. In most forms, text data, such as the <code>carrier</code> or <code>origin</code> of a flight, are categorical variables. The <code>time_hour</code> variable is another data type: <code>dttm</code>. These types of variables represent date and time combinations. However, we won't work with dates and times in this book; we leave this topic for other data science books like Introduction to Data Science by Tiffany-Anne Timbers, Melissa Lee, and Trevor Campbell or R for Data Science [@rds2016]. </p> <p>\\vspace*{0.05in}</p> <pre><code>\\vspace{-0.15in}\n**_Learning check_**\n\\vspace{-0.1in}\n</code></pre> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> What are some other examples in this dataset of categorical variables?  What makes them different than quantitative variables?</p> <pre><code>\\vspace{-0.25in}\n\\vspace{-0.25in}\n</code></pre> <p>\\vfill\\smallskip</p> <p>3. <code>kable()</code>:</p> <p>The final way to explore the entirety of a data frame is using the <code>kable()</code> \\index{knitr!kable()} function from the \\index{knitr|seealso{R packages!knitr}} <code>knitr</code> package. Let's explore the different carrier codes for all the airlines in our dataset two ways. Run both of these lines of code in the console:</p> <pre><code>airlines\nkable(airlines)\n</code></pre> <p>At first glance, it may not appear that there is much difference in the outputs. However, when using tools for producing reproducible reports such as R Markdown, the latter code produces output that is much more legible and reader-friendly. You'll see us use this reader-friendly style in many places in the book when we want to print a data frame as a nice table.</p> <p>4. <code>$</code> operator</p> <p>Lastly, the <code>$</code> operator \\index{operators!dollar sign} allows us to extract and then explore a single variable within a data frame. For example, run the following in your console:</p> <pre><code>airlines$name\n</code></pre> <p>We used the <code>$</code> operator to extract only the <code>name</code> variable and return it as a vector of length 16\\index{vectors}. We'll only be occasionally exploring data frames using the <code>$</code> operator, instead favoring the <code>View()</code> and <code>glimpse()</code> functions.</p>"},{"location":"lectures/SIWS/01-getting-started/#identification-and-measurement-variables-identification-vs-measurement-variables","title":"Identification and measurement variables {#identification-vs-measurement-variables}","text":"<p>There is a subtle difference between the kinds of variables that you will encounter in data frames. There are identification variables and measurement variables. For example, let's explore the <code>airports</code> data frame by showing the output of <code>glimpse(airports)</code>:</p> <pre><code>glimpse(airports)\n</code></pre> <p>The variables <code>faa</code> and <code>name</code> are what we will call identification variables, variables that uniquely identify each observational unit. In this case, the identification variables uniquely identify airports. Such variables are mainly used in practice to uniquely identify each row in a data frame. <code>faa</code> gives the unique code provided by the FAA for that airport, while the <code>name</code> variable gives the longer official name of the airport. The remaining variables (<code>lat</code>, <code>lon</code>, <code>alt</code>, <code>tz</code>, <code>dst</code>, <code>tzone</code>) are often called measurement or characteristic variables: variables that describe properties of each observational unit. For example, <code>lat</code> and <code>long</code> describe the latitude and longitude of each airport. </p> <p>Furthermore, sometimes a single variable might not be enough to uniquely identify each observational unit: combinations of variables might be needed. While it is not an absolute rule, for organizational purposes it is considered good practice to have your identification variables in the leftmost columns of your data frame.</p> <pre><code>\\vspace{-0.15in}\n**_Learning check_**\n\\vspace{-0.1in}\n</code></pre> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> What properties of each airport do the variables <code>lat</code>, <code>lon</code>, <code>alt</code>, <code>tz</code>, <code>dst</code>, and <code>tzone</code> describe in the <code>airports</code> data frame? Take your best guess.</p> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> Provide the names of variables in a data frame with at least three variables where one of them is an identification variable and the other two are not. Further, create your own tidy data frame that matches these conditions.</p> <pre><code>\\vspace{-0.25in}\n\\vspace{-0.25in}\n</code></pre>"},{"location":"lectures/SIWS/01-getting-started/#help-files","title":"Help files","text":"<p>Another nice feature of R are help files, which provide documentation for various functions and datasets. You can bring up help files by adding a <code>?</code> \\index{operators!?} before the name of a function or data frame and then run this in the console. You will then be presented with a page showing the corresponding documentation if it exists.  For example, let's look at the help file for the <code>flights</code> data frame.</p> <pre><code>?flights\n</code></pre> <p>The help file should pop up in the Help pane of RStudio. If you have questions about a function or data frame included in an R package, you should get in the habit of consulting the help file right away.</p> <pre><code>\\vspace{-0.15in}\n**_Learning check_**\n\\vspace{-0.1in}\n</code></pre> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> Look at the help file for the <code>airports</code> data frame. Revise your earlier guesses about what the variables <code>lat</code>, <code>lon</code>, <code>alt</code>, <code>tz</code>, <code>dst</code>, and <code>tzone</code> each describe.</p> <pre><code>\\vspace{-0.25in}\n\\vspace{-0.25in}\n</code></pre>"},{"location":"lectures/SIWS/01-getting-started/#conclusion","title":"Conclusion","text":"<p>We've given you what we feel is a minimally viable set of tools to explore data in R. Does this chapter contain everything you need to know? Absolutely not. To try to include everything in this chapter would make the chapter so large it wouldn't be useful! As we said earlier, the best way to add to your toolbox is to get into RStudio and run and write code as much as possible.</p>"},{"location":"lectures/SIWS/01-getting-started/#additional-resources","title":"Additional resources","text":"<pre><code>if (is_latex_output()) {\n  cat(\"Solutions to all *Learning checks* can be found online in [Appendix D](https://moderndive.com/D-appendixD.html).\")\n}\n</code></pre> <p>If you are new to the world of coding, R, and RStudio and feel you could benefit from a more detailed introduction, we suggest you check out the short book, Getting Used to R, RStudio, and R Markdown [@usedtor2016]. It includes screencast recordings that you can follow along and pause as you learn. This book also contains an introduction to R Markdown, a tool used for reproducible research in R.</p> <p>(ref:ismay-book) Preview of Getting Used to R, RStudio, and R Markdown.</p> <pre><code>include_graphics(\"images/copyright/getting-used-to-R.png\")\n</code></pre>"},{"location":"lectures/SIWS/01-getting-started/#whats-to-come","title":"What's to come?","text":"<p>We're now going to start the \"Data Science with <code>tidyverse</code>\" portion of this book in Chapter \\@ref(viz) as shown in Figure \\@ref(fig:moderndive-flowchart) with what we feel is the most important tool in a data scientist's toolbox: data visualization. We'll continue to explore the data included in the <code>moderndive</code> and <code>nycflights13</code> packages using the <code>ggplot2</code> package for data visualization. You'll see that data visualization is a powerful tool to add to your toolbox for data exploration that provides additional insight to what the <code>View()</code> and <code>glimpse()</code> functions can provide. </p> <p>(ref:flowchart2) ModernDive flowchart - on to Part I!</p> <pre><code>include_graphics(\"images/flowcharts/flowchart/flowchart.004.png\")\n</code></pre>"},{"location":"lectures/SP/","title":"Index","text":""},{"location":"lectures/SP/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul> \\[ f(x) = \\int_{-\\infty}^\\infty     \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}     \\,d\\xi \\] <p>inline tex codes \\(E=mc^2\\).</p> \\[ \\cos x=\\sum_{k=0}^{\\infty}\\frac{(-1)^k}{(2k)!}x^{2k} \\]"},{"location":"research/","title":"Index","text":""},{"location":"research/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul> \\[ f(x) = \\int_{-\\infty}^\\infty     \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}     \\,d\\xi \\] <p>inline tex codes \\(E=mc^2\\).</p> \\[ \\cos x=\\sum_{k=0}^{\\infty}\\frac{(-1)^k}{(2k)!}x^{2k} \\]"}]}