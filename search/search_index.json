{"config":{"lang":["ja"],"separator":"[\\s\\-\u3000\u3001\u3002\uff0c\uff0e]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Welcome to Statistical Learning Laboratory","text":"<p>My name is Tomoshige Nakamura. I am an Assistant Professor in the Department of Health Data Science at Juntendo University. I received my Ph.D. in Engineering from the Keio University in Feb, 2021. I am very fortunate to be supervised by Professor Mihoko Minami. I am also very fortunate to work with Professor Hiroshi Shiraishi on random forest research.</p>"},{"location":"#contact","title":"Contact","text":"<ul> <li>Address : 6-8-1, Hinode, Urayasu Shi, Chiba Prefecture, 279-0013, Japan</li> <li>Email : t.nakamura.gs[at]juntendo.ac.jp</li> </ul>"},{"location":"#research-interest","title":"Research Interest","text":"<p>My research focuses on elucidating the properties of tree-structured models, such as decision trees and regression trees, and developing novel variants of these models. Tree-structured models have a unique advantage in that a single tree can effectively compress and visualize data, while an ensemble of multiple trees (e.g., random forests) can attain high predictive accuracy. Moreover, these models accommodate continuous, categorical, and discrete variables in a unified manner, making them both versatile and practical. It is no surprise, therefore, that tree-based methods consistently appear among the top-performing approaches in competitive data analytics venues such as Kaggle.</p> <p>Recent theoretical advances have shed light on the statistical properties of tree-structured models, pointing to continued improvements in their performance and interpretability. For example, new modeling techniques, such as recursive partitioning models, Isolation Forests for anomaly detection, and causal trees and forests for causal inference, highlight the growing versatility of tree-structured approaches. These models also provide a straightforward measure of variable importance, enabling analysts and domain experts to interpret how different predictors contribute to the final outcome.</p> <p>In my work, I aim to develop new tree architectures that not only preserve high predictive accuracy but also support more complex background information. By integrating hierarchical Bayesian models, it becomes possible to combine rich contextual details\u2014such as multi-level factors or nested data structures\u2014while maintaining strong predictive capabilities. This fusion of tree-based learning and hierarchical modeling is especially promising for tackling challenging research questions that require both flexibility and interpretability.</p> <p>Beyond conventional domains, tree-structured models show great potential in health and medical applications. For instance, the interpretability offered by these models can help medical professionals identify critical risk factors and intervene more effectively. Their ability to deal with heterogeneous data types\u2014ranging from imaging features to genomic markers\u2014makes them well suited for integrative analyses in personalized medicine and other emerging areas. Although this is a challenging field due to the complexity and sensitivity of medical data, the ongoing convergence of statistical theory, machine learning, and healthcare innovation offers immense opportunities to push these models into clinical practice.</p> <p>By advancing the theoretical and practical foundations of tree-structured models, my research strives to illuminate new frontiers in data-driven decision making. From competitive data analytics to healthcare, these models hold promise for more interpretable, accurate, and robust solutions in a wide range of applications. It is my goal to continue exploring these possibilities, driving tree-based methods into even more challenging and impactful domains.</p>"},{"location":"#lectures","title":"Lectures","text":"<p>I teach courses in Linear Algebra, Probability and Statistics, Practical Machine Learning, and Practical Artificial Intelligence. Each course is designed to build a solid foundation for understanding and applying data science concepts. For further details, please visit the Lectures page.</p>"},{"location":"#links","title":"Links","text":"<ul> <li>Department of Health Data Science, Juntendo University</li> <li>Stat Lab, Department of Mathematics, Keio Universiry</li> </ul>"},{"location":"lectures/","title":"Lecture","text":"<p>\u62c5\u5f53\u3057\u3066\u3044\u308b\u8b1b\u7fa9\u306e\u30da\u30fc\u30b8\u3067\u3059\u3002</p>"},{"location":"lectures/#i-ii","title":"\u7dda\u5f62\u4ee3\u6570\u5b66I / \u57fa\u790e / II","text":"<p>\u672c\u8b1b\u7fa9\u3067\u306f\u3001\u7dda\u5f62\u4ee3\u6570\u5b66\u306e\u57fa\u672c\u6982\u5ff5\u3068\u305d\u306e\u5fdc\u7528\u306b\u3064\u3044\u3066\u5b66\u3073\u307e\u3059\u3002\u7dda\u5f62\u4ee3\u6570\u5b66\u306f\u3001\u6570\u5b66\u3001\u7269\u7406\u5b66\u3001\u5de5\u5b66\u3001\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u306a\u3069\u591a\u304f\u306e\u5206\u91ce\u3067\u91cd\u8981\u306a\u5f79\u5272\u3092\u679c\u305f\u3057\u307e\u3059\u3002\u672c\u8b1b\u7fa9\u3092\u901a\u3058\u3066\u3001\u30d9\u30af\u30c8\u30eb\u3001\u884c\u5217\u3001\u9023\u7acb\u65b9\u7a0b\u5f0f\u3001\u884c\u5217\u5f0f\u3001\u7dda\u5f62\u7a7a\u9593\u3001\u7dda\u5f62\u5199\u50cf\u3001\u56fa\u6709\u5024\u3068\u56fa\u6709\u30d9\u30af\u30c8\u30eb\u306a\u3069\u306e\u57fa\u672c\u7684\u306a\u6982\u5ff5\u3092\u7406\u89e3\u3059\u308b\u3053\u3068\u3092\u76ee\u6307\u3057\u307e\u3059\u3002Lecture page</p>"},{"location":"lectures/#_1","title":"\u6570\u7406\u60c5\u5831\u30ea\u30c6\u30e9\u30b7\u30fc","text":"<p>\u672c\u8b1b\u7fa9\u306f\u3001\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u306e\u57fa\u790e\u3092\u5b66\u3076\u3053\u3068\u3092\u76ee\u7684\u3068\u3057\u3001\u6570\u5b66\uff08\u4ee3\u6570\u3084\u5fae\u7a4d\u5206\uff09\u3084\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u4e8b\u524d\u77e5\u8b58\u3092\u5fc5\u8981\u3068\u3057\u307e\u305b\u3093\u3002\u672c\u8b1b\u7fa9\u3067\u306f\u3001\u30c7\u30fc\u30bf\u306e\u5206\u6790\u3084\u53ef\u8996\u5316\u3001\u7d71\u8a08\u30e2\u30c7\u30eb\u306e\u69cb\u7bc9\u3001\u7d71\u8a08\u7684\u63a8\u8ad6\u3092\u5b9f\u8df5\u3057\u306a\u304c\u3089\u5b66\u3073\u307e\u3059\u3002\u4f7f\u7528\u3059\u308b\u74b0\u5883\u306f\u3001Google Colab + \u5185\u8535\u3055\u308c\u3066\u3044\u308b\u751f\u6210AI\u3092\u7528\u3044\u307e\u3059\u3002\u4f7f\u7528\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306f Python \u3067\u3042\u308a\u3001\u7279\u306b pandas \u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u6d3b\u7528\u3057\u3066\u30c7\u30fc\u30bf\u5206\u6790\u3092\u884c\u3044\u307e\u3059\u3002Lecture page</p>"},{"location":"lectures/#i-ii_1","title":"\u78ba\u7387\u3068\u7d71\u8a08I / II","text":"<p>\u672c\u8b1b\u7fa9\u306f\u3001\u78ba\u7387\u3068\u7d71\u8a08 I \u306e\u7d9a\u7de8\u3068\u3057\u3066\u3001\u78ba\u7387\u3068\u7d71\u8a08 II \u3067\u306f\u3001\u6570\u5b66\u7d71\u8a08\u5b66\u306e\u91cd\u8981\u306a\u6982\u5ff5\u3092\u5b66\u3076\u3053\u3068\u3092\u76ee\u7684\u3068\u3057\u307e\u3059\u3002\u672c\u8b1b\u7fa9\u3067\u306f\u3001\u78ba\u7387\u5909\u6570\u306e\u95a2\u6570\u3068\u3057\u3066\u306e\u63a8\u5b9a\u91cf\u3001\u6a19\u672c\u5206\u5e03\u3001\u63a8\u5b9a\u7406\u8ad6\u3001\u304a\u3088\u3073\u63a8\u5b9a\u91cf\u306e\u6027\u8cea\u306b\u95a2\u3059\u308b\u7406\u8ad6\u3068\u5fdc\u7528\u3092\u53d6\u308a\u6271\u3044\u307e\u3059\u3002\u8b1b\u7fa9\u3067\u306f\u7dda\u5f62\u4ee3\u6570\u304a\u3088\u3073\u5fae\u7a4d\u5206\u3092\u6d3b\u7528\u3057\u3066\u7406\u8ad6\u7684\u306a\u7d50\u679c\u3092\u5c0e\u304d\u51fa\u3057\u3001\u305d\u308c\u3089\u3092\u5b9f\u969b\u306e\u554f\u984c\u306b\u9069\u7528\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002Lecture page</p>"},{"location":"lectures/LA/","title":"Index","text":""},{"location":"lectures/LA/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul> \\[ f(x) = \\int_{-\\infty}^\\infty     \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}     \\,d\\xi \\] <p>inline tex codes \\(E=mc^2\\).</p> \\[ \\cos x=\\sum_{k=0}^{\\infty}\\frac{(-1)^k}{(2k)!}x^{2k} \\]"},{"location":"lectures/LA/00-vector-and-matrix/","title":"Prefare","text":"<p>aaaa</p>"},{"location":"lectures/LA/00-vector-and-matrix/#vectors","title":"Vectors","text":"<p>\\(a\\)\u3092\u30d9\u30af\u30c8\u30eb\u3068\u3059\u308b\u3002</p>"},{"location":"lectures/LA/00-vector-and-matrix/#matrix","title":"Matrix","text":""},{"location":"lectures/SIWS/","title":"Index","text":""},{"location":"lectures/SIWS/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul> \\[ f(x) = \\int_{-\\infty}^\\infty     \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}     \\,d\\xi \\] <p>inline tex codes \\(E=mc^2\\).</p> \\[ \\cos x=\\sum_{k=0}^{\\infty}\\frac{(-1)^k}{(2k)!}x^{2k} \\]"},{"location":"lectures/SIWS/01-getting-started/","title":"Python\u3067\u306e\u30c7\u30fc\u30bf\u5206\u6790\u3092\u59cb\u3081\u3088\u3046","text":"<p>Python\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u3092\u63a2\u7d22\u3059\u308b\u524d\u306b\u3001\u307e\u305a\u7406\u89e3\u3057\u3066\u304a\u304f\u3079\u304d\u91cd\u8981\u306a\u6982\u5ff5\u304c\u3042\u308a\u307e\u3059\u3002</p> <ol> <li>Python\u3068Google Colaboratory\u3068\u306f\u4f55\u304b\uff1f</li> <li>Python\u306e\u30b3\u30fc\u30c9\u306e\u66f8\u304d\u65b9</li> <li>Python\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u306f\uff1f</li> </ol> <p>\u3053\u308c\u3089\u306e\u6982\u5ff5\u306b\u3064\u3044\u3066\u3001\u6b21\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u8a73\u3057\u304f\u8aac\u660e\u3057\u307e\u3059\uff08\u30bb\u30af\u30b7\u30e7\u30f3aaa\uff09\u3002\u3059\u3067\u306b\u3042\u308b\u7a0b\u5ea6\u306e\u77e5\u8b58\u304c\u3042\u308b\u5834\u5408\u306f\u3001\u30bb\u30af\u30b7\u30e7\u30f3aaa \u306b\u9032\u3093\u3067\u3001\u6700\u521d\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u7d39\u4ecb\u3059\u308b\u90e8\u5206\u304b\u3089\u8aad\u307f\u59cb\u3081\u3066\u3082\u69cb\u3044\u307e\u305b\u3093\u3002\u672c\u66f8\u3067\u306f\u30012013\u5e74\u306b\u30cb\u30e5\u30fc\u30e8\u30fc\u30af\u5e02\uff08NYC\uff09\u306e\u4e3b\u89813\u7a7a\u6e2f\u304b\u3089\u51fa\u767a\u3057\u305f\u3059\u3079\u3066\u306e\u56fd\u5185\u7dda\u30d5\u30e9\u30a4\u30c8\u306e\u30c7\u30fc\u30bf \u3092\u6271\u3044\u3001\u4ee5\u964d\u306e\u7ae0\u3067\u8a73\u3057\u304f\u5206\u6790\u3057\u3066\u3044\u304d\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/01-getting-started/#python-google-colaboratory","title":"Python \u3068 Google Colaboratory\u3068\u306f\uff1f","text":"<p>\u672c\u66f8\u3067\u306f\u3001Python\u3092Google Colaboratory\uff08\u4ee5\u4e0b\u3001Google Colab\uff09 \u3092\u901a\u3058\u3066\u4f7f\u7528\u3059\u308b\u3053\u3068\u3092\u524d\u63d0\u3068\u3057\u307e\u3059\u3002\u521d\u3081\u3066\u306e\u65b9\u306e\u4e2d\u306b\u306f\u3001Python\u3068Google Colab\u306e\u9055\u3044\u304c\u308f\u304b\u308a\u306b\u304f\u3044\u3068\u611f\u3058\u308b\u3053\u3068\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u3053\u308c\u3092\u308f\u304b\u308a\u3084\u3059\u304f\u8aac\u660e\u3059\u308b\u3068\u3001Python\u306f\u8eca\u306e\u30a8\u30f3\u30b8\u30f3\u3001Google Colab\u306f\u8eca\u306e\u30c0\u30c3\u30b7\u30e5\u30dc\u30fc\u30c9 \u306e\u3088\u3046\u306a\u95a2\u4fc2\u306b\u3042\u308a\u307e\u3059\uff08\u56f3\u3092\u53c2\u7167\uff09\u3002</p> <p>Note</p> <p>\u3053\u3053\u306b\u30a4\u30e1\u30fc\u30b8\u56f3\u3092\u633f\u5165</p> <p>\u3082\u3046\u5c11\u3057\u8a73\u3057\u304f\u8aac\u660e\u3059\u308b\u3068\u3001Python\u306f\u8a08\u7b97\u3092\u5b9f\u884c\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e \u3067\u3042\u308a\u3001\u4e00\u65b9\u3067Google Colab\u306f\u3001Google\u793e\u304c\u63d0\u4f9b\u3059\u308b\u6a5f\u68b0\u5b66\u7fd2\u5411\u3051\u306e\u7d71\u5408\u958b\u767a\u74b0\u5883\uff08IDE\uff09 \u3067\u3059\u3002Google Colab\u306b\u306f\u3001Python\u3092\u4fbf\u5229\u306b\u4f7f\u3046\u305f\u3081\u306e\u3055\u307e\u3056\u307e\u306a\u6a5f\u80fd\u3084\u30c4\u30fc\u30eb\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3044\u307e\u3059\u3002</p> <p>\u3053\u308c\u306f\u3001\u904b\u8ee2\u3059\u308b\u3068\u304d\u306b\u30b9\u30d4\u30fc\u30c9\u30e1\u30fc\u30bf\u30fc\u3084\u30d0\u30c3\u30af\u30df\u30e9\u30fc\u3001\u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30b7\u30b9\u30c6\u30e0\u304c\u3042\u308b\u3053\u3068\u3067\u5b89\u5168\u304b\u3064\u30b9\u30e0\u30fc\u30ba\u306b\u904b\u8ee2\u3067\u304d\u308b\u306e\u3068\u540c\u3058\u3088\u3046\u306b\u3001Google Colab\u3092\u4f7f\u3046\u3053\u3068\u3067Python\u3092\u3088\u308a\u76f4\u611f\u7684\u304b\u3064\u52b9\u7387\u7684\u306b\u64cd\u4f5c\u3067\u304d\u308b \u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002</p>"},{"location":"lectures/SIWS/01-getting-started/#google-colaboratory-python","title":"Google Colaboratory \u3067 Python \u3092\u59cb\u3081\u308b","text":"<p>Google Colaboratory\uff08Google Colab\uff09 \u306f\u3001Google \u304c\u63d0\u4f9b\u3059\u308b\u7121\u6599\u306e\u30af\u30e9\u30a6\u30c9\u74b0\u5883\u3067\u3001Python \u3092\u30d6\u30e9\u30a6\u30b6\u4e0a\u3067\u5b9f\u884c\u3067\u304d\u308b\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u3059\u3002\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u4e0d\u8981\u3067\u4f7f\u3048\u308b\u305f\u3081\u3001\u521d\u5fc3\u8005\u3067\u3082\u7c21\u5358\u306b Python \u3092\u59cb\u3081\u3089\u308c\u307e\u3059\u3002</p> <ol> <li>Google Colab \u3092\u4f7f\u3046\u6e96\u5099</li> </ol> <p>Google Colab \u3092\u4f7f\u7528\u3059\u308b\u306b\u306f\u3001Google \u30a2\u30ab\u30a6\u30f3\u30c8\u304c\u5fc5\u8981\u3067\u3059\u3002\u4ee5\u4e0b\u306e\u624b\u9806\u306b\u5f93\u3063\u3066\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3092\u884c\u3044\u307e\u3057\u3087\u3046\u3002</p> <ol> <li> <p>Google Colab \u306b\u30a2\u30af\u30bb\u30b9</p> </li> <li> <p>Google Colaboratory \u306b\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\u3002</p> </li> <li> <p>Google \u30a2\u30ab\u30a6\u30f3\u30c8\u3067\u30ed\u30b0\u30a4\u30f3\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u65b0\u3057\u3044\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u3092\u4f5c\u6210</p> </li> <li> <p>Google Colab \u306e\u30db\u30fc\u30e0\u753b\u9762\u3067 \u300c\u65b0\u3057\u3044\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u300d \u3092\u30af\u30ea\u30c3\u30af\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u65b0\u3057\u3044 Python \u306e Jupyter Notebook \u304c\u958b\u304d\u307e\u3059\u3002</p> </li> <li> <p>\u7c21\u5358\u306a Python \u30b3\u30fc\u30c9\u3092\u5b9f\u884c</p> </li> <li> <p>\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u306e\u30bb\u30eb\u306b\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5165\u529b\u3057\u307e\u3059\uff1a   <code>python   print(\"Hello, Google Colab!\")</code></p> </li> <li>Shift + Enter \u3092\u62bc\u3059\u304b\u3001\u30bb\u30eb\u306e\u5de6\u5074\u306b\u3042\u308b\u518d\u751f\u30dc\u30bf\u30f3 \u25b6 \u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u5b9f\u884c\u3057\u307e\u3059\u3002</li> <li>\u51fa\u529b\u3068\u3057\u3066 <code>Hello, Google Colab!</code> \u3068\u8868\u793a\u3055\u308c\u308c\u3070\u6210\u529f\u3067\u3059\u3002</li> </ol>"},{"location":"lectures/SIWS/01-getting-started/#google-colaboratory-python_1","title":"Google Colaboratory \u3067 Python \u3092\u4f7f\u3046","text":"<p>\u4ee5\u524d\u306e\u8eca\u306e\u30a2\u30ca\u30ed\u30b8\u30fc\u3092\u601d\u3044\u51fa\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u79c1\u305f\u3061\u306f\u30a8\u30f3\u30b8\u30f3\u3092\u76f4\u63a5\u64cd\u4f5c\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u30c0\u30c3\u30b7\u30e5\u30dc\u30fc\u30c9\u4e0a\u306e\u8981\u7d20\u3092\u4f7f\u3063\u3066\u8eca\u3092\u904b\u8ee2\u3057\u307e\u3059\u3002\u540c\u69d8\u306b\u3001Python \u3092\u76f4\u63a5\u64cd\u4f5c\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001Google Colaboratory\uff08Google Colab\uff09 \u3092\u4f7f\u7528\u3057\u3066 Python \u3092\u5b9f\u884c\u3057\u307e\u3059\u3002</p> <p>Google Colab \u306f\u3001Google \u304c\u63d0\u4f9b\u3059\u308b\u30af\u30e9\u30a6\u30c9\u30d9\u30fc\u30b9\u306e Jupyter Notebook \u74b0\u5883\u3067\u3059\u3002\u3053\u308c\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3001Python \u306e\u74b0\u5883\u69cb\u7bc9\u3092\u884c\u3046\u3053\u3068\u306a\u304f\u3001\u30d6\u30e9\u30a6\u30b6\u4e0a\u3067\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u3001\u5b9f\u884c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <p>Google Colab \u3092\u958b\u304f\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002</p> <p>Note</p> <p>\u3053\u3053\u306b Google Colab \u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u753b\u50cf\u3092\u633f\u5165</p> <p>Google Colab \u306e\u753b\u9762\u306f\u3001\u5927\u304d\u304f\u5206\u3051\u3066 3 \u3064\u306e\u90e8\u5206\u306b\u5206\u304b\u308c\u3066\u3044\u307e\u3059\u3002</p> <ol> <li>\u30b3\u30fc\u30c9\u30bb\u30eb: \u3053\u3053\u306b Python \u30b3\u30fc\u30c9\u3092\u8a18\u8ff0\u3057\u3001\u5b9f\u884c\u3057\u307e\u3059\u3002</li> <li>\u51fa\u529b\u30a8\u30ea\u30a2: \u30b3\u30fc\u30c9\u306e\u5b9f\u884c\u7d50\u679c\u304c\u8868\u793a\u3055\u308c\u308b\u5834\u6240\u3067\u3059\u3002</li> <li>\u30d5\u30a1\u30a4\u30eb\u7ba1\u7406\u30a8\u30ea\u30a2: Google \u30c9\u30e9\u30a4\u30d6\u3084\u30ed\u30fc\u30ab\u30eb\u30d5\u30a1\u30a4\u30eb\u3092\u7ba1\u7406\u3067\u304d\u307e\u3059\u3002</li> </ol>"},{"location":"lectures/SIWS/01-getting-started/#python_1","title":"Python \u306e\u57fa\u672c\u7684\u306a\u66f8\u304d\u65b9","text":"<p>Python \u3092\u4f7f\u3044\u59cb\u3081\u308b\u3068\u3001\u300cPython \u306f\u3069\u3046\u3084\u3063\u3066\u4f7f\u3046\u306e\uff1f\u300d\u3068\u3044\u3046\u7591\u554f\u304c\u6d6e\u304b\u3076\u3067\u3057\u3087\u3046\u3002Python \u306f \u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u578b\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e \u3067\u3042\u308a\u3001Excel \u3084 SPSS \u306e\u3088\u3046\u306a \u30dd\u30a4\u30f3\u30c8 &amp; \u30af\u30ea\u30c3\u30af \u64cd\u4f5c\u3067\u306f\u306a\u304f\u3001\u30b3\u30fc\u30c9\u3092\u5165\u529b\u3057\u3066\u5b9f\u884c\u3059\u308b \u3053\u3068\u3067\u52d5\u4f5c\u3057\u307e\u3059\u3002</p> <p>Python \u3092\u4f7f\u3046\u306b\u306f\u3001\u57fa\u672c\u7684\u306a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u6982\u5ff5\u3092\u7406\u89e3\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u672c\u66f8\u306f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306b\u7279\u5316\u3057\u305f\u66f8\u7c4d\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u30c7\u30fc\u30bf\u3092\u63a2\u7d22\u30fb\u5206\u6790\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u6700\u4f4e\u9650\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u77e5\u8b58\u3092\u5b66\u3093\u3067\u3044\u304d\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/01-getting-started/#_1","title":"\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u57fa\u790e\u3068\u6982\u5ff5","text":"<p>\u57fa\u672c\u7684\u306a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u6982\u5ff5\u3068\u7528\u8a9e\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\u3059\u3079\u3066\u3092\u6697\u8a18\u3059\u308b\u5fc5\u8981\u306f\u306a\u304f\u3001\u300c\u5b9f\u969b\u306b\u3084\u308a\u306a\u304c\u3089\u5b66\u3076\u300d\u3053\u3068\u3092\u76ee\u6307\u3057\u307e\u3059\u3002\u3053\u306e\u30ac\u30a4\u30c9\u3067\u306f\u3001\u901a\u5e38\u306e\u6587\u7ae0\u3068 <code>computer_code</code> \u3092\u533a\u5225\u3059\u308b\u305f\u3081\u306b\u7570\u306a\u308b\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002</p> <p>\u5b66\u7fd2\u3092\u9032\u3081\u308b\u4e0a\u3067\u3001Python \u3068 Google Colaboratory \u3092\u6d3b\u7528\u3057\u306a\u304c\u3089\u3001\u7e70\u308a\u8fd4\u3057\u7df4\u7fd2\u3059\u308b\u3053\u3068\u304c\u91cd\u8981\u3067\u3059\u3002</p>"},{"location":"lectures/SIWS/01-getting-started/#_2","title":"\u57fa\u672c\u6982\u5ff5","text":"<ul> <li>\u30b3\u30fc\u30c9\u30bb\u30eb (Code Cell): Google Colaboratory \u3067\u30b3\u30fc\u30c9\u3092\u5165\u529b\u3057\u3001\u5b9f\u884c\u3059\u308b\u5834\u6240\u3002</li> <li>\u30b3\u30fc\u30c9\u306e\u5b9f\u884c: Python \u306b\u547d\u4ee4\u3092\u4e0e\u3048\u3001\u5b9f\u969b\u306b\u51e6\u7406\u3092\u884c\u308f\u305b\u308b\u3053\u3068\u3002</li> <li>\u5909\u6570 (Variables): \u5024\u3092\u4fdd\u5b58\u3059\u308b\u305f\u3081\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3002\u5909\u6570\u306b\u5024\u3092 \u4ee3\u5165 \u3057\u3001\u305d\u306e\u5185\u5bb9\u3092\u8868\u793a\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002</li> <li>\u30c7\u30fc\u30bf\u578b (Data Types): <code>int</code> (\u6574\u6570), <code>float</code> (\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570), <code>bool</code> (\u8ad6\u7406\u578b), <code>str</code> (\u6587\u5b57\u5217) \u306a\u3069\u3002</li> <li>\u6574\u6570 (<code>int</code>): <code>-1, 0, 2, 4092</code> \u306a\u3069\u3002</li> <li>\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570 (<code>float</code>): <code>-24.932, 0.8</code> \u306a\u3069\u3002</li> <li>\u8ad6\u7406\u578b (<code>bool</code>): <code>True</code> \u307e\u305f\u306f <code>False</code>\u3002</li> <li>\u6587\u5b57\u5217 (<code>str</code>): <code>\"cabbage\"</code>, <code>\"Hamilton\"</code>, <code>\"This ramen is delicious.\"</code> \u306a\u3069\u3002</li> </ul>"},{"location":"lectures/SIWS/01-getting-started/#list","title":"\u30ea\u30b9\u30c8 (List)","text":"<p>\u8907\u6570\u306e\u5024\u3092\u307e\u3068\u3081\u305f\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u3001<code>[]</code> \u3092\u4f7f\u3063\u3066\u4f5c\u6210\u3057\u307e\u3059\u3002</p> <pre><code>numbers = [6, 11, 13, 31, 90, 92]\n</code></pre>"},{"location":"lectures/SIWS/01-getting-started/#dataframe","title":"\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0 (DataFrame)","text":"<p>\u8868\u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u3042\u308a\u3001<code>pandas</code> \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3057\u3066\u4f5c\u6210\u3057\u307e\u3059\u3002</p> <pre><code>import pandas as pd\n\ndata = {'Name': ['Alice', 'Bob', 'Charlie'],\n        'Age': [25, 30, 35],\n        'City': ['New York', 'Los Angeles', 'Chicago']}\ndf = pd.DataFrame(data)\nprint(df)\n</code></pre>"},{"location":"lectures/SIWS/01-getting-started/#conditionals","title":"\u6761\u4ef6\u5206\u5c90 (Conditionals)","text":"<ul> <li><code>==</code> \u3092\u4f7f\u3063\u3066\u7b49\u4fa1\u6027\u3092\u6bd4\u8f03 (<code>=</code> \u306f\u4ee3\u5165\u306e\u305f\u3081\u306b\u4f7f\u7528)\u3002   <code>python   print(2 + 1 == 3)  # True</code></li> <li>\u30d6\u30fc\u30eb\u6f14\u7b97: <code>True</code> / <code>False</code> \u306e\u8a55\u4fa1\u3002   <code>python   print(4 + 2 &gt;= 3)  # True   print(3 + 5 &lt;= 1)  # False</code></li> <li>\u8ad6\u7406\u6f14\u7b97\u5b50: <code>and</code> (\u304b\u3064), <code>or</code> (\u307e\u305f\u306f)\u3002   <code>python   print((2 + 1 == 3) and (2 + 1 == 4))  # False   print((2 + 1 == 3) or (2 + 1 == 4))   # True</code></li> </ul>"},{"location":"lectures/SIWS/01-getting-started/#functions","title":"\u95a2\u6570 (Functions)","text":"<p>\u95a2\u6570\u306f\u7279\u5b9a\u306e\u30bf\u30b9\u30af\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002Python \u3067\u306f <code>def</code> \u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u4f7f\u7528\u3057\u3066\u95a2\u6570\u3092\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002</p> <pre><code>def greet(name):\n    return f\"Hello, {name}!\"\n\nprint(greet(\"Alice\"))\n</code></pre> <p>\u307e\u305f\u3001\u7d44\u307f\u8fbc\u307f\u95a2\u6570\u306e <code>range()</code> \u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u6570\u5024\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002</p> <pre><code>list(range(2, 6))  # [2, 3, 4, 5]\n</code></pre>"},{"location":"lectures/SIWS/01-getting-started/#messages","title":"\u30a8\u30e9\u30fc\u3001\u8b66\u544a\u3001\u30e1\u30c3\u30bb\u30fc\u30b8 {#messages}","text":"<p>Google Colaboratory \u3067 Python \u3092\u4f7f\u3046\u969b\u3001\u30a8\u30e9\u30fc\u3001\u8b66\u544a\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8868\u793a\u3055\u308c\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3089\u306f\u8d64\u5b57\u3067\u8868\u793a\u3055\u308c\u308b\u305f\u3081\u3001\u6700\u521d\u306f\u6238\u60d1\u3046\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u51b7\u9759\u306b\u5bfe\u5fdc\u3059\u308c\u3070\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3002</p> <p>Python \u3067\u8868\u793a\u3055\u308c\u308b\u8d64\u5b57\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u306b\u306f\u4ee5\u4e0b\u306e\u7a2e\u985e\u304c\u3042\u308a\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/01-getting-started/#errors","title":"\u30a8\u30e9\u30fc (Errors)","text":"<p>\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u6b63\u5e38\u306b\u52d5\u4f5c\u3057\u306a\u3044\u5834\u5408\u306b\u767a\u751f\u3057\u3001\u30b3\u30fc\u30c9\u306e\u5b9f\u884c\u304c\u505c\u6b62\u3057\u307e\u3059\u3002</p> <pre><code>print(1 / 0)  # ZeroDivisionError: division by zero\n</code></pre> <p>\u3053\u306e\u5834\u5408\u3001<code>0</code> \u3067\u306e\u5272\u308a\u7b97\u304c\u8a31\u53ef\u3055\u308c\u3066\u3044\u306a\u3044\u305f\u3081\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/01-getting-started/#warnings","title":"\u8b66\u544a (Warnings)","text":"<p>\u30b3\u30fc\u30c9\u306e\u5b9f\u884c\u306f\u7d99\u7d9a\u3067\u304d\u308b\u3082\u306e\u306e\u3001\u6ce8\u610f\u3059\u3079\u304d\u3053\u3068\u304c\u3042\u308b\u5834\u5408\u306b\u8868\u793a\u3055\u308c\u307e\u3059\u3002</p> <pre><code>import warnings\nwarnings.warn(\"This is a warning message!\")\n</code></pre>"},{"location":"lectures/SIWS/01-getting-started/#messages_1","title":"\u30e1\u30c3\u30bb\u30fc\u30b8 (Messages)","text":"<p>\u901a\u5e38\u306e\u8a3a\u65ad\u60c5\u5831\u3084\u51e6\u7406\u7d50\u679c\u304c\u8868\u793a\u3055\u308c\u308b\u5834\u5408\u3002</p> <pre><code>print(\"Data loaded successfully!\")\n</code></pre> <p>\u30a8\u30e9\u30fc\u3084\u8b66\u544a\u304c\u8868\u793a\u3055\u308c\u3066\u3082\u7126\u3089\u305a\u3001</p> <ul> <li>\u30a8\u30e9\u30fc: \u30b3\u30fc\u30c9\u304c\u5b9f\u884c\u3067\u304d\u306a\u3044\u306e\u3067\u4fee\u6b63\u304c\u5fc5\u8981 \u2192 \u8d64\u4fe1\u53f7: \u505c\u6b62\u3057\u3066\u554f\u984c\u3092\u78ba\u8a8d</li> <li>\u8b66\u544a: \u5b9f\u884c\u3067\u304d\u308b\u304c\u6ce8\u610f\u304c\u5fc5\u8981 \u2192 \u9ec4\u8272\u4fe1\u53f7: \u6ce8\u610f\u3057\u306a\u304c\u3089\u9032\u884c</li> <li>\u30e1\u30c3\u30bb\u30fc\u30b8: \u5358\u306a\u308b\u60c5\u5831\u63d0\u4f9b \u2192 \u7dd1\u4fe1\u53f7: \u554f\u984c\u306a\u3057</li> </ul> <p>\u3068\u8003\u3048\u308b\u3068\u3088\u3044\u3067\u3057\u3087\u3046\u3002</p> <p>Python \u3068 Google Colaboratory \u3092\u6d3b\u7528\u3057\u306a\u304c\u3089\u3001\u7e70\u308a\u8fd4\u3057\u7df4\u7fd2\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"lectures/SIWS/01-getting-started/#_3","title":"\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u5b66\u3076\u4e0a\u3067\u306e\u5fc3\u5f97","text":"<p>\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u5b66\u3076\u3053\u3068\u306f\u3001\u5916\u56fd\u8a9e\u3092\u5b66\u3076\u3053\u3068\u306b\u4f3c\u3066\u3044\u307e\u3059\u3002\u6700\u521d\u306f\u96e3\u3057\u304f\u3001\u632b\u6298\u3059\u308b\u3053\u3068\u3082\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u3057\u304b\u3057\u3001\u9593\u9055\u3044\u3092\u6050\u308c\u305a\u306b\u52aa\u529b\u3092\u7d9a\u3051\u308c\u3070\u3001\u8ab0\u3067\u3082\u5b66\u3073\u3001\u4e0a\u9054\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u5b66\u3076\u969b\u306b\u5f79\u7acb\u3064\u3044\u304f\u3064\u304b\u306e\u30dd\u30a4\u30f3\u30c8\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002</p> <ul> <li> <p>\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306f\u5b9f\u306f\u305d\u308c\u307b\u3069\u8ce2\u304f\u306a\u3044: \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u3084\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u306f\u300c\u8ce2\u3044\u300d\u3068\u601d\u308f\u308c\u304c\u3061\u3067\u3059\u304c\u3001\u305d\u308c\u306f\u4eba\u9593\u304c\u591a\u304f\u306e\u6642\u9593\u3068\u30a8\u30cd\u30eb\u30ae\u30fc\u3092\u8cbb\u3084\u3057\u3066\u8a2d\u8a08\u3057\u305f\u7d50\u679c\u3067\u3059\u3002\u5b9f\u969b\u306b\u306f\u3001\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306b\u306f\u3059\u3079\u3066\u306e\u6307\u793a\u3092\u660e\u78ba\u304b\u3064\u6b63\u78ba\u306b\u4f1d\u3048\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u66d6\u6627\u306a\u6307\u793a\u3084\u30df\u30b9\u304c\u3042\u308b\u3068\u3001\u6b63\u3057\u304f\u52d5\u4f5c\u3057\u307e\u305b\u3093\u3002</p> </li> <li> <p>\u300c\u30b3\u30d4\u30fc\u3001\u30da\u30fc\u30b9\u30c8\u3001\u4fee\u6b63\u300d\u30a2\u30d7\u30ed\u30fc\u30c1\u3092\u6d3b\u7528\u3059\u308b: \u6700\u521d\u306b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3092\u5b66\u3076\u3068\u304d\u3084\u3001\u7279\u306b\u8907\u96d1\u306a\u30b3\u30fc\u30c9\u3092\u7406\u89e3\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3068\u304d\u306f\u3001\u65e2\u5b58\u306e\u52d5\u4f5c\u3059\u308b\u30b3\u30fc\u30c9\u3092\u30b3\u30d4\u30fc\u3057\u3001\u81ea\u5206\u306e\u76ee\u7684\u306b\u5408\u308f\u305b\u3066\u4fee\u6b63\u3059\u308b\u306e\u304c\u52b9\u7387\u7684\u3067\u3059\u3002\u3053\u308c\u3092 \u300c\u30b3\u30d4\u30fc\u3001\u30da\u30fc\u30b9\u30c8\u3001\u4fee\u6b63\u300d \u30a2\u30d7\u30ed\u30fc\u30c1\u3068\u547c\u3073\u307e\u3059\u3002\u6700\u521d\u306f\u6697\u8a18\u3057\u3066\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u306e\u3067\u306f\u306a\u304f\u3001\u63d0\u4f9b\u3055\u308c\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u30b3\u30d4\u30fc\u3057\u3001\u305d\u308c\u3092\u4fee\u6b63\u3057\u306a\u304c\u3089\u5b66\u3076\u3053\u3068\u3092\u63a8\u5968\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u81ea\u8ee2\u8eca\u306e\u88dc\u52a9\u8f2a\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3001\u6163\u308c\u3066\u304f\u308c\u3070\u5f90\u3005\u306b\u88dc\u52a9\u306a\u3057\u3067\u30b3\u30fc\u30c9\u3092\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002</p> </li> <li> <p>\u5b9f\u8df5\u3092\u901a\u3058\u3066\u5b66\u3076\u306e\u304c\u6700\u826f\u306e\u65b9\u6cd5: \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u30b9\u30ad\u30eb\u3092\u5411\u4e0a\u3055\u305b\u308b\u6700\u3082\u52b9\u679c\u7684\u306a\u65b9\u6cd5\u306f\u3001\u5b9f\u969b\u306b\u624b\u3092\u52d5\u304b\u3057\u3066\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3053\u3068\u3067\u3059\u3002\u7279\u306b\u3001\u81ea\u5206\u304c\u8208\u5473\u306e\u3042\u308b\u30c7\u30fc\u30bf\u3092\u5206\u6790\u3059\u308b\u306a\u3069\u3001\u5177\u4f53\u7684\u306a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u6301\u3064\u3068\u3001\u5b66\u7fd2\u304c\u30b9\u30e0\u30fc\u30ba\u306b\u9032\u307f\u307e\u3059\u3002</p> </li> <li> <p>\u7df4\u7fd2\u304c\u9375: \u5916\u56fd\u8a9e\u3092\u4e0a\u9054\u3055\u305b\u308b\u552f\u4e00\u306e\u65b9\u6cd5\u304c\u7e70\u308a\u8fd4\u3057\u8a71\u3059\u3053\u3068\u3067\u3042\u308b\u3088\u3046\u306b\u3001\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u4e0a\u9054\u3055\u305b\u308b\u552f\u4e00\u306e\u65b9\u6cd5\u3082\u591a\u304f\u306e\u7df4\u7fd2\u3092\u7a4d\u3080\u3053\u3068\u3067\u3059\u3002\u5fc3\u914d\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\uff01 \u79c1\u305f\u3061\u306f\u5341\u5206\u306a\u7df4\u7fd2\u306e\u6a5f\u4f1a\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</p> </li> </ul> <p>Python \u3068 Google Colaboratory \u3092\u6d3b\u7528\u3057\u306a\u304c\u3089\u3001\u7e70\u308a\u8fd4\u3057\u7df4\u7fd2\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"lectures/SIWS/01-getting-started/#python_2","title":"Python\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u306f\uff1f","text":"<p>Python\u521d\u5fc3\u8005\u304c\u6700\u521d\u306b\u6238\u60d1\u3046\u6982\u5ff5\u306e\u3072\u3068\u3064\u306b\u3001Python\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\uff08\u307e\u305f\u306f\u30d1\u30c3\u30b1\u30fc\u30b8\uff09\u304c\u3042\u308a\u307e\u3059\u3002Python\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u3001\u8ffd\u52a0\u306e\u95a2\u6570\u3001\u30c7\u30fc\u30bf\u3001\u305d\u3057\u3066\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u63d0\u4f9b\u3059\u308b\u3053\u3068\u3067\u3001Python\u306e\u6a5f\u80fd\u3092\u62e1\u5f35\u3057\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u3001\u4e16\u754c\u4e2d\u306ePython\u30e6\u30fc\u30b6\u30fc\u306b\u3088\u3063\u3066\u4f5c\u3089\u308c\u3066\u304a\u308a\u3001\u901a\u5e38\u306fPyPI\uff08Python Package Index\uff09\u306a\u3069\u304b\u3089\u7121\u6599\u3067\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u672c\u66f8\u3067\u4f7f\u7528\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4e2d\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u3082\u306e\u304c\u3042\u308a\u307e\u3059\uff1a</p> <ul> <li>matplotlib: \u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316\u306e\u305f\u3081\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002</li> <li>Pandas: \u30c7\u30fc\u30bf\u306e\u6574\u5f62\u3084\u64cd\u4f5c\u306e\u305f\u3081\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002</li> <li>NumPy: \u6570\u5024\u8a08\u7b97\u3084\u914d\u5217\u64cd\u4f5c\u306e\u305f\u3081\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002</li> </ul> <p>Python\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u3001\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3067\u304d\u308b\u30a2\u30d7\u30ea\u306b\u4f8b\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3064\u307e\u308a\u3001Python\u81ea\u4f53\u306f\u65b0\u3057\u3044\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3059\u3002\u6700\u521d\u306f\u57fa\u672c\u7684\u306a\u6a5f\u80fd\u306f\u5099\u308f\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u3059\u3079\u3066\u306e\u6a5f\u80fd\u304c\u63c3\u3063\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002Python\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u3001\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u306bApp Store\u3084Google Play\u304b\u3089\u30a2\u30d7\u30ea\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u306e\u3068\u540c\u3058\u3088\u3046\u306b\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3067\u3001\u3042\u306a\u305f\u306e\u4f5c\u696d\u74b0\u5883\u3092\u62e1\u5f35\u3057\u3066\u304f\u308c\u307e\u3059\u3002</p> <p>\u3053\u306e\u30a2\u30ca\u30ed\u30b8\u30fc\u3092\u7d9a\u3051\u308b\u305f\u3081\u306b\u3001\u5199\u771f\u306e\u7de8\u96c6\u3084\u5171\u6709\u306b\u4f7f\u3046Instagram\u30a2\u30d7\u30ea\u3092\u4f8b\u306b\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u305f\u3068\u3048\u3070\u3001\u65b0\u3057\u3044\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u3092\u8cfc\u5165\u3057\u3066\u3001\u64ae\u3063\u305f\u5199\u771f\u3092\u53cb\u4eba\u3084\u5bb6\u65cf\u3068Instagram\u3067\u5171\u6709\u3057\u305f\u3044\u3068\u3057\u307e\u3059\u3002\u305d\u306e\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u30b9\u30c6\u30c3\u30d7\u304c\u5fc5\u8981\u3067\u3059\uff1a</p> <ol> <li> <p>\u30a2\u30d7\u30ea\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb:\u65b0\u3057\u3044\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u306b\u306fInstagram\u30a2\u30d7\u30ea\u304c\u30d7\u30ea\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u306a\u3044\u305f\u3081\u3001App Store\u3084Google Play\u304b\u3089\u30a2\u30d7\u30ea\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u4e00\u5ea6\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308c\u3070\u3001\u305d\u306e\u5f8c\u306f\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u304c\u3042\u308b\u307e\u3067\u518d\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002</p> </li> <li> <p>\u30a2\u30d7\u30ea\u306e\u8d77\u52d5:\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u304c\u5b8c\u4e86\u3057\u305f\u3089\u3001Instagram\u30a2\u30d7\u30ea\u3092\u8d77\u52d5\u3057\u307e\u3059\u3002</p> </li> </ol> <p>Instagram\u30a2\u30d7\u30ea\u3092\u8d77\u52d5\u3059\u308c\u3070\u3001\u5199\u771f\u3092\u53cb\u4eba\u3084\u5bb6\u65cf\u3068\u5171\u6709\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u308c\u3068\u540c\u69d8\u306b\u3001Python\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5229\u7528\u3059\u308b\u5834\u5408\u3082\u6b21\u306e2\u3064\u306e\u30b9\u30c6\u30c3\u30d7\u3092\u8e0f\u307f\u307e\u3059\uff1a</p> <ol> <li> <p>\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb:\u3053\u308c\u306f\u3001\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u306b\u30a2\u30d7\u30ea\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u306e\u3068\u540c\u3058\u3067\u3059\u3002\u591a\u304f\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u3001Python\u3084Google Colaboratory\u306e\u521d\u671f\u72b6\u614b\u306b\u306f\u542b\u307e\u308c\u3066\u3044\u306a\u3044\u305f\u3081\u3001\u521d\u3081\u3066\u4f7f\u7528\u3059\u308b\u969b\u306b\u306fpip\u306a\u3069\u3092\u4f7f\u3063\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u4e00\u5ea6\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308c\u3070\u3001\u901a\u5e38\u306f\u66f4\u65b0\u304c\u5fc5\u8981\u306b\u306a\u308b\u307e\u3067\u518d\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002</p> </li> <li> <p>\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8:\u3053\u308c\u306f\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u30a2\u30d7\u30ea\u3092\u8d77\u52d5\u3059\u308b\u306e\u3068\u540c\u3058\u3067\u3059\u3002Python\u3067\u306f\u3001\u4f7f\u7528\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u5185\u3067\u6bce\u56deimport\u6587\u3092\u7528\u3044\u3066\u8aad\u307f\u8fbc\u3080\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> </li> </ol> <p>\u3067\u306f\u3001\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316\u306e\u305f\u3081\u306ematplotlib\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f8b\u306b\u3001\u3053\u306e2\u3064\u306e\u30b9\u30c6\u30c3\u30d7\u3092\u5b9f\u969b\u306b\u884c\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <pre><code># matplotlib\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n!pip install matplotlib\n\n# matplotlib\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\nimport matplotlib.pyplot as plt\n\n# \u7c21\u5358\u306a\u6298\u308c\u7dda\u30b0\u30e9\u30d5\u306e\u63cf\u753b\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 25, 30, 40]\nplt.plot(x, y)\nplt.xlabel(\"X\u8ef8\")\nplt.ylabel(\"Y\u8ef8\")\nplt.title(\"Matplotlib\u306e\u30b5\u30f3\u30d7\u30eb\u30b0\u30e9\u30d5\")\nplt.show()\n</code></pre>"},{"location":"lectures/SIWS/01-getting-started/#python_3","title":"Python\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","text":"<p>Google Colaboratory\u306b\u3064\u3044\u3066\u306e\u6ce8\u610f:  Google Colaboratory\u3067\u306f\u3001\u591a\u304f\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u4e8b\u524d\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u8ffd\u52a0\u3067\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u81ea\u5206\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002Google Colaboratory\u3092\u4f7f\u308f\u305a\u306b\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u3067Python\u3092\u5b9f\u884c\u3059\u308b\u5834\u5408\u3082\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u624b\u9806\u3092\u77e5\u3063\u3066\u304a\u304f\u3053\u3068\u304c\u91cd\u8981\u3067\u3059\uff08\u4eca\u56de\u306f\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u306f\u4f7f\u7528\u3057\u307e\u305b\u3093\u304c\u3001\u4eca\u5f8c\u5229\u7528\u3059\u308b\u969b\u306e\u53c2\u8003\u306b\u8a18\u8f09\u3057\u3066\u304a\u304d\u307e\u3059\uff09\u3002</p> <p>Python\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u65b9\u6cd5\u306f2\u7a2e\u985e\u3042\u308a\u307e\u3059\u3002</p> <ol> <li>\u7c21\u5358\u306a\u65b9\u6cd5\uff08Google Colaboratory\u307e\u305f\u306fJupyter Notebook\u3067\u5b9f\u884c\uff09:     <code>!pip install</code> \u30b3\u30de\u30f3\u30c9\u3092\u7528\u3044\u3066\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002</li> </ol> <pre><code>!pip install seaborn pandas numpy matplotlib\n</code></pre> <ol> <li>\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u3067\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\uff08\u30bf\u30fc\u30df\u30ca\u30eb\u307e\u305f\u306f\u30b3\u30de\u30f3\u30c9\u30d7\u30ed\u30f3\u30d7\u30c8\u3067\u5b9f\u884c\uff1a\u4eca\u56de\u306f\u5229\u7528\u3057\u306a\u3044\uff09:</li> </ol> <pre><code>pip install seaborn pandas numpy matplotlib\n</code></pre> <p>\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u306b\u304a\u3044\u3066\u306f\u3001\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u306e\u30a2\u30d7\u30ea\u3068\u540c\u69d8\u3001\u4e00\u5ea6\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308c\u3070\u518d\u5ea6\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001Google Colaboratory\u306e\u74b0\u5883\u306b\u304a\u3044\u3066\u306f\u3001\u6642\u9593\u304c\u7d4c\u904e\u3059\u308b\u3068\u30ea\u30bb\u30c3\u30c8\u3055\u308c\u308b\u305f\u3081\u3001\u518d\u5ea6\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u304c\u5fc5\u8981\u306b\u306a\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u30a4\u30e1\u30fc\u30b8\u3068\u3057\u3066\u306f\u3001\u8cb8\u3057\u51fa\u3057\u30b9\u30de\u30db\u3067\u3059\u3002\u4e00\u5ea6\u5e97\u306b\u8fd4\u5374\u3059\u308b\u3068\u4e2d\u8eab\u306e\u30c7\u30fc\u30bf\u304c\u6d88\u3055\u308c\u3066\u3044\u3066\u3001\u518d\u5ea6\u30a2\u30d7\u30ea\u3092\u5165\u308c\u76f4\u3059\u5fc5\u8981\u304c\u3042\u308b\u306e\u3068\u540c\u3058\u3067\u3059\u3002</p>"},{"location":"lectures/SIWS/01-getting-started/#_4","title":"\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u8aad\u307f\u8fbc\u307f","text":"<p>\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u5f8c\u3001\u305d\u308c\u3092Python\u30d7\u30ed\u30b0\u30e9\u30e0\u5185\u3067\u4f7f\u7528\u3059\u308b\u305f\u3081\u306b\u306f\u300c\u8aad\u307f\u8fbc\u3080\u300d\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <pre><code># library\u306e\u8aad\u307f\u8fbc\u307f\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n</code></pre> <p>\u3082\u3057\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u304c\u8868\u793a\u3055\u308c\u305f\u5834\u5408:</p> <pre><code>ModuleNotFoundError: No module named 'seaborn'\n</code></pre> <p>\u3053\u308c\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u306a\u3044\u3053\u3068\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u5834\u5408\u306f\u3001\u524d\u8ff0\u306e<code>pip install</code>\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>Note</p> <p><code>pip</code> \u3092\u7528\u3044\u3066\u3001<code>seaborn</code> \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"lectures/SIWS/01-getting-started/#_5","title":"\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u5229\u7528","text":"<p>Python\u3067\u30c7\u30fc\u30bf\u5206\u6790\u3092\u884c\u3046\u969b\u3001\u9069\u5207\u306b\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3001\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304c\u91cd\u8981\u3067\u3059\u3002\u4f8b\u3048\u3070\u3001<code>seaborn</code> \u3092\u4f7f\u7528\u3057\u3066\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316\u3092\u884c\u3046\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068\u30b7\u30f3\u30d7\u30eb\u306a\u6563\u5e03\u56f3\u3092\u63cf\u753b\u3067\u304d\u307e\u3059\u3002</p> <pre><code># \u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u306e\u4f5c\u6210\nnp.random.seed(10)\ndata = pd.DataFrame({\n    \"x\": np.random.rand(50),\n    \"y\": np.random.rand(50)\n})\n\n# Seaborn\u3092\u4f7f\u3063\u305f\u6563\u5e03\u56f3\u306e\u63cf\u753b\nsns.scatterplot(x=\"x\", y=\"y\", data=data)\nplt.title(\"Seaborn\u3092\u7528\u3044\u305f\u6563\u5e03\u56f3\u306e\u4f8b\")\nplt.show()\n</code></pre> <p>\u3053\u306e\u3088\u3046\u306b\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u6b63\u3057\u304f\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3001\u8aad\u307f\u8fbc\u3080\u3053\u3068\u3067\u3001Python\u3067\u306e\u30c7\u30fc\u30bf\u5206\u6790\u3084\u53ef\u8996\u5316\u304c\u7c21\u5358\u306b\u884c\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/01-getting-started/#_6","title":"\u521d\u3081\u3066\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u63a2\u7d22\u3057\u3066\u307f\u3088\u3046","text":"<p>\u3053\u308c\u307e\u3067\u5b66\u3093\u3060\u3053\u3068\u3092\u6d3b\u7528\u3057\u3066\u3001\u5b9f\u969b\u306e\u30c7\u30fc\u30bf\u3092\u63a2\u7d22\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u30c7\u30fc\u30bf\u306f\u753b\u50cf\u3001\u30c6\u30ad\u30b9\u30c8\u3001\u6570\u5024\u306a\u3069\u3055\u307e\u3056\u307e\u306a\u5f62\u5f0f\u3067\u5b58\u5728\u3057\u307e\u3059\u304c\u3001\u672c\u66f8\u3067\u306f\u4e3b\u306b\u300c\u30b9\u30d7\u30ec\u30c3\u30c9\u30b7\u30fc\u30c8\u300d\u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u7126\u70b9\u3092\u5f53\u3066\u307e\u3059\u3002\u3053\u308c\u306f\u591a\u304f\u306e\u5206\u91ce\u3067\u30c7\u30fc\u30bf\u304c\u53ce\u96c6\u30fb\u4fdd\u5b58\u3055\u308c\u308b\u6700\u3082\u4e00\u822c\u7684\u306a\u65b9\u6cd5\u3067\u3059\u3002Python\u3067\u306f\u3001\u3053\u308c\u3089\u306e\u300c\u30b9\u30d7\u30ec\u30c3\u30c9\u30b7\u30fc\u30c8\u300d\u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3068\u547c\u3073\u307e\u3059\u3002\u4ee5\u964d\u3001\u672c\u66f8\u3067\u306f\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3068\u3057\u3066\u4fdd\u5b58\u3055\u308c\u305f\u30c7\u30fc\u30bf\u306e\u64cd\u4f5c\u306b\u6ce8\u76ee\u3057\u3066\u3044\u304d\u307e\u3059\u3002</p> <p>\u307e\u305a\u3001\u5fc5\u8981\u306a\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <pre><code>import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n</code></pre>"},{"location":"lectures/SIWS/01-getting-started/#_7","title":"\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f","text":"<p>\u4eca\u56de\u306f\u3001\u5e83\u544a\u8cbb\u7528\u3068\u58f2\u4e0a\u306e\u95a2\u4fc2\u3092\u793a\u3057\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u3053\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u306f\u3001TV\u3001\u30e9\u30b8\u30aa\u3001\u65b0\u805e\u306b\u6295\u3058\u305f\u4e88\u7b97\u3068\u58f2\u4e0a\u306e\u60c5\u5831\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <pre><code>url = 'https://raw.githubusercontent.com/a-martyn/ISL-python/ee156568a8f7307be71dad5390bae12b51dcd93f/Notebooks/data/Advertising.csv'\ndata = pd.read_csv(url, index_col=0)\n</code></pre>"},{"location":"lectures/SIWS/01-getting-started/#_8","title":"\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u69cb\u9020\u3092\u78ba\u8a8d\u3059\u308b","text":"<p>\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u69cb\u9020\u3092\u7406\u89e3\u3059\u308b\u305f\u3081\u306b\u3001\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <pre><code>data.info()\n</code></pre> <p>\u3053\u306e\u51fa\u529b\u304b\u3089\u3001\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306b\u306f200\u884c\u30684\u5217\u304c\u3042\u308a\u3001\u5404\u5217\u306e\u30c7\u30fc\u30bf\u578b\u3068\u6b20\u640d\u5024\u306e\u6709\u7121\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002</p> <p>\u6b21\u306b\u3001\u30c7\u30fc\u30bf\u306e\u6700\u521d\u306e\u6570\u884c\u3092\u8868\u793a\u3057\u3066\u3001\u30c7\u30fc\u30bf\u306e\u5185\u5bb9\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002</p> <pre><code>data.head()\n</code></pre> <p>\u3053\u306e\u51fa\u529b\u304b\u3089\u3001\u5404\u5217\u306e\u540d\u524d\u3068\u6700\u521d\u306e5\u884c\u306e\u30c7\u30fc\u30bf\u304c\u8868\u793a\u3055\u308c\u3001\u30c7\u30fc\u30bf\u306e\u6982\u8981\u3092\u628a\u63e1\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/01-getting-started/#_9","title":"\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u63a2\u7d22","text":"<p>\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u63a2\u7d22\u3059\u308b\u65b9\u6cd5\u306f\u3044\u304f\u3064\u304b\u3042\u308a\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u30013\u3064\u306e\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002</p> <ol> <li> <p><code>head()</code>\u30e1\u30bd\u30c3\u30c9: \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u6700\u521d\u306e\u6570\u884c\u3092\u8868\u793a\u3057\u307e\u3059\u3002</p> <p><code>python data.head()</code></p> </li> <li> <p><code>describe()</code>\u30e1\u30bd\u30c3\u30c9: \u6570\u5024\u30c7\u30fc\u30bf\u306e\u57fa\u672c\u7684\u306a\u7d71\u8a08\u91cf\u3092\u8868\u793a\u3057\u307e\u3059\u3002</p> <p><code>python data.describe()</code></p> </li> <li> <p><code>columns</code>\u5c5e\u6027: \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u5217\u540d\u3092\u8868\u793a\u3057\u307e\u3059\u3002</p> <p><code>python data.columns</code></p> </li> </ol> <p>\u3053\u308c\u3089\u306e\u65b9\u6cd5\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\u30c7\u30fc\u30bf\u306e\u6982\u8981\u3092\u628a\u63e1\u3057\u307e\u3057\u3087\u3046\u3002</p>"},{"location":"lectures/SIWS/01-getting-started/#_10","title":"\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316","text":"<p>\u30c7\u30fc\u30bf\u306e\u95a2\u4fc2\u6027\u3092\u8996\u899a\u7684\u306b\u7406\u89e3\u3059\u308b\u305f\u3081\u306b\u3001\u6563\u5e03\u56f3\u3092\u4f5c\u6210\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u4f8b\u3048\u3070\u3001TV\u5e83\u544a\u8cbb\u7528\u3068\u58f2\u4e0a\u306e\u95a2\u4fc2\u3092\u78ba\u8a8d\u3059\u308b\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002</p> <pre><code>plt.scatter(data['TV'], data['Sales'])\nplt.xlabel('TV Advertising Budget (in thousands of dollars)')\nplt.ylabel('Sales (in thousands of units)')\nplt.title('TV Advertising vs Sales')\nplt.show()\n</code></pre> <p>\u3053\u306e\u6563\u5e03\u56f3\u304b\u3089\u3001TV\u5e83\u544a\u8cbb\u7528\u3068\u58f2\u4e0a\u306e\u9593\u306b\u6b63\u306e\u76f8\u95a2\u304c\u3042\u308b\u3053\u3068\u304c\u8996\u899a\u7684\u306b\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002</p> <p>\u540c\u69d8\u306b\u3001\u30e9\u30b8\u30aa\u3084\u65b0\u805e\u306e\u5e83\u544a\u8cbb\u7528\u3068\u58f2\u4e0a\u306e\u95a2\u4fc2\u3082\u6563\u5e03\u56f3\u3067\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <pre><code># \u30e9\u30b8\u30aa\u5e83\u544a\u8cbb\u7528\u3068\u58f2\u4e0a\u306e\u95a2\u4fc2\nplt.scatter(data['Radio'], data['Sales'])\nplt.xlabel('Radio Advertising Budget (in thousands of dollars)')\nplt.ylabel('Sales (in thousands of units)')\nplt.title('Radio Advertising vs Sales')\nplt.show()\n\n# \u65b0\u805e\u5e83\u544a\u8cbb\u7528\u3068\u58f2\u4e0a\u306e\u95a2\u4fc2\nplt.scatter(data['Newspaper'], data['Sales'])\nplt.xlabel('Newspaper Advertising Budget (in thousands of dollars)')\nplt.ylabel('Sales (in thousands of units)')\nplt.title('Newspaper Advertising vs Sales')\nplt.show()\n</code></pre> <p>\u3053\u308c\u3089\u306e\u6563\u5e03\u56f3\u3092\u901a\u3058\u3066\u3001\u5404\u5e83\u544a\u5a92\u4f53\u306e\u4e88\u7b97\u3068\u58f2\u4e0a\u306e\u95a2\u4fc2\u6027\u3092\u8996\u899a\u7684\u306b\u7406\u89e3\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/01-getting-started/#_11","title":"\u30c7\u30fc\u30bf\u306e\u57fa\u672c\u7d71\u8a08\u91cf","text":"<p>\u30c7\u30fc\u30bf\u306e\u57fa\u672c\u7684\u306a\u7d71\u8a08\u91cf\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u3067\u3001\u30c7\u30fc\u30bf\u306e\u5206\u5e03\u3084\u4e2d\u5fc3\u50be\u5411\u3092\u7406\u89e3\u3067\u304d\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <pre><code>data.describe()\n</code></pre> <p>\u3053\u306e\u51fa\u529b\u304b\u3089\u3001\u5404\u5909\u6570\u306e\u5e73\u5747\u5024\u3001\u6a19\u6e96\u504f\u5dee\u3001\u6700\u5c0f\u5024\u3001\u6700\u5927\u5024\u3001\u56db\u5206\u4f4d\u6570\u306a\u3069\u306e\u60c5\u5831\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\u4ee5\u4e0a\u306e\u624b\u9806\u3067\u3001Python\u3068Pandas\u3092\u4f7f\u7528\u3057\u3066\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u307f\u3001\u305d\u306e\u69cb\u9020\u3092\u7406\u89e3\u3057\u3001\u57fa\u672c\u7684\u306a\u7d71\u8a08\u91cf\u3092\u78ba\u8a8d\u3057\u3001\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316\u3092\u884c\u3044\u307e\u3057\u305f\u3002\u3053\u308c\u3089\u306e\u65b9\u6cd5\u3092\u6d3b\u7528\u3057\u3066\u3001\u3055\u307e\u3056\u307e\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u63a2\u7d22\u3057\u3001\u5206\u6790\u306e\u57fa\u790e\u3092\u7bc9\u3044\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002</p>"},{"location":"lectures/SIWS/01-getting-started/#_12","title":"\u307e\u3068\u3081","text":"<p>\u672c\u7ae0\u3067\u306f\u3001Python\u3092\u4f7f\u7528\u3057\u3066\u30c7\u30fc\u30bf\u3092\u63a2\u7d22\u3059\u308b\u305f\u3081\u306e\u57fa\u672c\u7684\u306a\u30c4\u30fc\u30eb\u30bb\u30c3\u30c8\u3092\u7d39\u4ecb\u3057\u307e\u3057\u305f\u3002\u3053\u306e\u7ae0\u306b\u3059\u3079\u3066\u306e\u77e5\u8b58\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3059\u3079\u3066\u3092\u76db\u308a\u8fbc\u3080\u3068\u81a8\u5927\u306a\u91cf\u306b\u306a\u308a\u3001\u5b9f\u7528\u7684\u3067\u306f\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u304b\u3089\u3067\u3059\uff01\u6700\u3082\u91cd\u8981\u306a\u306e\u306f\u3001Google Colaboratory\u4e0a\u3067\u5b9f\u969b\u306b\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3001\u8a66\u884c\u932f\u8aa4\u3092\u7e70\u308a\u8fd4\u3057\u306a\u304c\u3089\u5b66\u3076\u3053\u3068\u3067\u3059\u3002</p>"},{"location":"lectures/SIWS/01-getting-started/#_13","title":"\u8ffd\u52a0\u30ea\u30bd\u30fc\u30b9","text":"<p>\u3082\u3057\u3001Python\u3084Google Colaboratory\u3001\u30c7\u30fc\u30bf\u5206\u6790\u306b\u4e0d\u6163\u308c\u3067\u3001\u3088\u308a\u8a73\u7d30\u306a\u5165\u9580\u66f8\u3092\u6c42\u3081\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u30ea\u30bd\u30fc\u30b9\u3092\u53c2\u7167\u3059\u308b\u3053\u3068\u3092\u304a\u3059\u3059\u3081\u3057\u307e\u3059\u3002</p> <ul> <li> <p>Python Data Science Handbook   NumPy\u3001Pandas\u3001Matplotlib\u3001Scikit-Learn\u306a\u3069\u3001Python\u3092\u4f7f\u3063\u305f\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u306e\u57fa\u790e\u3092\u5b66\u3076\u305f\u3081\u306e\u5305\u62ec\u7684\u306a\u30ac\u30a4\u30c9\u3067\u3059\u3002</p> </li> <li> <p>Google Colaboratory\u306e\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8   Google Colab\u306e\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\u3092\u5b66\u3076\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30af\u30e9\u30a6\u30c9\u74b0\u5883\u3067Python\u3092\u5b9f\u884c\u3067\u304d\u308b\u305f\u3081\u3001\u74b0\u5883\u69cb\u7bc9\u306a\u3057\u306b\u3059\u3050\u306b\u59cb\u3081\u3089\u308c\u307e\u3059\u3002</p> </li> <li> <p>Pandas\u306e\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8   \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u64cd\u4f5c\u306e\u8a73\u7d30\u306a\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3067\u3059\u3002</p> </li> <li> <p>Matplotlib\u306e\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8   \u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316\u306b\u95a2\u3059\u308b\u8a73\u7d30\u306a\u60c5\u5831\u304c\u5f97\u3089\u308c\u307e\u3059\u3002</p> </li> </ul>"},{"location":"lectures/SIWS/01-getting-started/#_14","title":"\u4eca\u5f8c\u306e\u5c55\u958b","text":"<p>\u6b21\u306e\u7ae0\u3067\u306f\u3001\u300c\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u306b\u304a\u3051\u308b\u6700\u3082\u91cd\u8981\u306a\u30c4\u30fc\u30eb\u306e1\u3064\u300d\u3068\u3082\u8a00\u3048\u308b\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316\u306b\u3064\u3044\u3066\u5b66\u3073\u307e\u3059\u3002Pandas\u3068Matplotlib\u3092\u6d3b\u7528\u3057\u3001\u8996\u899a\u7684\u306b\u30c7\u30fc\u30bf\u3092\u63a2\u7d22\u3059\u308b\u65b9\u6cd5\u3092\u63a2\u6c42\u3057\u3066\u3044\u304d\u307e\u3059\u3002</p> <p>\u30c7\u30fc\u30bf\u53ef\u8996\u5316\u306f\u3001<code>head()</code> \u3084 <code>describe()</code> \u306e\u3088\u3046\u306a\u95a2\u6570\u3067\u306f\u6349\u3048\u304d\u308c\u306a\u3044\u30d1\u30bf\u30fc\u30f3\u3084\u50be\u5411\u3092\u660e\u3089\u304b\u306b\u3059\u308b\u5f37\u529b\u306a\u30c4\u30fc\u30eb\u3067\u3059\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u57fa\u672c\u7684\u306a\u30d7\u30ed\u30c3\u30c8\u3092\u5b66\u3073\u3001\u30c7\u30fc\u30bf\u306e\u80cc\u5f8c\u306b\u3042\u308b\u30b9\u30c8\u30fc\u30ea\u30fc\u3092\u8aad\u307f\u89e3\u304f\u529b\u3092\u990a\u3044\u307e\u3057\u3087\u3046\u3002</p> <pre><code>import pandas as pd\nimport matplotlib.pyplot as plt\n\n# \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\nurl = 'https://raw.githubusercontent.com/a-martyn/ISL-python/ee156568a8f7307be71dad5390bae12b51dcd93f/Notebooks/data/Advertising.csv'\ndata = pd.read_csv(url, index_col=0)\n\n# \u6563\u5e03\u56f3\u306e\u4f5c\u6210\uff08TV\u5e83\u544a\u8cbb\u3068\u58f2\u4e0a\u306e\u95a2\u4fc2\uff09\nplt.scatter(data['TV'], data['Sales'])\nplt.xlabel('TV Advertising Budget (in thousands of dollars)')\nplt.ylabel('Sales (in thousands of units)')\nplt.title('TV Advertising vs Sales')\nplt.show()\n</code></pre> <p>\u3053\u306e\u3088\u3046\u306b\u3001\u6b21\u306e\u7ae0\u3067\u306f\u30c7\u30fc\u30bf\u306e\u30d1\u30bf\u30fc\u30f3\u3092\u3088\u308a\u76f4\u611f\u7684\u306b\u7406\u89e3\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u306e\u65c5\u3092\u7d9a\u3051\u3066\u3044\u304d\u307e\u3057\u3087\u3046\uff01</p> <p>\u6b21\u306e\u7ae0\u3067\u306f\u3001\u300c\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u306b\u304a\u3051\u308b\u6700\u3082\u91cd\u8981\u306a\u30c4\u30fc\u30eb\u306e1\u3064\u300d\u3068\u3082\u8a00\u3048\u308b\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316\u306b\u3064\u3044\u3066\u5b66\u3073\u307e\u3059\u3002Pandas\u3068Matplotlib\u3092\u6d3b\u7528\u3057\u3001\u8996\u899a\u7684\u306b\u30c7\u30fc\u30bf\u3092\u63a2\u7d22\u3059\u308b\u65b9\u6cd5\u3092\u63a2\u6c42\u3057\u3066\u3044\u304d\u307e\u3059\u3002</p> <p>\u30c7\u30fc\u30bf\u53ef\u8996\u5316\u306f\u3001<code>head()</code> \u3084 <code>describe()</code> \u306e\u3088\u3046\u306a\u95a2\u6570\u3067\u306f\u6349\u3048\u304d\u308c\u306a\u3044\u30d1\u30bf\u30fc\u30f3\u3084\u50be\u5411\u3092\u660e\u3089\u304b\u306b\u3059\u308b\u5f37\u529b\u306a\u30c4\u30fc\u30eb\u3067\u3059\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u57fa\u672c\u7684\u306a\u30d7\u30ed\u30c3\u30c8\u3092\u5b66\u3073\u3001\u30c7\u30fc\u30bf\u306e\u80cc\u5f8c\u306b\u3042\u308b\u30b9\u30c8\u30fc\u30ea\u30fc\u3092\u8aad\u307f\u89e3\u304f\u529b\u3092\u990a\u3044\u307e\u3057\u3087\u3046\u3002</p> <pre><code>import pandas as pd\nimport matplotlib.pyplot as plt\n\n# \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\nurl = 'https://raw.githubusercontent.com/a-martyn/ISL-python/ee156568a8f7307be71dad5390bae12b51dcd93f/Notebooks/data/Advertising.csv'\ndata = pd.read_csv(url, index_col=0)\n\n# \u6563\u5e03\u56f3\u306e\u4f5c\u6210\uff08TV\u5e83\u544a\u8cbb\u3068\u58f2\u4e0a\u306e\u95a2\u4fc2\uff09\nplt.scatter(data['TV'], data['Sales'])\nplt.xlabel('TV Advertising Budget (in thousands of dollars)')\nplt.ylabel('Sales (in thousands of units)')\nplt.title('TV Advertising vs Sales')\nplt.show()\n</code></pre>"},{"location":"lectures/SIWS/01-getting-started/#_15","title":"\u7406\u89e3\u5ea6\u30c1\u30a7\u30c3\u30af\u8ab2\u984c","text":"<p>\u4ee5\u4e0b\u306e\u554f\u984c\u3092\u89e3\u3044\u3066\u3001Python\u3001Google Colaboratory\u3001Pandas\u3001Matplotlib\u3092\u7528\u3044\u305f\u30c7\u30fc\u30bf\u63a2\u7d22\u306e\u7406\u89e3\u3092\u6df1\u3081\u307e\u3057\u3087\u3046\u3002</p>"},{"location":"lectures/SIWS/01-getting-started/#1","title":"\u554f\u984c 1: \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f","text":"<p>\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u3069\u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u304b\uff1f \u30c7\u30fc\u30bf\u306e\u6982\u8981\u3092\u8aac\u660e\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <pre><code>import pandas as pd\n\nurl = 'https://raw.githubusercontent.com/a-martyn/ISL-python/ee156568a8f7307be71dad5390bae12b51dcd93f/Notebooks/data/Advertising.csv'\ndata = pd.read_csv(url, index_col=0)\nprint(data.head())\n</code></pre>"},{"location":"lectures/SIWS/01-getting-started/#2","title":"\u554f\u984c 2: \u30c7\u30fc\u30bf\u306e\u7d71\u8a08\u60c5\u5831","text":"<p>\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u3069\u306e\u3088\u3046\u306a\u60c5\u5831\u304c\u5f97\u3089\u308c\u307e\u3059\u304b\uff1f \u5f97\u3089\u308c\u305f\u60c5\u5831\u304b\u3089\u3001\u3069\u306e\u5e83\u544a\u5a92\u4f53\u304c\u58f2\u4e0a\u306b\u6700\u3082\u5f71\u97ff\u3092\u4e0e\u3048\u3066\u3044\u308b\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u304b\uff1f</p> <pre><code>print(data.describe())\n</code></pre>"},{"location":"lectures/SIWS/01-getting-started/#3","title":"\u554f\u984c 3: \u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316","text":"<p>\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3066\u3001TV\u5e83\u544a\u8cbb\u3068\u58f2\u4e0a\u306e\u95a2\u4fc2\u3092\u30d7\u30ed\u30c3\u30c8\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30b0\u30e9\u30d5\u306e\u50be\u5411\u3092\u8aac\u660e\u3057\u3001\u58f2\u4e0a\u306b\u5bfe\u3059\u308bTV\u5e83\u544a\u306e\u5f71\u97ff\u306b\u3064\u3044\u3066\u8003\u5bdf\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <pre><code>import matplotlib.pyplot as plt\n\nplt.scatter(data['TV'], data['Sales'])\nplt.xlabel('TV Advertising Budget (in thousands of dollars)')\nplt.ylabel('Sales (in thousands of units)')\nplt.title('TV Advertising vs Sales')\nplt.show()\n</code></pre>"},{"location":"lectures/SIWS/01-getting-started/#4","title":"\u554f\u984c 4: \u4ed6\u306e\u5e83\u544a\u5a92\u4f53\u3068\u306e\u95a2\u4fc2","text":"<p>\u30e9\u30b8\u30aa (<code>Radio</code>) \u3084\u65b0\u805e (<code>Newspaper</code>) \u306e\u5e83\u544a\u8cbb\u3068\u58f2\u4e0a\u306e\u95a2\u4fc2\u3092\u8abf\u3079\u308b\u305f\u3081\u306b\u3001 \u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3092\u4fee\u6b63\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u6563\u5e03\u56f3\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u7d50\u679c\u304b\u3089\u3001\u3069\u306e\u5e83\u544a\u5a92\u4f53\u304c\u58f2\u4e0a\u306b\u5bfe\u3057\u3066\u6700\u3082\u5927\u304d\u306a\u5f71\u97ff\u3092\u6301\u3064\u304b\u8003\u5bdf\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"lectures/SIWS/01-getting-started/#5","title":"\u554f\u984c 5: \u30c7\u30fc\u30bf\u306e\u5fdc\u7528","text":"<p>\u4f01\u696d\u304c\u5e83\u544a\u8cbb\u3092\u6700\u9069\u306b\u914d\u5206\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u3069\u306e\u3088\u3046\u306a\u5206\u6790\u3092\u884c\u3046\u3079\u304d\u3067\u3057\u3087\u3046\u304b\uff1f \u307e\u305f\u3001Pandas\u3084Matplotlib\u3092\u6d3b\u7528\u3057\u3066\u3001\u3069\u306e\u3088\u3046\u306a\u8ffd\u52a0\u306e\u8996\u899a\u5316\u3084\u7d71\u8a08\u5206\u6790\u304c\u3067\u304d\u308b\u304b\u63d0\u6848\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>\u4ee5\u4e0a\u306e\u554f\u984c\u3092\u89e3\u304f\u3053\u3068\u3067\u3001Python\u3092\u7528\u3044\u305f\u30c7\u30fc\u30bf\u306e\u63a2\u7d22\u3068\u53ef\u8996\u5316\u306e\u57fa\u790e\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002 \u5b9f\u969b\u306b\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3001\u5f97\u3089\u308c\u305f\u7d50\u679c\u3092\u3082\u3068\u306b\u8003\u5bdf\u3092\u6df1\u3081\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"lectures/SIWS/02-visualization/","title":"Python \u3067\u30c7\u30fc\u30bf\u3092\u53ef\u8996\u5316\u3088\u3046","text":"<p>\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u306e\u30c4\u30fc\u30eb\u30dc\u30c3\u30af\u30b9\u3092\u69cb\u7bc9\u3059\u308b\u6700\u521d\u306e\u30b9\u30c6\u30c3\u30d7\u3068\u3057\u3066\u3001\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316\u3092\u5b66\u3073\u307e\u3059\u3002\u30c7\u30fc\u30bf\u3092\u8996\u899a\u5316\u3059\u308b\u3053\u3068\u3067\u3001\u5358\u306a\u308b\u6570\u5024\u306e\u7f85\u5217\u3067\u306f\u898b\u3048\u306a\u304b\u3063\u305f\u30d1\u30bf\u30fc\u30f3\u3084\u50be\u5411\u3092\u767a\u898b\u3067\u304d\u307e\u3059\u3002Python\u3067\u306f\u3001<code>matplotlib</code> \u3084 <code>seaborn</code> \u3092\u5229\u7528\u3057\u3066\u30c7\u30fc\u30bf\u3092\u53ef\u8996\u5316\u3067\u304d\u307e\u3059\u3002\u672c\u7ae0\u3067\u306f\u3001\u3053\u308c\u3089\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u6d3b\u7528\u3057\u3001\u57fa\u672c\u7684\u306a\u30d7\u30ed\u30c3\u30c8\u3092\u4f5c\u6210\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002</p> <p>\u30b0\u30e9\u30d5\uff08\u30d7\u30ed\u30c3\u30c8\u3084\u30c1\u30e3\u30fc\u30c8\u3068\u3082\u547c\u3073\u307e\u3059\uff09\u306f\u3001\u30c7\u30fc\u30bf\u306e\u30d1\u30bf\u30fc\u30f3\u3092\u63a2\u308b\u305f\u3081\u306e\u5f37\u529b\u306a\u624b\u6cd5\u3067\u3059\u3002\u4f8b\u3048\u3070\u3001\u5916\u308c\u5024\u306e\u7279\u5b9a\u3001\u30c7\u30fc\u30bf\u306e\u5206\u5e03\u3001\u5909\u6570\u9593\u306e\u95a2\u4fc2\u6027\u3092\u7406\u89e3\u3059\u308b\u306e\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002\u9069\u5207\u306a\u53ef\u8996\u5316\u3092\u884c\u3046\u3053\u3068\u3067\u3001\u30c7\u30fc\u30bf\u304b\u3089\u5f97\u3089\u308c\u308b\u6d1e\u5bdf\u3092\u52b9\u679c\u7684\u306b\u4f1d\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u60c5\u5831\u3092\u8a70\u3081\u8fbc\u307f\u3059\u304e\u308b\u3068\u3001\u304b\u3048\u3063\u3066\u7406\u89e3\u3057\u306b\u304f\u304f\u306a\u308b\u3053\u3068\u3082\u3042\u308b\u305f\u3081\u3001\u9069\u5207\u306a\u30d0\u30e9\u30f3\u30b9\u3092\u53d6\u308b\u3053\u3068\u304c\u91cd\u8981\u3067\u3059\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#_1","title":"\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea","text":"<p>\u672c\u7ae0\u3067\u306f\u3001gapminder\u3068\u547c\u3070\u308c\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u5229\u7528\u3057\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u306b\u3001\u307e\u305a\u306f\u4ee5\u4e0b\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <pre><code>!pip install gapminder\n</code></pre> <p>\u6b21\u306b\u3001\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u307e\u3059\u3002</p> <pre><code>import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom gapminder import gapminder\n</code></pre>"},{"location":"lectures/SIWS/02-visualization/#_2","title":"\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u306e\u57fa\u790e\u7406\u8ad6","text":"<p>\u300c\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u306e\u6587\u6cd5\uff08Grammar of Graphics\uff09\u300d\u3068\u306f\u3001\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316\u3092\u4f53\u7cfb\u7684\u306b\u6574\u7406\u3059\u308b\u305f\u3081\u306e\u7406\u8ad6\u3067\u3059\u3002\u3053\u306e\u6982\u5ff5\u306f Leland Wilkinson \u306b\u3088\u3063\u3066\u63d0\u5531\u3055\u308c\u3001R\u306e <code>ggplot2</code> \u3084 Python\u306e <code>plotly</code> \u306a\u3069\u306e\u53ef\u8996\u5316\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3082\u5fdc\u7528\u3055\u308c\u3066\u3044\u307e\u3059\u3002</p> <p>\u3053\u306e\u7406\u8ad6\u306b\u3088\u308b\u3068\u3001\u7d71\u8a08\u30b0\u30e9\u30d5\u306f\u6b21\u306e3\u3064\u306e\u8981\u7d20\u304b\u3089\u69cb\u6210\u3055\u308c\u307e\u3059\u3002</p> <ol> <li>\u30c7\u30fc\u30bf (<code>data</code>): \u53ef\u8996\u5316\u306e\u5bfe\u8c61\u3068\u306a\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3002</li> <li>\u5e7e\u4f55\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 (<code>geom</code>): \u30b0\u30e9\u30d5\u306b\u63cf\u753b\u3055\u308c\u308b\u57fa\u672c\u8981\u7d20\uff08\u70b9\u3001\u7dda\u3001\u68d2\u306a\u3069\uff09\u3002</li> <li>\u7f8e\u7684\u8981\u7d20 (<code>aes</code>): \u5e7e\u4f55\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u898b\u305f\u76ee\u3092\u6c7a\u3081\u308b\u8981\u7d20\uff08\u4f4d\u7f6e\u3001\u8272\u3001\u5927\u304d\u3055\u306a\u3069\uff09\u3002</li> </ol> <p>\u3053\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3067\u3001\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316\u3092\u69cb\u7bc9\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#gapminder","title":"Gapminder\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316","text":"<p>Gapminder\u306f\u3001\u4e16\u754c\u306e\u7d4c\u6e08\u30fb\u5065\u5eb7\u30fb\u767a\u5c55\u72b6\u6cc1\u306b\u95a2\u3059\u308b\u30c7\u30fc\u30bf\u3092\u63d0\u4f9b\u3059\u308b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002\u3053\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u306f\u3001\u5404\u56fd\u306eGDP\u3001\u5bff\u547d\u3001\u4eba\u53e3\u306a\u3069\u306e\u60c5\u5831\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#_3","title":"\u30c7\u30fc\u30bf\u306e\u6e96\u5099","text":"<p>\u307e\u305a\u3001Gapminder\u30c7\u30fc\u30bf\u30922007\u5e74\u306e\u30c7\u30fc\u30bf\u306b\u7d5e\u308a\u8fbc\u3093\u3067\u8868\u793a\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <pre><code># 2007\u5e74\u306e\u30c7\u30fc\u30bf\u306e\u307f\u3092\u53d6\u5f97\ngapminder_2007 = gapminder[gapminder['year'] == 2007]\n\n# \u5fc5\u8981\u306a\u5217\u306e\u307f\u9078\u629e\ngapminder_2007 = gapminder_2007[['country', 'continent', 'lifeExp', 'pop', 'gdpPercap']]\ngapminder_2007.columns = ['Country', 'Continent', 'Life Expectancy', 'Population', 'GDP per Capita']\n\n# \u30c7\u30fc\u30bf\u306e\u5148\u982d\u3092\u8868\u793a\ngapminder_2007.head()\n</code></pre> <p>\u3053\u306e\u8868\u306e\u5404\u884c\u306f1\u3064\u306e\u56fd\u3092\u8868\u3057\u3001\u6b21\u306e\u60c5\u5831\u3092\u542b\u307f\u307e\u3059\u3002</p> <ol> <li>Country: \u56fd\u306e\u540d\u524d\u3002</li> <li>Continent: 5\u3064\u306e\u5927\u9678\u306e\u3044\u305a\u308c\u304b\uff08\u300cAmericas\u300d\u306f\u5317\u7c73\u3068\u5357\u7c73\u3092\u542b\u307f\u3001\u5357\u6975\u306f\u9664\u5916\uff09\u3002</li> <li>Life Expectancy: \u5e73\u5747\u5bff\u547d\uff08\u5e74\uff09\u3002</li> <li>Population: \u4eba\u53e3\uff08\u4eba\uff09\u3002</li> <li>GDP per Capita: 1\u4eba\u5f53\u305f\u308aGDP\uff08\u7c73\u30c9\u30eb\uff09\u3002</li> </ol>"},{"location":"lectures/SIWS/02-visualization/#_4","title":"\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316","text":"<p>2007\u5e74\u306eGDP\u3068\u5e73\u5747\u5bff\u547d\u306e\u95a2\u4fc2\u3092\u53ef\u8996\u5316\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <pre><code>plt.figure(figsize=(10, 6))\n\nsns.scatterplot(\n    data=gapminder_2007,\n    x='GDP per Capita',\n    y='Life Expectancy',\n    size='Population',\n    hue='Continent',\n    sizes=(10, 200),\n    alpha=0.7\n)\n\nplt.xscale('log')  # GDP\u306f\u5bfe\u6570\u30b9\u30b1\u30fc\u30eb\u306b\u5909\u63db\nplt.xlabel('GDP per Capita (log scale)')\nplt.ylabel('Life Expectancy (years)')\nplt.title('2007\u5e74\u306b\u304a\u3051\u308bGDP\u3068\u5e73\u5747\u5bff\u547d\u306e\u95a2\u4fc2')\nplt.legend(title='Continent', bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.show()\n</code></pre> <p>\u3053\u306e\u3068\u304d\u3001\u30b0\u30e9\u30d5\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u307f\u308b\u3068\u3001\u65e5\u672c\u8a9e\u304c\u8868\u793a\u3067\u304d\u3066\u3044\u306a\u3044\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u306d\u3002\u3053\u308c\u306f\u3001\u975e\u5e38\u306b\u3088\u304f\u8d77\u304d\u308b\u554f\u984c\u3067\u3059\u3002python\u3067\u306f\u3001\u3053\u308c\u3092\u4ee5\u4e0b\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3053\u3068\u3067\u89e3\u6d88\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <pre><code>!pip install japanize-matplotlib\n</code></pre> <p>\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u5f8c\u3067\u3001\u6700\u521d\u306e <code>import</code> \u90e8\u5206\u3092\u6b21\u306e\u3088\u3046\u306b\u5909\u66f4\u3057\u307e\u3057\u3087\u3046\u3002</p> <pre><code>import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport japanize_matplotlib\nimport seaborn as sns\nfrom gapminder import gapminder\n</code></pre> <p>\u3053\u308c\u3067\u65e5\u672c\u8a9e\u304c\u8868\u793a\u3055\u308c\u308b\u306f\u305a\u3067\u3059\u3002\u6b21\u306b\u3001\u3053\u306e\u30d7\u30ed\u30c3\u30c8\u3092\u8a73\u3057\u304f\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002</p> <ul> <li>\u5909\u6570 GDP per Capita\uff081\u4eba\u5f53\u305f\u308aGDP\uff09 \u306f\u3001x\u8ef8\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u3066\u3044\u307e\u3059\u3002</li> <li>\u5909\u6570 Life Expectancy\uff08\u5e73\u5747\u5bff\u547d\uff09 \u306f\u3001\u30dd\u30a4\u30f3\u30c8\u306e y\u8ef8\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u3066\u3044\u307e\u3059\u3002</li> <li>\u5909\u6570 Population\uff08\u4eba\u53e3\uff09 \u306f\u3001\u30dd\u30a4\u30f3\u30c8\u306e \u30b5\u30a4\u30ba\uff08size aesthetic\uff09 \u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u307e\u3059\u3002</li> <li>\u5909\u6570 Continent\uff08\u5927\u9678\uff09 \u306f\u3001\u30dd\u30a4\u30f3\u30c8\u306e \u8272\uff08color aesthetic\uff09 \u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u307e\u3059\u3002</li> </ul> <p>\u3053\u3053\u3067\u3001<code>data</code>\uff08\u30c7\u30fc\u30bf\uff09\u3068\u306f python\u306e <code>dataframe</code>\u306b\u5bfe\u5fdc\u3057\u3001\u30c7\u30fc\u30bf\u5909\u6570\uff08data variables\uff09 \u304c\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u5185\u306e\u7279\u5b9a\u306e\u5217\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u3002\u7279\u306b\u3053\u306e\u30d7\u30ed\u30c3\u30c8\u3067\u306f\u30014\u3064\u306e\u60c5\u5831\u3092\u540c\u6642\u306b\u96c6\u7d04\u3057\u3066\u3044\u307e\u3059\u3002x\u8ef8\u306b\u4e00\u4eba\u3042\u305f\u308a\u306eGDP\u3001y\u8ef8\u306b\u5e73\u5747\u5bff\u547d\u3001\u3055\u3089\u306b\u70b9\u306e\u5927\u304d\u3055\u3067\u4eba\u53e3\u3001\u305d\u3057\u3066\u3001\u70b9\u306e\u8272\u3067\u5927\u9678\u3092\u8868\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u30d7\u30ed\u30c3\u30c8\u3092\u901a\u3058\u3066\u3001\u4ee5\u4e0b\u306e\u50be\u5411\u304c\u8aad\u307f\u53d6\u308c\u307e\u3059\u3002</p> <ul> <li>GDP\u304c\u9ad8\u3044\u56fd\u307b\u3069\u3001\u5e73\u5747\u5bff\u547d\u304c\u9577\u3044\u50be\u5411\u304c\u3042\u308b\u3002</li> <li>\u5927\u9678\u3054\u3068\u306b\u5206\u5e03\u304c\u7570\u306a\u308a\u3001\u7279\u306b\u30a2\u30d5\u30ea\u30ab\uff08Africa\uff09\u306e\u56fd\u3005\u306fGDP\u3068\u5e73\u5747\u5bff\u547d\u304c\u4f4e\u3044\u50be\u5411\u304c\u3042\u308b\u3002</li> <li>\u56fd\u3054\u3068\u306e\u4eba\u53e3\uff08\u70b9\u306e\u5927\u304d\u3055\uff09\u3082\u8996\u899a\u7684\u306b\u628a\u63e1\u3067\u304d\u308b\u3002</li> </ul> <p>\u3053\u306e\u3088\u3046\u306b\u81ea\u5206\u304c\u793a\u3057\u305f\u3044\u3082\u306e\u304c\u4f55\u304b\u3068\u3044\u3046\u3053\u3068\u3092\u610f\u8b58\u3057\u3066\u3001\u9069\u5207\u306a\u56f3\u3092\u66f8\u304f\u3053\u3068\u306f\u3001\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u306e\u57fa\u672c\u3068\u306a\u308b\u3082\u306e\u3067\u3059\u3002\u307e\u305f\u3001\u30c7\u30fc\u30bf\u306e\u7a2e\u985e\u306b\u3088\u3063\u3066\u3082\u3001\u6700\u9069\u306a\u56f3\u306e\u66f8\u304d\u65b9\u306f\u7570\u306a\u308a\u307e\u3059\u3002\u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u3068\u3057\u3066\u3001\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u306b\u304a\u3051\u308b5\u3064\u306e\u57fa\u672c\u7684\u306a\u56f3\u306b\u3064\u3044\u3066\u5b66\u3073\u307e\u3057\u3087\u3046\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#python-5-5ng","title":"Python\u306b\u3088\u308b\u30c7\u30fc\u30bf\u53ef\u8996\u5316\u5165\u9580: 5\u3064\u306e\u4ee3\u8868\u7684\u306a\u30b0\u30e9\u30d5 (5NG)","text":"<p>\u3053\u306e\u30c6\u30ad\u30b9\u30c8\u3067\u306f\u3001Google Colaboratory\u4e0a\u3067Python\u3001NumPy\u3001Pandas\u3001matplotlib\u3001seaborn\u3092\u7528\u3044\u3066\u3001\u30c7\u30fc\u30bf\u53ef\u8996\u5316\u306e\u57fa\u672c\u3068\u306a\u308b5\u7a2e\u985e\u306e\u30b0\u30e9\u30d5\uff085NG\uff09\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3001seaborn\u306b\u7d44\u307f\u8fbc\u307e\u308c\u3066\u3044\u308biris\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f8b\u3068\u3057\u3066\u4f7f\u7528\u3057\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#5-5ng","title":"5\u3064\u306e\u4ee3\u8868\u7684\u306a\u30b0\u30e9\u30d5 \u2013 5NG","text":"<p>\u672c\u66f8\u3067\u306f\u3001\u4ee5\u4e0b\u306e5\u7a2e\u985e\u306e\u30b0\u30e9\u30d5\u306b\u6ce8\u76ee\u3057\u307e\u3059\u3002\u3053\u308c\u3089\u306f\u4e00\u822c\u7684\u306b\u540d\u524d\u304c\u4ed8\u3051\u3089\u308c\u3066\u304a\u308a\u3001\u4ee5\u964d\u300c5NG\u300d\u3068\u547c\u3073\u307e\u3059\uff1a</p> <ul> <li>\u6563\u5e03\u56f3 (scatterplots)</li> <li>\u6298\u308c\u7dda\u30b0\u30e9\u30d5 (linegraphs)</li> <li>\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0 (histograms)</li> <li>\u7bb1\u3072\u3052\u56f3 (boxplots)</li> <li>\u68d2\u30b0\u30e9\u30d5 (barplots)</li> </ul> <p>\u3053\u308c\u3089\u306e\u57fa\u672c\u7684\u306a\u30b0\u30e9\u30d5\u3092\u899a\u3048\u3066\u304a\u304f\u3053\u3068\u3067\u3001\u3055\u307e\u3056\u307e\u306a\u7a2e\u985e\u306e\u5909\u6570\u3092\u8996\u899a\u7684\u306b\u8868\u73fe\u3059\u308b\u969b\u306b\u975e\u5e38\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002\u306a\u304a\u3001\u3042\u308b\u30b0\u30e9\u30d5\u306f\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u306b\u9069\u3057\u3066\u304a\u308a\u3001\u307e\u305f\u5225\u306e\u30b0\u30e9\u30d5\u306f\u6570\u5024\u5909\u6570\u306b\u9069\u3057\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#5ng1-scatterplots","title":"5NG#1: \u6563\u5e03\u56f3 (Scatterplots)","text":"<p>\u6563\u5e03\u56f3\u306f\u30012\u3064\u306e\u6570\u5024\u5909\u6570\u9593\u306e\u95a2\u4fc2\u6027\u3092\u8996\u899a\u5316\u3059\u308b\u6700\u3082\u57fa\u672c\u7684\u306a\u30b0\u30e9\u30d5\u3067\u3059\u3002\u3053\u3053\u3067\u306f\u3001iris\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u4ee5\u4e0b\u306e2\u3064\u306e\u6570\u5024\u5909\u6570\u306e\u95a2\u4fc2\u3092\u6563\u5e03\u56f3\u3067\u8868\u73fe\u3057\u307e\u3059\uff1a</p> <ul> <li>sepal_length\uff1ax\u8ef8</li> <li>petal_length\uff1ay\u8ef8</li> </ul>"},{"location":"lectures/SIWS/02-visualization/#_5","title":"\u57fa\u672c\u7684\u306a\u6563\u5e03\u56f3\u306e\u4f5c\u6210","text":"<p>\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306f\u3001iris\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u307f\u3001<code>sepal_length</code> \u3068 <code>petal_length</code> \u306e\u95a2\u4fc2\u3092\u6563\u5e03\u56f3\u3067\u53ef\u8996\u5316\u3059\u308b\u4f8b\u3067\u3059\u3002</p> <pre><code>import seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Iris\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f\niris = sns.load_dataset(\"iris\")\n\n# \u57fa\u672c\u7684\u306a\u6563\u5e03\u56f3\u306e\u4f5c\u6210\nsns.scatterplot(data=iris, x=\"sepal_length\", y=\"petal_length\")\nplt.title(\"Iris\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8: sepal_length\u3068petal_length\u306e\u6563\u5e03\u56f3\")\nplt.xlabel(\"sepal_length\")\nplt.ylabel(\"petal_length\")\nplt.show()\n</code></pre> <p>\u3053\u306e\u30b3\u30fc\u30c9\u3067\u306f\u3001sns.scatterplot \u95a2\u6570\u3092\u7528\u3044\u3066\u3001iris\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5185\u306esepal_length\uff08x\u8ef8\uff09\u3068petal_length\uff08y\u8ef8\uff09\u306e\u5404\u30b5\u30f3\u30d7\u30eb\u3092\u70b9\u3068\u3057\u3066\u30d7\u30ed\u30c3\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\u56f3\u3067\u306f\u3001\u5404\u70b9\u304c1\u3064\u306e\u82b1\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u8868\u3057\u3066\u304a\u308a\u3001\u4e21\u5909\u6570\u9593\u306e\u95a2\u4fc2\u6027\u304c\u8996\u899a\u7684\u306b\u628a\u63e1\u3067\u304d\u307e\u3059\u3002</p> <p>Note</p> <p>(LC2.1) Iris\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092Pandas\u306eDataFrame\u3068\u3057\u3066\u8868\u793a\u3057\u3001\u5404\u5909\u6570\uff08sepal_length, sepal_width, petal_length, petal_width, species\uff09\u306e\u578b\u3068\u5185\u5bb9\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#_6","title":"\u904e\u5270\u306a\u30d7\u30ed\u30c3\u30c8\uff08\u30aa\u30fc\u30d0\u30fc\u30d7\u30ed\u30c3\u30c6\u30a3\u30f3\u30b0\uff09\u3078\u306e\u5bfe\u51e6","text":"<p>\u30c7\u30fc\u30bf\u6570\u304c\u975e\u5e38\u306b\u591a\u3044\u5834\u5408\u3001\u540c\u3058\u4f4d\u7f6e\u306b\u70b9\u304c\u91cd\u306a\u3063\u3066\u3057\u307e\u3044\u3001\u5b9f\u969b\u306b\u30d7\u30ed\u30c3\u30c8\u3055\u308c\u3066\u3044\u308b\u70b9\u306e\u6570\u304c\u5206\u304b\u308a\u306b\u304f\u304f\u306a\u308b\u300c\u30aa\u30fc\u30d0\u30fc\u30d7\u30ed\u30c3\u30c6\u30a3\u30f3\u30b0\u300d\u304c\u767a\u751f\u3057\u307e\u3059\u3002\u3053\u308c\u306b\u5bfe\u51e6\u3059\u308b\u65b9\u6cd5\u306f\u4e3b\u306b2\u3064\u3042\u308a\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#1-alpha","title":"\u65b9\u6cd51: \u900f\u660e\u5ea6 (alpha) \u306e\u8abf\u6574","text":"<p>\u70b9\u306e\u900f\u660e\u5ea6\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u3067\u3001\u91cd\u306a\u3063\u305f\u90e8\u5206\u304c\u6fc3\u304f\u898b\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u3001\u70b9\u306e\u5bc6\u96c6\u5ea6\u304c\u8996\u899a\u7684\u306b\u5206\u304b\u308a\u3084\u3059\u304f\u306a\u308a\u307e\u3059\u3002\u4ee5\u4e0b\u306f\u900f\u660e\u5ea6\u3092\u8a2d\u5b9a\u3057\u305f\u6563\u5e03\u56f3\u306e\u4f8b\u3067\u3059\u3002</p> <p>python \u30b3\u30d4\u30fc\u3059\u308b sns.scatterplot(data=iris, x=\"sepal_length\", y=\"petal_length\", alpha=0.5) plt.title(\"\u900f\u660e\u5ea6\u3092\u8abf\u6574\u3057\u305f\u6563\u5e03\u56f3 (alpha=0.5)\") plt.xlabel(\"sepal_length\") plt.ylabel(\"petal_length\") plt.show() \u3053\u3053\u3067\u306f\u3001alpha \u30d1\u30e9\u30e1\u30fc\u30bf\u30920.5\u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u5404\u70b9\u306e\u4e0d\u900f\u660e\u5ea6\u304c50%\u3068\u306a\u308a\u3001\u91cd\u306a\u3063\u3066\u3044\u308b\u90e8\u5206\u306f\u3088\u308a\u6fc3\u304f\u8868\u793a\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#2-jitter","title":"\u65b9\u6cd52: \u30b8\u30c3\u30bf\u30fc (Jitter) \u306e\u8ffd\u52a0","text":"<p>\u30b8\u30c3\u30bf\u30fc\u306f\u3001\u5404\u70b9\u306b\u5c0f\u3055\u306a\u30e9\u30f3\u30c0\u30e0\u306a\u305a\u308c\uff08\u30ce\u30a4\u30ba\uff09\u3092\u52a0\u3048\u3066\u3001\u540c\u3058\u4f4d\u7f6e\u306b\u91cd\u306a\u3063\u3066\u8868\u793a\u3055\u308c\u308b\u70b9\u3092\u5c11\u3057\u305a\u3089\u3059\u624b\u6cd5\u3067\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u91cd\u306a\u308a\u5408\u3063\u3066\u3044\u308b\u70b9\u304c\u500b\u5225\u306b\u898b\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306f\u30b8\u30c3\u30bf\u30fc\u3092\u52a0\u3048\u305f\u6563\u5e03\u56f3\u306e\u4f8b\u3067\u3059\u3002</p> <pre><code>import numpy as np\n\n# \u30b8\u30c3\u30bf\u30fc\u306e\u5f37\u3055\uff08\u8abf\u6574\u53ef\u80fd\uff09\njitter_strength = 0.1\n\n# sepal_length\u3068petal_length\u306b\u30e9\u30f3\u30c0\u30e0\u306a\u30ce\u30a4\u30ba\u3092\u52a0\u3048\u308b\nx_jittered = iris[\"sepal_length\"] + np.random.uniform(-jitter_strength, jitter_strength, size=len(iris))\ny_jittered = iris[\"petal_length\"] + np.random.uniform(-jitter_strength, jitter_strength, size=len(iris))\n\nplt.figure()\nplt.scatter(x_jittered, y_jittered, alpha=0.7)\nplt.title(\"\u30b8\u30c3\u30bf\u30fc\u3092\u52a0\u3048\u305f\u6563\u5e03\u56f3\")\nplt.xlabel(\"sepal_length (jittered)\")\nplt.ylabel(\"petal_length (jittered)\")\nplt.show()\n</code></pre> <p>\u3053\u306e\u4f8b\u3067\u306f\u3001np.random.uniform \u3092\u7528\u3044\u3066\u3001\u5404\u70b9\u306b -0.1 \u304b\u3089 0.1 \u306e\u7bc4\u56f2\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u5024\u3092\u52a0\u3048\u3066\u3044\u307e\u3059\u3002\u30b8\u30c3\u30bf\u30fc\u306f\u3042\u304f\u307e\u3067\u8996\u899a\u5316\u306e\u305f\u3081\u306e\u624b\u6cd5\u3067\u3042\u308a\u3001\u5143\u306e\u30c7\u30fc\u30bf\u81ea\u4f53\u306f\u5909\u66f4\u3055\u308c\u307e\u305b\u3093\u3002</p> <p>Learning Check</p> <p>(LC2.2) \u900f\u660e\u5ea6\uff08alpha\uff09\u306e\u8a2d\u5b9a\u304c\u3001\u91cd\u306a\u308a\u5408\u3046\u70b9\u306e\u5bc6\u96c6\u5ea6\u3092\u3069\u306e\u3088\u3046\u306b\u8868\u73fe\u3059\u308b\u304b\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002 (LC2.3) \u30b8\u30c3\u30bf\u30fc\u306b\u3088\u3063\u3066\u70b9\u304c\u308f\u305a\u304b\u306b\u305a\u308c\u308b\u3068\u3001\u5143\u306e\u30c7\u30fc\u30bf\u306e\u30d1\u30bf\u30fc\u30f3\u306f\u3069\u306e\u3088\u3046\u306b\u5909\u5316\u3059\u308b\u3067\u3057\u3087\u3046\u304b\uff1f\u307e\u305f\u3001\u30b8\u30c3\u30bf\u30fc\u306e\u5f37\u3055\u306f\u3069\u306e\u3088\u3046\u306b\u8abf\u6574\u3059\u308b\u306e\u304c\u9069\u5207\u304b\u691c\u8a0e\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#_7","title":"\u30c1\u30a7\u30c3\u30af\u9805\u76ee","text":"<ul> <li>(LC2.4) \u900f\u660e\u5ea6\u306e\u8abf\u6574\u3068\u30b8\u30c3\u30bf\u30fc\u306e\u8ffd\u52a0\u3001\u305d\u308c\u305e\u308c\u306e\u624b\u6cd5\u306e\u30e1\u30ea\u30c3\u30c8\u30fb\u30c7\u30e1\u30ea\u30c3\u30c8\u3092\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002</li> <li>(LC2.5) Iris\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5185\u306e\u4ed6\u306e\u6570\u5024\u5909\u6570\uff08\u4f8b\u3048\u3070\u3001sepal_width\u3084petal_width\uff09\u3092\u7528\u3044\u3066\u3001\u5225\u306e\u6563\u5e03\u56f3\u3092\u4f5c\u6210\u3057\u3001\u5f97\u3089\u308c\u308b\u30d1\u30bf\u30fc\u30f3\u306e\u9055\u3044\u3092\u89b3\u5bdf\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002</li> </ul> <p>\u3053\u306e\u3088\u3046\u306b\u3001Python\u3068Google Colaboratory\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3001R\u3084RStudio\u3067\u884c\u3063\u3066\u3044\u305f\u3088\u3046\u306a\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u306e\u57fa\u672c\u64cd\u4f5c\u3092\u624b\u8efd\u306b\u518d\u73fe\u3057\u3001\u3055\u307e\u3056\u307e\u306a\u624b\u6cd5\u3067\u30c7\u30fc\u30bf\u306e\u7279\u5fb4\u3092\u660e\u3089\u304b\u306b\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\u6b21\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3001\u6298\u308c\u7dda\u30b0\u30e9\u30d5\u3001\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3001\u7bb1\u3072\u3052\u56f3\u3001\u68d2\u30b0\u30e9\u30d5\u306e\u4f5c\u6210\u65b9\u6cd5\u306b\u3064\u3044\u3066\u3082\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#_8","title":"\u307e\u3068\u3081","text":"<p>\u6563\u5e03\u56f3\u306f\u30012\u3064\u306e\u6570\u5024\u5909\u6570\u9593\u306e\u95a2\u4fc2\u3092\u76f4\u611f\u7684\u306b\u628a\u63e1\u3059\u308b\u305f\u3081\u306e\u57fa\u672c\u7684\u306a\u53ef\u8996\u5316\u624b\u6cd5\u3067\u3059\u3002\u7279\u306b\u30c7\u30fc\u30bf\u91cf\u304c\u591a\u3044\u5834\u5408\u3001\u900f\u660e\u5ea6\u306e\u8abf\u6574\u3084\u30b8\u30c3\u30bf\u30fc\u306e\u8ffd\u52a0\u3068\u3044\u3063\u305f\u5de5\u592b\u3092\u3059\u308b\u3053\u3068\u3067\u3001\u91cd\u306a\u308a\u5408\u3063\u305f\u30c7\u30fc\u30bf\u70b9\u306e\u60c5\u5831\u3092\u3088\u308a\u660e\u78ba\u306b\u4f1d\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3069\u306e\u624b\u6cd5\u3092\u7528\u3044\u308b\u304b\u306f\u3001\u30c7\u30fc\u30bf\u306e\u7279\u6027\u3084\u4f1d\u3048\u305f\u3044\u5185\u5bb9\u306b\u5fdc\u3058\u3066\u5224\u65ad\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#5ng2-linegraphs","title":"5NG#2: \u6298\u308c\u7dda\u30b0\u30e9\u30d5 (Linegraphs)","text":"<p>\u6298\u308c\u7dda\u30b0\u30e9\u30d5\u306f\u3001x\u8ef8\u306b\u9806\u5e8f\u6027\uff08\u7279\u306b\u6642\u9593\u306a\u3069\u306e\u9023\u7d9a\u7684\u306a\u60c5\u5831\uff09\u304c\u3042\u308b\u5834\u5408\u306b\u30012\u3064\u306e\u6570\u5024\u5909\u6570\u9593\u306e\u95a2\u4fc2\u3092\u8996\u899a\u5316\u3059\u308b\u305f\u3081\u306e\u30b0\u30e9\u30d5\u3067\u3059\u3002\u96a3\u63a5\u3059\u308b\u30c7\u30fc\u30bf\u70b9\u3092\u7dda\u3067\u7d50\u3076\u3053\u3068\u3067\u3001\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306e\u5909\u5316\u3084\u30c8\u30ec\u30f3\u30c9\u3092\u660e\u78ba\u306b\u793a\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <p>\u3053\u3053\u3067\u306f\u3001seaborn\u306b\u7d44\u307f\u8fbc\u307e\u308c\u3066\u3044\u308bflights\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f7f\u7528\u3057\u3066\u30011949\u5e74\u304b\u30891960\u5e74\u307e\u3067\u306e\u6708\u3054\u3068\u306e\u4e57\u5ba2\u6570\u306e\u63a8\u79fb\u3092\u6298\u308c\u7dda\u30b0\u30e9\u30d5\u3067\u53ef\u8996\u5316\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002 flights\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u3001\u4ee5\u4e0b\u306e\u5909\u6570\u3092\u542b\u3093\u3067\u3044\u307e\u3059\uff1a</p> <ul> <li>year: \u5e74\uff081949\uff5e1960\uff09</li> <li>month: \u6708\uff08\"Jan\", \"Feb\", \u2026, \"Dec\" \u3068\u3044\u3063\u305f\u6587\u5b57\u5217\uff09</li> <li>passengers: \u5404\u6708\u306e\u4e57\u5ba2\u6570</li> </ul>"},{"location":"lectures/SIWS/02-visualization/#flights","title":"flights\u30c7\u30fc\u30bf\u306e\u6e96\u5099\u3068\u65e5\u6642\u5909\u6570\u306e\u4f5c\u6210","text":"<p>\u6298\u308c\u7dda\u30b0\u30e9\u30d5\u3092\u4f5c\u6210\u3059\u308b\u969b\u306b\u306f\u3001x\u8ef8\u306b\u9806\u5e8f\u6027\u306e\u3042\u308b\u5909\u6570\uff08\u3053\u3053\u3067\u306f\u65e5\u6642\uff09\u304c\u5fc5\u8981\u3067\u3059\u3002 flights\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u306f\u3001<code>year</code> \u3068 <code>month</code> \u306e2\u3064\u306e\u5909\u6570\u304b\u3089\u65e5\u6642\u60c5\u5831\u3092\u4f5c\u6210\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u306f\u3001Pandas\u3092\u7528\u3044\u3066\u3053\u308c\u3089\u306e\u5909\u6570\u3092\u7d44\u307f\u5408\u308f\u305b\u3001<code>date</code> \u3068\u3044\u3046\u65b0\u3057\u3044\u65e5\u6642\u578b\u306e\u5909\u6570\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002</p> <pre><code>import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# flights\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f\nflights = sns.load_dataset(\"flights\")\nprint(flights.head())\n\n# year\u3068month\u304b\u3089datetime\u578b\u306e\u5909\u6570\u3092\u4f5c\u6210\n# flights\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306emonth\u5217\u306f \"Jan\", \"Feb\", ... \u306e\u5f62\u5f0f\u306e\u305f\u3081\u3001'%Y-%b' \u3092\u6307\u5b9a\nflights['date'] = pd.to_datetime(flights['year'].astype(str) + '-' + flights['month'], format='%Y-%b')\nprint(flights.head())\n</code></pre>"},{"location":"lectures/SIWS/02-visualization/#_9","title":"\u6298\u308c\u7dda\u30b0\u30e9\u30d5\u306e\u4f5c\u6210","text":"<p>\u4f5c\u6210\u3057\u305fdate\u5909\u6570\u3092x\u8ef8\u3001passengers\u5909\u6570\u3092y\u8ef8\u3068\u3057\u3066\u3001seaborn\u306elineplot()\u95a2\u6570\u3092\u4f7f\u3044\u6298\u308c\u7dda\u30b0\u30e9\u30d5\u3092\u63cf\u3044\u3066\u307f\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u306f\u3001\u56f3\u306e\u30b5\u30a4\u30ba\u3092\u8abf\u6574\u3057\u3001\u30bf\u30a4\u30c8\u30eb\u3084\u8ef8\u30e9\u30d9\u30eb\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002</p> <pre><code>plt.figure(figsize=(12,6))\nsns.lineplot(data=flights, x=\"date\", y=\"passengers\")\nplt.title(\"1949\u5e74\uff5e1960\u5e74\u306e\u6708\u3054\u3068\u306e\u4e57\u5ba2\u6570\u306e\u63a8\u79fb\")\nplt.xlabel(\"\u65e5\u4ed8\")\nplt.ylabel(\"\u4e57\u5ba2\u6570\")\nplt.show()\n</code></pre> <p>\u3053\u306e\u30b3\u30fc\u30c9\u3067\u306f\u3001date\uff08\u65e5\u6642\u578b\u306e\u5909\u6570\uff09\u306b\u6cbf\u3063\u3066passengers\uff08\u4e57\u5ba2\u6570\uff09\u306e\u5404\u30c7\u30fc\u30bf\u70b9\u3092\u7dda\u3067\u7d50\u3093\u3067\u3044\u307e\u3059\u3002\u65e5\u6642\u306e\u9806\u5e8f\u304c\u4fdd\u305f\u308c\u308b\u305f\u3081\u3001\u9023\u7d9a\u3057\u305f\u30c7\u30fc\u30bf\u306e\u5909\u5316\u3092\u76f4\u611f\u7684\u306b\u628a\u63e1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#_10","title":"\u30c1\u30a7\u30c3\u30af\u9805\u76ee","text":"<p>(LC1) flights\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306emonth\u5217\u306f\u3069\u306e\u3088\u3046\u306a\u5f62\u5f0f\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304b\uff1f\u307e\u305f\u3001\u306a\u305cyear\u3068month\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u65e5\u6642\u578b\u306e\u5909\u6570\u3092\u4f5c\u6210\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f (LC2) \u6298\u308c\u7dda\u30b0\u30e9\u30d5\u3067\u30c7\u30fc\u30bf\u70b9\u3092\u7dda\u3067\u7d50\u3076\u3053\u3068\u306f\u3001\u3069\u306e\u3088\u3046\u306a\u60c5\u5831\uff08\u4f8b\uff1a\u50be\u5411\u3084\u5909\u5316\u306e\u65b9\u5411\u6027\uff09\u3092\u8996\u899a\u7684\u306b\u4f1d\u3048\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f (LC3) \u4ed6\u306e\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\uff08\u4f8b\uff1a\u3042\u308b\u90fd\u5e02\u306e\u6708\u5225\u5e73\u5747\u6c17\u6e29\u306a\u3069\uff09\u306b\u304a\u3044\u3066\u3001\u540c\u69d8\u306e\u65b9\u6cd5\u3067\u6298\u308c\u7dda\u30b0\u30e9\u30d5\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u306f\u53ef\u80fd\u3067\u3057\u3087\u3046\u304b\uff1f\u305d\u306e\u5834\u5408\u3001\u3069\u306e\u3088\u3046\u306a\u70b9\u306b\u6ce8\u610f\u3059\u3079\u304d\u3067\u3057\u3087\u3046\u304b\uff1f</p>"},{"location":"lectures/SIWS/02-visualization/#_11","title":"\u307e\u3068\u3081","text":"<p>\u6298\u308c\u7dda\u30b0\u30e9\u30d5\u306f\u3001\u6642\u9593\u3084\u9806\u5e8f\u6027\u306e\u3042\u308b\u5909\u6570\u3092x\u8ef8\u306b\u3068\u308b\u3053\u3068\u3067\u3001\u9023\u7d9a\u3057\u305f\u30c7\u30fc\u30bf\u306e\u5909\u5316\u3092\u52b9\u679c\u7684\u306b\u8868\u73fe\u3067\u304d\u307e\u3059\u3002 \u3053\u3053\u3067\u306f\u3001seaborn\u306eflights\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f7f\u7528\u3057\u3001year \u3068 month \u304b\u3089\u4f5c\u6210\u3057\u305f\u65e5\u6642\u578b\u306e\u5909\u6570\u3092\u7528\u3044\u3066\u30011949\u5e74\u304b\u30891960\u5e74\u307e\u3067\u306e\u6708\u3054\u3068\u306e\u4e57\u5ba2\u6570\u306e\u63a8\u79fb\u3092\u7dda\u30b0\u30e9\u30d5\u3067\u53ef\u8996\u5316\u3057\u307e\u3057\u305f\u3002 \u3053\u306e\u624b\u6cd5\u306f\u3001\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306e\u5206\u6790\u3084\u30c8\u30ec\u30f3\u30c9\u306e\u628a\u63e1\u306b\u975e\u5e38\u306b\u6709\u7528\u3067\u3059\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#5ng3-histograms","title":"5NG#3: \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0 (Histograms)","text":"<p>\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306f\u30011\u3064\u306e\u6570\u5024\u5909\u6570\u306e\u5206\u5e03\u3092\u8996\u899a\u5316\u3059\u308b\u305f\u3081\u306e\u30b0\u30e9\u30d5\u3067\u3059\u3002  \u3053\u3053\u3067\u306f\u3001seaborn \u306b\u7d44\u307f\u8fbc\u307e\u308c\u3066\u3044\u308b titanic \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u7528\u3044\u3001\u4e57\u5ba2\u306e age\uff08\u5e74\u9f62\uff09\u306e\u5206\u5e03\u306b\u6ce8\u76ee\u3057\u307e\u3059\u3002  \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u70b9\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002</p> <ol> <li>\u6700\u5c0f\u5024\u3068\u6700\u5927\u5024\u306f\u3069\u3053\u304b\uff1f</li> <li>\u4e2d\u5fc3\u3084\u300c\u6700\u3082\u5178\u578b\u7684\u306a\u300d\u5024\u306f\u3069\u3053\u304b\uff1f</li> <li>\u5024\u306e\u5e83\u304c\u308a\u306f\u3069\u306e\u7a0b\u5ea6\u304b\uff1f</li> <li>\u983b\u51fa\u5024\u3068\u7a00\u306a\u5024\u306f\u3069\u3053\u304b\uff1f</li> </ol>"},{"location":"lectures/SIWS/02-visualization/#1","title":"1. \u5206\u5e03\u306e\u6982\u8981\u3092\u8996\u899a\u5316\u3059\u308b","text":"<p>\u307e\u305a\u3001\u5e74\u9f62\u306e\u5404\u89b3\u6e2c\u5024\u3092\u6a2a\u4e00\u5217\u306b\u4e26\u3079\u305f\u30d7\u30ed\u30c3\u30c8\u3092\u4f5c\u6210\u3057\u3066\u3001\u5206\u5e03\u306e\u5927\u307e\u304b\u306a\u69d8\u5b50\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3059\u3002 \uff08\u3053\u306e\u30d7\u30ed\u30c3\u30c8\u306f\u3001\u5f8c\u8ff0\u3059\u308b\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3068\u6bd4\u3079\u308b\u3068\u30aa\u30fc\u30d0\u30fc\u30d7\u30ed\u30c3\u30c8\u304c\u767a\u751f\u3059\u308b\u305f\u3081\u3001\u7d30\u304b\u3044\u983b\u5ea6\u306f\u8aad\u307f\u53d6\u308a\u306b\u304f\u3044\u3067\u3059\u304c\u3001\u5168\u4f53\u306e\u5e83\u304c\u308a\u3092\u76f4\u611f\u7684\u306b\u628a\u63e1\u3059\u308b\u306e\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002\uff09</p> <pre><code>import seaborn as sns\nimport matplotlib.pyplot as plt\n\n# titanic\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f\ntitanic = sns.load_dataset(\"titanic\")\n\n# NaN\u306e\u9664\u5916\uff08age\u5217\u306b\u306f\u6b20\u640d\u5024\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\uff09\ntitanic_age = titanic.dropna(subset=[\"age\"])\n\n# \u5404\u5e74\u9f62\u306e\u5024\u3092\u6a2a\u4e00\u5217\u306b\u4e26\u3079\u308b\uff08y\u5ea7\u6a19\u306f\u56fa\u5b9a\u5024\uff09\nplt.figure(figsize=(10, 1))\nsns.stripplot(x=\"age\", data=titanic_age, jitter=False, color=\"gray\")\nplt.xlabel(\"Age\")\nplt.yticks([])  # y\u8ef8\u306e\u76ee\u76db\u308a\u3092\u975e\u8868\u793a\u306b\nplt.title(\"Titanic\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\uff1a\u4e57\u5ba2\u306e\u5e74\u9f62\u306e\u6563\u5e03\u56f3\uff08\u6a2a\u4e00\u5217\uff09\")\nplt.show()\n</code></pre> <p>\u3053\u306e\u30d7\u30ed\u30c3\u30c8\u3067\u306f\u3001\u5404\u70b9\u304c\u500b\u3005\u306e\u4e57\u5ba2\u306e\u5e74\u9f62\u3092\u793a\u3057\u3066\u304a\u308a\u3001\u5e74\u9f62\u306e\u5206\u5e03\u306e\u6982\u5f62\u3092\u628a\u63e1\u3067\u304d\u307e\u3059\u3002 \u305f\u3060\u3057\u3001\u591a\u304f\u306e\u70b9\u304c\u91cd\u306a\u3063\u3066\u8868\u793a\u3055\u308c\u308b\u305f\u3081\u3001\u7d30\u304b\u3044\u983b\u5ea6\u306f\u898b\u3048\u306b\u304f\u3044\u3067\u3059\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#2","title":"2. \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306e\u4f5c\u6210","text":"<p>\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3067\u306f\u3001x\u8ef8\uff08\u3053\u3053\u3067\u306f\u5e74\u9f62\uff09\u3092\u3044\u304f\u3064\u304b\u306e\u300c\u30d3\u30f3\u300d\uff08\u533a\u9593\uff09\u306b\u5206\u5272\u3057\u3001\u5404\u533a\u9593\u306b\u542b\u307e\u308c\u308b\u89b3\u6e2c\u5024\u306e\u6570\uff08\u5ea6\u6570\uff09\u3092\u68d2\u30b0\u30e9\u30d5\u3067\u793a\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u8a2d\u5b9a\u3067\u5e74\u9f62\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u3059\u308b\u4f8b\u3067\u3059\u3002</p> <pre><code>plt.figure(figsize=(10,6))\nsns.histplot(data=titanic_age, x=\"age\")\nplt.title(\"Titanic\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\uff1a\u4e57\u5ba2\u306e\u5e74\u9f62\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0 (\u30c7\u30d5\u30a9\u30eb\u30c8\u8a2d\u5b9a)\")\nplt.xlabel(\"Age\")\nplt.ylabel(\"Count\")\nplt.show()\n</code></pre> <p>\u3053\u306e\u30d7\u30ed\u30c3\u30c8\u3067\u306f\u3001seaborn \u304c\u81ea\u52d5\u7684\u306b30\u500b\u7a0b\u5ea6\u306e\u30d3\u30f3\u306b\u5206\u5272\u3057\u3066\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u63cf\u753b\u3057\u3066\u3044\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u30d3\u30f3\u306e\u6570\u304c\u591a\u3059\u304e\u308b\u5834\u5408\u3001\u5404\u30d3\u30f3\u306e\u5e45\u304c\u72ed\u304f\u306a\u308a\u3001\u5206\u5e03\u304c\u300c\u3054\u3061\u3083\u3054\u3061\u3083\u300d\u3057\u3066\u898b\u3048\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#3","title":"3. \u30d3\u30f3\u306e\u8abf\u6574","text":"<p>\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306e\u89e3\u91c8\u3092\u5bb9\u6613\u306b\u3059\u308b\u305f\u3081\u306b\u3001\u30d3\u30f3\u306e\u6570\u3084\u5e45\u3092\u8abf\u6574\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u4ee5\u4e0b\u306b\u3001\u30d3\u30f3\u306e\u6570\u3068\u30d3\u30f3\u5e45\u3092\u5909\u66f4\u3057\u305f\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#1_1","title":"(1) \u30d3\u30f3\u306e\u6570\u3092\u6307\u5b9a\u3059\u308b\u65b9\u6cd5","text":"<p>\u3053\u3053\u3067\u306f\u3001bins=20 \u3068\u3057\u3066\u30d3\u30f3\u306e\u6570\u309220\u306b\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002 \u307e\u305f\u3001edgecolor=\"white\" \u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u5404\u30d3\u30f3\u306e\u5883\u754c\u7dda\u3092\u767d\u8272\u306b\u3057\u3001\u533a\u5207\u308a\u3092\u660e\u78ba\u306b\u3057\u3066\u3044\u307e\u3059\u3002</p> <pre><code>plt.figure(figsize=(10,6))\nsns.histplot(data=titanic_age, x=\"age\", bins=20, color=\"steelblue\", edgecolor=\"white\")\nplt.title(\"Titanic\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\uff1a\u4e57\u5ba2\u306e\u5e74\u9f62\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0 (20\u30d3\u30f3)\")\nplt.xlabel(\"Age\")\nplt.ylabel(\"Count\")\nplt.show()\n</code></pre>"},{"location":"lectures/SIWS/02-visualization/#2_1","title":"(2) \u30d3\u30f3\u5e45\u3092\u6307\u5b9a\u3059\u308b\u65b9\u6cd5","text":"<p>seaborn \u306e histplot() \u3067\u306f\u3001binwidth \u5f15\u6570\u3092\u4f7f\u3063\u3066\u5404\u30d3\u30f3\u306e\u5e45\u3092\u76f4\u63a5\u6307\u5b9a\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002\u305f\u3068\u3048\u3070\u3001\u30d3\u30f3\u5e45\u30925\u6b73\u306b\u8a2d\u5b9a\u3059\u308b\u5834\u5408\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002</p> <pre><code>plt.figure(figsize=(10,6))\nsns.histplot(data=titanic_age, x=\"age\", binwidth=5, color=\"steelblue\", edgecolor=\"white\")\nplt.title(\"Titanic\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\uff1a\u4e57\u5ba2\u306e\u5e74\u9f62\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0 (\u30d3\u30f3\u5e45=5)\")\nplt.xlabel(\"Age\")\nplt.ylabel(\"Count\")\nplt.show()\n</code></pre> <p>\u3053\u306e\u4f8b\u3067\u306f\u3001\u5e74\u9f62\u304c5\u6b73\u523b\u307f\u3067\u533a\u5207\u3089\u308c\u3001\u5404\u533a\u9593\u306b\u304a\u3051\u308b\u4e57\u5ba2\u6570\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#4-faceting","title":"4. Faceting\uff08\u30d5\u30a1\u30bb\u30c3\u30c8\uff09\u306b\u3088\u308b\u5206\u5272\u8868\u793a","text":"<p>\u30d5\u30a1\u30bb\u30c3\u30c8\u306f\u3001\u3042\u308b\u5909\u6570\u306e\u5024\u3054\u3068\u306b\u540c\u3058\u7a2e\u985e\u306e\u30d7\u30ed\u30c3\u30c8\u3092\u8907\u6570\u63cf\u753b\u3057\u3001\u6bd4\u8f03\u3057\u3084\u3059\u304f\u3059\u308b\u624b\u6cd5\u3067\u3059\u3002 \u3053\u3053\u3067\u306f\u3001sex\uff08\u6027\u5225\uff09\u306b\u3088\u3063\u3066\u4e57\u5ba2\u306e\u5e74\u9f62\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u5206\u5272\u3057\u3066\u8868\u793a\u3057\u3066\u307f\u307e\u3059\u3002</p> <pre><code># seaborn \u306e displot() \u306f\u3001\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306e\u30d5\u30a1\u30bb\u30c3\u30c8\u8868\u793a\u306b\u9069\u3057\u3066\u3044\u307e\u3059\nsns.displot(data=titanic_age, x=\"age\", bins=20, color=\"steelblue\", edgecolor=\"white\", col=\"sex\", height=4, aspect=1.2)\nplt.suptitle(\"Titanic\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\uff1a\u6027\u5225\u3054\u3068\u306e\u4e57\u5ba2\u306e\u5e74\u9f62\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\", y=1.03)\nplt.show()\n</code></pre> <p>\u3053\u306e\u30b3\u30fc\u30c9\u3067\u306f\u3001col=\"sex\" \u306b\u3088\u308a\u3001\u6027\u5225\uff08male \u3068 female\uff09\u3054\u3068\u306b\u5225\u3005\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u304c\u63cf\u753b\u3055\u308c\u3001\u5404\u30b0\u30eb\u30fc\u30d7\u5185\u3067\u5e74\u9f62\u306e\u5206\u5e03\u3092\u6bd4\u8f03\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#_12","title":"\u30c1\u30a7\u30c3\u30af\u9805\u76ee","text":"<ul> <li> <p>(LC1) titanic \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u304a\u3051\u308b age \u5909\u6570\u306e\u6700\u5c0f\u5024\u3001\u6700\u5927\u5024\u3001\u4e2d\u592e\u5024\u306f\u305d\u308c\u305e\u308c\u3069\u306e\u7a0b\u5ea6\u304b\u8abf\u3079\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \uff08\u4f8b: titanic_age[\"age\"].describe() \u3092\u7528\u3044\u3066\u78ba\u8a8d\u3067\u304d\u307e\u3059\uff09</p> </li> <li> <p>(LC2) \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3067\u30d3\u30f3\u306e\u6570\u3084\u5e45\u3092\u5909\u66f4\u3059\u308b\u3068\u3001\u5206\u5e03\u306e\u89e3\u91c8\u306b\u3069\u306e\u3088\u3046\u306a\u5f71\u97ff\u304c\u3042\u308b\u304b\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \uff08\u4f8b: \u30d3\u30f3\u306e\u6570\u3092\u5897\u3084\u3059\u3068\u7d30\u90e8\u304c\u898b\u3048\u3084\u3059\u304f\u306a\u308b\u4e00\u65b9\u3001\u30ce\u30a4\u30ba\u304c\u76ee\u7acb\u3064\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\uff09</p> </li> <li> <p>(LC3) \u6027\u5225\uff08sex\uff09\u3054\u3068\u306b\u5e74\u9f62\u306e\u5206\u5e03\u304c\u7570\u306a\u308b\u7406\u7531\u306b\u3064\u3044\u3066\u3001\u30c7\u30fc\u30bf\u3084\u6b74\u53f2\u7684\u80cc\u666f\u304b\u3089\u8003\u5bdf\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> </li> </ul>"},{"location":"lectures/SIWS/02-visualization/#_13","title":"\u307e\u3068\u3081","text":"<p>\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306f\u30011\u3064\u306e\u6570\u5024\u5909\u6570\u306e\u5206\u5e03\uff08\u6700\u5c0f\u5024\u3001\u6700\u5927\u5024\u3001\u4e2d\u5fc3\u3001\u6563\u3089\u3070\u308a\u3001\u983b\u51fa\u5024\u306a\u3069\uff09\u3092\u8996\u899a\u5316\u3059\u308b\u305f\u3081\u306e\u6709\u52b9\u306a\u30c4\u30fc\u30eb\u3067\u3059\u3002\u3053\u3053\u3067\u306f\u3001seaborn \u306e titanic \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e age \u5909\u6570\u3092\u4f8b\u306b\u3001\u57fa\u672c\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306e\u4f5c\u6210\u3001\u30d3\u30f3\u306e\u8abf\u6574\u65b9\u6cd5\u3001\u3055\u3089\u306b\u30d5\u30a1\u30bb\u30c3\u30c8\u3092\u7528\u3044\u305f\u30b0\u30eb\u30fc\u30d7\u5225\u6bd4\u8f03\u306e\u65b9\u6cd5\u3092\u793a\u3057\u307e\u3057\u305f\u3002\u3053\u308c\u3089\u306e\u624b\u6cd5\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u3001\u30c7\u30fc\u30bf\u306e\u7279\u5fb4\u3084\u6f5c\u5728\u7684\u306a\u30d1\u30bf\u30fc\u30f3\u3092\u76f4\u611f\u7684\u306b\u7406\u89e3\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#5ng4-boxplots","title":"5NG#4: \u7bb1\u3072\u3052\u56f3 (Boxplots)","text":"<p>\u7bb1\u3072\u3052\u56f3\u306f\u3001\u6570\u5024\u5909\u6570\u306e\u4e94\u6570\u8981\u7d04\uff08\u6700\u5c0f\u5024\u3001\u7b2c1\u56db\u5206\u4f4d\u6570\u3001\u4e2d\u592e\u5024\u3001\u7b2c3\u56db\u5206\u4f4d\u6570\u3001\u6700\u5927\u5024\uff09\u306b\u57fa\u3065\u3044\u3066\u3001\u30c7\u30fc\u30bf\u306e\u5206\u5e03\u3092\u8996\u899a\u5316\u3059\u308b\u624b\u6cd5\u3067\u3059\u3002 \u3053\u3053\u3067\u306f\u3001seaborn \u306e tips \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u7528\u3044\u3001\u98f2\u98df\u4ee3\uff08<code>total_bill</code>\uff09\u306e\u5206\u5e03\u3092\u4f8b\u306b\u7bb1\u3072\u3052\u56f3\u306e\u4f5c\u6210\u65b9\u6cd5\u3068\u89e3\u91c8\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#1_2","title":"1. \u7279\u5b9a\u30b0\u30eb\u30fc\u30d7\u306b\u304a\u3051\u308b\u4e94\u6570\u8981\u7d04\u306e\u78ba\u8a8d","text":"<p>\u307e\u305a\u3001tips \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304b\u3089\u30c7\u30a3\u30ca\u30fc\u30bf\u30a4\u30e0\uff08<code>time</code> \u304c <code>\"Dinner\"</code>\uff09\u306e\u30c7\u30fc\u30bf\u306b\u6ce8\u76ee\u3057\u3001\u305d\u306e <code>total_bill</code> \u306e\u4e94\u6570\u8981\u7d04\u3092\u7b97\u51fa\u3057\u307e\u3059\u3002</p> <pre><code>import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# tips \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f\ntips = sns.load_dataset(\"tips\")\n\n# \u30c7\u30a3\u30ca\u30fc\u30bf\u30a4\u30e0\u306e\u30c7\u30fc\u30bf\u306b\u7d5e\u308b\ndinner_tips = tips[tips[\"time\"] == \"Dinner\"]\n\n# \u30c7\u30a3\u30ca\u30fc\u30bf\u30a4\u30e0\u306e total_bill \u306b\u5bfe\u3059\u308b\u4e94\u6570\u8981\u7d04\u306e\u8a08\u7b97\nn_dinner = dinner_tips.shape[0]\nmin_dinner = dinner_tips[\"total_bill\"].min()\nmax_dinner = dinner_tips[\"total_bill\"].max()\nquartiles = dinner_tips[\"total_bill\"].quantile([0.25, 0.5, 0.75])\nfive_number_summary = pd.DataFrame({\n    \"total_bill\": [min_dinner, quartiles.iloc[0], quartiles.iloc[1], quartiles.iloc[2], max_dinner]\n}, index=[\"Min\", \"25%\", \"50%\", \"75%\", \"Max\"])\n\nprint(\"\u30c7\u30a3\u30ca\u30fc\u30bf\u30a4\u30e0\u306e total_bill \u306e\u4e94\u6570\u8981\u7d04:\")\nprint(five_number_summary)\n</code></pre> <p>\u3053\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u30c7\u30a3\u30ca\u30fc\u30bf\u30a4\u30e0\u306b\u304a\u3051\u308b total_bill \u306e\u6700\u5c0f\u5024\u3001\u7b2c\u4e00\u56db\u5206\u4f4d\u6570\u3001\u4e2d\u592e\u5024\u3001\u7b2c\u4e09\u56db\u5206\u4f4d\u6570\u3001\u6700\u5927\u5024\u304c\u5f97\u3089\u308c\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#_14","title":"\u7bb1\u3072\u3052\u56f3\u4f5c\u6210\u306e\u6bb5\u968e\u7684\u306a\u69cb\u7bc9","text":"<p>\u4ee5\u4e0b\u3067\u306f\u3001\u30c7\u30a3\u30ca\u30fc\u30bf\u30a4\u30e0\u306e total_bill \u306e\u89b3\u6e2c\u5024\u3092\u5bfe\u8c61\u306b\u30013\u7a2e\u985e\u306e\u30d7\u30ed\u30c3\u30c8\u3092\u6bb5\u968e\u7684\u306b\u4f5c\u6210\u3057\u3066\u3044\u304d\u307e\u3059\u3002</p> <p>(a) \u30b8\u30c3\u30bf\u30fc\u3092\u52a0\u3048\u305f\u30d7\u30ed\u30c3\u30c8\u3068\u4e94\u6570\u8981\u7d04\u306e\u5024\u306e\u8868\u793a \u307e\u305a\u3001\u5404\u89b3\u6e2c\u5024\u3092\u30b8\u30c3\u30bf\u30fc\uff08\u308f\u305a\u304b\u306a\u6a2a\u65b9\u5411\u306e\u305a\u308c\uff09\u3092\u4ed8\u4e0e\u3057\u3066\u30d7\u30ed\u30c3\u30c8\u3057\u3001\u3055\u3089\u306b\u4e94\u6570\u8981\u7d04\u306e\u5404\u5024\u3092\u8d64\u306e\u7834\u7dda\u3067\u793a\u3057\u307e\u3059\u3002</p> <pre><code># \u30b5\u30d6\u30d7\u30ed\u30c3\u30c8\u306e\u4f5c\u6210\uff08\u6a2a\u306b3\u3064\u4e26\u3079\u308b\uff09\nfig, axes = plt.subplots(1, 3, figsize=(15, 4), sharey=True)\n\n# \u30d7\u30ed\u30c3\u30c8\u306e\u57fa\u672c\u8a2d\u5b9a\uff1ax \u8ef8\u306f \"Dinner\" \u306e\u56fa\u5b9a\u5024\nx_value = [\"Dinner\"] * n_dinner\n\n# (a) \u30b8\u30c3\u30bf\u30fc\u3092\u52a0\u3048\u305f\u70b9\u306e\u30d7\u30ed\u30c3\u30c8\nsns.stripplot(x=dinner_tips[\"time\"], y=dinner_tips[\"total_bill\"],\n              jitter=True, ax=axes[0], color=\"gray\", alpha=0.3)\naxes[0].set_title(\"\u30b8\u30c3\u30bf\u30fc\u4ed8\u304d\u70b9\u3068\\n\u4e94\u6570\u8981\u7d04\u306e\u7834\u7dda\")\naxes[0].set_xlabel(\"\")\naxes[0].set_ylabel(\"Total Bill\")\n\n# \u4e94\u6570\u8981\u7d04\u306e\u5404\u5024\u3092\u7834\u7dda\u3067\u8ffd\u52a0\nfor value in five_number_summary[\"total_bill\"]:\n    axes[0].axhline(y=value, color='red', linestyle='--', linewidth=1.0)\n\n# (b) \u7bb1\u3072\u3052\u56f3\u3068\u30b8\u30c3\u30bf\u30fc\u4ed8\u304d\u70b9\u3001\u3055\u3089\u306b\u7834\u7dda\u306b\u3088\u308b\u4e94\u6570\u8981\u7d04\u306e\u8868\u793a\nsns.boxplot(x=\"time\", y=\"total_bill\", data=dinner_tips, ax=axes[1],\n            showcaps=True, boxprops={'facecolor':'None'})\nsns.stripplot(x=\"time\", y=\"total_bill\", data=dinner_tips,\n              jitter=True, ax=axes[1], color=\"gray\", alpha=0.3)\nfor value in five_number_summary[\"total_bill\"]:\n    axes[1].axhline(y=value, color='red', linestyle='--', linewidth=1.0)\naxes[1].set_title(\"\u7bb1\u3072\u3052\u56f3 + \u30b8\u30c3\u30bf\u30fc\u4ed8\u304d\u70b9\")\naxes[1].set_xlabel(\"\")\naxes[1].set_ylabel(\"\")\n\n# (c) \u7bb1\u3072\u3052\u56f3\u306e\u307f\uff08\u4f59\u8a08\u306a\u70b9\u3084\u7834\u7dda\u306f\u9664\u53bb\uff09\nsns.boxplot(x=\"time\", y=\"total_bill\", data=dinner_tips, ax=axes[2])\naxes[2].set_title(\"\u7bb1\u3072\u3052\u56f3\u306e\u307f\")\naxes[2].set_xlabel(\"\")\naxes[2].set_ylabel(\"\")\n\nplt.tight_layout()\nplt.show()\n</code></pre> <ul> <li>\u5de6\u306e\u30d7\u30ed\u30c3\u30c8\u3067\u306f\u3001\u30c7\u30a3\u30ca\u30fc\u30bf\u30a4\u30e0\u306e\u5404 total_bill \u306e\u89b3\u6e2c\u5024\u304c\u30b8\u30c3\u30bf\u30fc\u4ed8\u304d\u306e\u70b9\u3068\u3057\u3066\u8868\u793a\u3055\u308c\u3001\u8d64\u3044\u7834\u7dda\u3067\u4e94\u6570\u8981\u7d04\u306e\u4f4d\u7f6e\u304c\u793a\u3055\u308c\u3066\u3044\u307e\u3059\u3002</li> <li>\u4e2d\u592e\u306e\u30d7\u30ed\u30c3\u30c8\u3067\u306f\u3001\u7bb1\u3072\u3052\u56f3\u304c\u63cf\u753b\u3055\u308c\u308b\u3068\u540c\u6642\u306b\u3001\u30b8\u30c3\u30bf\u30fc\u4ed8\u304d\u306e\u70b9\u3068\u7834\u7dda\u3082\u91cd\u306d\u3089\u308c\u3066\u3044\u307e\u3059\u3002</li> <li>\u53f3\u306e\u30d7\u30ed\u30c3\u30c8\u306f\u3001\u7d14\u7c8b\u306a\u7bb1\u3072\u3052\u56f3\u306e\u307f\u3067\u3001\u4f59\u8a08\u306a\u8981\u7d20\u304c\u9664\u53bb\u3055\u308c\u3066\u3044\u307e\u3059\u3002</li> </ul> <p>\u7bb1\u3072\u3052\u56f3\u306f\u3001\u7bb1\u306e\u4e0a\u4e0b\u304c\u305d\u308c\u305e\u308c\u7b2c\u4e00\u56db\u5206\u4f4d\u6570\uff0825%\uff09\u3068\u7b2c\u4e09\u56db\u5206\u4f4d\u6570\uff0875%\uff09\u3092\u793a\u3057\u3001\u7bb1\u5185\u306e\u592a\u3044\u7dda\u304c\u4e2d\u592e\u5024\uff0850%\uff09\u3092\u793a\u3057\u307e\u3059\u3002\u7bb1\u306e\u9ad8\u3055\u306f\u56db\u5206\u4f4d\u7bc4\u56f2 (IQR) \u3092\u8868\u3057\u3001\u4e0a\u4e0b\u306e\u300c\u3072\u3052\u300d\u306f\u901a\u5e38\u3001\u7bb1\u304b\u3089 1.5 \u00d7 IQR \u306e\u7bc4\u56f2\u5185\u306e\u6700\u5c0f\u5024\u30fb\u6700\u5927\u5024\u307e\u3067\u4f38\u3073\u3001\u7bc4\u56f2\u5916\u306e\u89b3\u6e2c\u5024\u306f\u500b\u5225\u306e\u70b9\uff08\u30a2\u30a6\u30c8\u30e9\u30a4\u30e4\u30fc\uff09\u3068\u3057\u3066\u8868\u793a\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#_15","title":"\u8907\u6570\u30b0\u30eb\u30fc\u30d7\u306b\u304a\u3051\u308b\u7bb1\u3072\u3052\u56f3\u306e\u4f5c\u6210","text":"<p>\u6b21\u306b\u3001tips \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5168\u4f53\u3092\u7528\u3044\u3066\u3001\u66dc\u65e5\uff08day\uff09\u3054\u3068\u306b total_bill \u306e\u5206\u5e03\u3092\u6bd4\u8f03\u3059\u308b\u305f\u3081\u306e \u30b5\u30a4\u30c9\u30d0\u30a4\u30b5\u30a4\u30c9\u7bb1\u3072\u3052\u56f3 \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 tips \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e day \u5909\u6570\u306f\u65e2\u306b\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\uff08\"Thur\", \"Fri\", \"Sat\", \"Sun\"\uff09\u3068\u306a\u3063\u3066\u3044\u308b\u305f\u3081\u3001x \u8ef8\u306b\u76f4\u63a5\u5272\u308a\u5f53\u3066\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <pre><code>plt.figure(figsize=(8, 6))\nsns.boxplot(x=\"day\", y=\"total_bill\", data=tips,\n            palette=\"pastel\", showcaps=True, \n            boxprops={'edgecolor':'black'},\n            whiskerprops={'color':'black'},\n            capprops={'color':'black'},\n            flierprops={'markerfacecolor':'red', 'marker':'o', 'markersize':5})\nplt.title(\"Tips\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\uff1a\u66dc\u65e5\u3054\u3068\u306e Total Bill \u306e\u7bb1\u3072\u3052\u56f3\")\nplt.xlabel(\"Day\")\nplt.ylabel(\"Total Bill\")\nplt.show()\n</code></pre> <p>\u3053\u306e\u30d7\u30ed\u30c3\u30c8\u3067\u306f\u3001\u5404\u66dc\u65e5\u3054\u3068\u306b total_bill \u306e\u7bb1\u3072\u3052\u56f3\u304c\u63cf\u753b\u3055\u308c\u3001</p> <ul> <li>\u7bb1\u306f\u7b2c\u4e00\u56db\u5206\u4f4d\u6570\u3001\u4e2d\u592e\u5024\u3001\u7b2c\u4e09\u56db\u5206\u4f4d\u6570\u3092\u793a\u3057\u3001</li> <li>\u3072\u3052\u306f 1.5\u00d7IQR \u306e\u7bc4\u56f2\u5185\u306e\u5024\u3092\u8868\u3057\u3001</li> <li>\u305d\u306e\u7bc4\u56f2\u5916\u306e\u5024\u306f\u30a2\u30a6\u30c8\u30e9\u30a4\u30e4\u30fc\u3068\u3057\u3066\u8d64\u3044\u70b9\u3067\u793a\u3055\u308c\u3066\u3044\u307e\u3059\u3002</li> </ul> <p>\u66dc\u65e5\u3054\u3068\u306e\u7bb1\u3072\u3052\u56f3\u3092\u4e26\u3079\u308b\u3053\u3068\u3067\u3001\u5404\u30b0\u30eb\u30fc\u30d7\u9593\u306e\u5206\u5e03\u306e\u9055\u3044\u3084\u3070\u3089\u3064\u304d\u3001\u3055\u3089\u306b\u306f\u5916\u308c\u5024\u306e\u6709\u7121\u3092\u7c21\u5358\u306b\u6bd4\u8f03\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#_16","title":"\u30c1\u30a7\u30c3\u30af\u9805\u76ee","text":"<ul> <li>(LC1) \u30c7\u30a3\u30ca\u30fc\u30bf\u30a4\u30e0\u306e total_bill \u306e\u4e94\u6570\u8981\u7d04\u3092\u78ba\u8a8d\u3057\u305f\u3068\u304d\u3001\u5404\u5024\uff08\u6700\u5c0f\u5024\u3001\u7b2c\u4e00\u56db\u5206\u4f4d\u6570\u3001\u4e2d\u592e\u5024\u3001\u7b2c\u4e09\u56db\u5206\u4f4d\u6570\u3001\u6700\u5927\u5024\uff09\u306f\u3069\u306e\u3088\u3046\u306a\u6570\u5024\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304b\uff1f</li> <li>(LC2) \u7bb1\u3072\u3052\u56f3\u306b\u304a\u3051\u308b\u7bb1\u306e\u9ad8\u3055\uff08IQR\uff09\u304c\u5927\u304d\u3044\u5834\u5408\u3001\u3069\u306e\u3088\u3046\u306a\u60c5\u5831\u304c\u5f97\u3089\u308c\u307e\u3059\u304b\uff1f</li> <li>(LC3) \u30a2\u30a6\u30c8\u30e9\u30a4\u30e4\u30fc\uff08\u7bb1\u3072\u3052\u56f3\u4e0a\u306e\u70b9\uff09\u304c\u793a\u3059\u610f\u5473\u306f\u4f55\u3067\u3057\u3087\u3046\u304b\uff1f\u307e\u305f\u3001\u30a2\u30a6\u30c8\u30e9\u30a4\u30e4\u30fc\u304c\u591a\u3044\u5834\u5408\u3001\u3069\u306e\u3088\u3046\u306a\u89e3\u91c8\u304c\u53ef\u80fd\u3067\u3057\u3087\u3046\u304b\uff1f</li> <li>(LC4) \u66dc\u65e5\u3054\u3068\u306e\u7bb1\u3072\u3052\u56f3\u3092\u6bd4\u8f03\u3059\u308b\u3053\u3068\u3067\u3001\u3069\u306e\u66dc\u65e5\u3067\u98f2\u98df\u4ee3\u306e\u3070\u3089\u3064\u304d\u304c\u5927\u304d\u3044\u304b\u3001\u307e\u305f\u4e2d\u592e\u5024\u306b\u9055\u3044\u304c\u3042\u308b\u304b\u3092\u3069\u306e\u3088\u3046\u306b\u8aad\u307f\u53d6\u308c\u307e\u3059\u304b\uff1f</li> </ul>"},{"location":"lectures/SIWS/02-visualization/#_17","title":"\u307e\u3068\u3081","text":"<p>\u7bb1\u3072\u3052\u56f3\u306f\u3001\u5358\u4e00\u306e\u6570\u5024\u5909\u6570\u306e\u5206\u5e03\u3092\u8996\u899a\u5316\u3059\u308b\u5f37\u529b\u306a\u30c4\u30fc\u30eb\u3067\u3042\u308a\u3001</p> <ul> <li>\u4e2d\u592e\u5024 \u3084 \u56db\u5206\u4f4d\u6570 \u3092\u76f4\u611f\u7684\u306b\u628a\u63e1\u3067\u304d\u3001</li> <li>\u56db\u5206\u4f4d\u7bc4\u56f2\uff08IQR\uff09 \u306b\u3088\u308b\u6563\u3089\u3070\u308a\u306e\u5ea6\u5408\u3044\u3092\u793a\u3057\u3001</li> <li>\u30a2\u30a6\u30c8\u30e9\u30a4\u30e4\u30fc\uff08\u5916\u308c\u5024\uff09\u3092\u5bb9\u6613\u306b\u7279\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</li> </ul> <p>\u307e\u305f\u3001\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\uff08\u4f8b\uff1a\u66dc\u65e5\uff09\u306b\u5bfe\u3057\u3066\u30b5\u30a4\u30c9\u30d0\u30a4\u30b5\u30a4\u30c9\u3067\u7bb1\u3072\u3052\u56f3\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3067\u3001\u30b0\u30eb\u30fc\u30d7\u9593\u306e\u5206\u5e03\u306e\u9055\u3044\u3084\u3070\u3089\u3064\u304d\u3092\u6bd4\u8f03\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002tips \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f8b\u306b\u3001\u30c7\u30a3\u30ca\u30fc\u30bf\u30a4\u30e0\u306e total_bill \u3084\u66dc\u65e5\u3054\u3068\u306e total_bill \u3092\u901a\u3058\u3066\u3001\u7bb1\u3072\u3052\u56f3\u306e\u4f5c\u6210\u3068\u305d\u306e\u89e3\u91c8\u306e\u57fa\u672c\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#5ng5-barplots","title":"5NG#5: \u68d2\u30b0\u30e9\u30d5 (Barplots)","text":"<p>\u68d2\u30b0\u30e9\u30d5\u306f\u3001\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u306e\u5404\u30ab\u30c6\u30b4\u30ea\u30fc\uff08\u30ec\u30d9\u30eb\uff09\u306e\u51fa\u73fe\u983b\u5ea6\uff08\u30ab\u30a6\u30f3\u30c8\uff09\u3092\u8996\u899a\u5316\u3059\u308b\u305f\u3081\u306e\u57fa\u672c\u7684\u306a\u30b0\u30e9\u30d5\u3067\u3059\u3002 \u6570\u5024\u5909\u6570\u306e\u5206\u5e03\u3092\u53ef\u8996\u5316\u3059\u308b\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3084\u7bb1\u3072\u3052\u56f3\u3068\u306f\u7570\u306a\u308a\u3001\u68d2\u30b0\u30e9\u30d5\u306f\u5404\u30ab\u30c6\u30b4\u30ea\u30fc\u306e\u983b\u5ea6\u3084\u5272\u5408\u3092\u793a\u3059\u306e\u306b\u9069\u3057\u3066\u3044\u307e\u3059\u3002 \u307e\u305f\u3001\u30c7\u30fc\u30bf\u304c\u65e2\u306b\u300c\u4e8b\u524d\u96c6\u8a08\u6e08\u307f\u300d\u306e\u5834\u5408\u3068\u3001\u5404\u89b3\u6e2c\u5024\u304c\u500b\u5225\u306b\u8a18\u9332\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3067\u3001\u30b0\u30e9\u30d5\u4f5c\u6210\u306e\u624b\u6cd5\u304c\u7570\u306a\u308a\u307e\u3059\u3002</p> <p>\u672c\u7bc0\u3067\u306f\u3001Gapminder \u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u7528\u3044\u3066\u3001\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\uff08\u3053\u3053\u3067\u306f <code>continent</code>\uff1a\u5927\u9678\uff09\u306e\u51fa\u73fe\u983b\u5ea6\u3092\u68d2\u30b0\u30e9\u30d5\u3067\u53ef\u8996\u5316\u3059\u308b\u65b9\u6cd5\u3092\u793a\u3057\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#1_3","title":"1. \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f","text":"<p>\u307e\u305a\u3001Gapminder \u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092 URL \u304b\u3089\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002</p> <pre><code>import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Gapminder\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f\nurl = \"https://raw.githubusercontent.com/resbaz/r-novice-gapminder-files/master/data/gapminder-FiveYearData.csv\"\ngapminder = pd.read_csv(url)\ngapminder.head()\n</code></pre> <p>\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u306f\u3001<code>country</code>\uff08\u56fd\uff09\u3001<code>continent</code>\uff08\u5927\u9678\uff09\u3001<code>year</code>\uff08\u5e74\uff09\u3001<code>lifeExp</code>\uff08\u5e73\u5747\u5bff\u547d\uff09\u3001<code>pop</code>\uff08\u4eba\u53e3\uff09\u3001<code>gdpPercap</code>\uff081\u4eba\u5f53\u305f\u308aGDP\uff09\u306a\u3069\u306e\u5909\u6570\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#_18","title":"\u672a\u96c6\u8a08\u30c7\u30fc\u30bf\u304b\u3089\u68d2\u30b0\u30e9\u30d5\u3092\u4f5c\u6210\u3059\u308b","text":"<p>Gapminder \u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u5404\u89b3\u6e2c\u5024\uff08\u4f8b\u3048\u3070\u3001\u5404\u56fd\u306e\u5404\u5e74\u306e\u8a18\u9332\uff09\u304c\u500b\u5225\u306b\u8a18\u9332\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570 <code>continent</code> \u306e\u983b\u5ea6\u306f\u307e\u3060\u300c\u96c6\u8a08\u300d\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u306e\u5834\u5408\u3001Seaborn \u306e <code>countplot()</code> \u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u81ea\u52d5\u7684\u306b\u5404\u30ab\u30c6\u30b4\u30ea\u30fc\u306e\u51fa\u73fe\u56de\u6570\u3092\u8a08\u7b97\u3057\u3066\u68d2\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3057\u3066\u304f\u308c\u307e\u3059\u3002</p> <pre><code>plt.figure(figsize=(8,6))\nsns.countplot(data=gapminder, x=\"continent\", palette=\"pastel\", edgecolor=\"black\")\nplt.title(\"Gapminder\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\uff1a\u5404\u5927\u9678\u306e\u30ec\u30b3\u30fc\u30c9\u6570\")\nplt.xlabel(\"\u5927\u9678\")\nplt.ylabel(\"\u30ab\u30a6\u30f3\u30c8\")\nplt.show()\n</code></pre> <p>\u3053\u306e\u30b0\u30e9\u30d5\u306f\u3001\u5404\u5927\u9678\u306b\u8a72\u5f53\u3059\u308b\u30ec\u30b3\u30fc\u30c9\u6570\uff08\uff1d\u305d\u306e\u5927\u9678\u306b\u5c5e\u3059\u308b\u56fd\u306e\u6570\u00d7\u89b3\u6e2c\u5e74\u6570\uff09\u304c\u3069\u306e\u7a0b\u5ea6\u304b\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002\u68d2\u540c\u58eb\u306e\u9593\u306b\u306f\u9069\u5ea6\u306a\u9699\u9593\u304c\u3042\u308a\u3001\u5404\u30ab\u30c6\u30b4\u30ea\u30fc\u306e\u983b\u5ea6\u3092\u6bd4\u8f03\u3057\u3084\u3059\u304f\u306a\u3063\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#_19","title":"\u4e8b\u524d\u96c6\u8a08\u6e08\u307f\u30c7\u30fc\u30bf\u304b\u3089\u68d2\u30b0\u30e9\u30d5\u3092\u4f5c\u6210\u3059\u308b","text":"<p>\u4e00\u65b9\u3001\u30c7\u30fc\u30bf\u304c\u300c\u4e8b\u524d\u96c6\u8a08\u6e08\u307f\u300d\u3067\u3042\u308b\u5834\u5408\u3001\u3064\u307e\u308a\u5404\u30ab\u30c6\u30b4\u30ea\u30fc\u306e\u30ab\u30a6\u30f3\u30c8\u304c\u65e2\u306b\u8a08\u7b97\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306f\u3001Seaborn \u306e <code>barplot()</code> \u3092\u4f7f\u7528\u3057\u3066\u68d2\u30b0\u30e9\u30d5\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002</p> <p>\u307e\u305a\u3001continent \u3054\u3068\u306e\u30ec\u30b3\u30fc\u30c9\u6570\u3092\u96c6\u8a08\u3057\u3066\u307f\u307e\u3059\u3002</p> <pre><code># \u5927\u9678\u3054\u3068\u306e\u30ec\u30b3\u30fc\u30c9\u6570\u3092\u8a08\u7b97\ncontinent_counts = gapminder.groupby(\"continent\").size().reset_index(name=\"count\")\nprint(continent_counts)\n</code></pre> <p>\u6b21\u306b\u3001\u4e8b\u524d\u96c6\u8a08\u6e08\u307f\u306e\u30c7\u30fc\u30bf\u3092\u7528\u3044\u3066\u68d2\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3057\u307e\u3059\u3002</p> <pre><code>plt.figure(figsize=(8,6))\nsns.barplot(data=continent_counts, x=\"continent\", y=\"count\", palette=\"pastel\", edgecolor=\"black\")\nplt.title(\"Gapminder\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\uff1a\u5927\u9678\u3054\u3068\u306e\u30ec\u30b3\u30fc\u30c9\u6570\uff08\u4e8b\u524d\u96c6\u8a08\u6e08\u307f\uff09\")\nplt.xlabel(\"\u5927\u9678\")\nplt.ylabel(\"\u30ab\u30a6\u30f3\u30c8\")\nplt.show()\n</code></pre> <p>\u3053\u306e\u65b9\u6cd5\u3067\u306f\u3001\u5404\u30ab\u30c6\u30b4\u30ea\u30fc\u306e\u30ab\u30a6\u30f3\u30c8\u304c\u65e2\u306b <code>count</code> \u5909\u6570\u306b\u8a18\u9332\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001<code>barplot()</code> \u306e <code>y</code> \u8ef8\u306b\u305d\u306e\u5909\u6570\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u7d50\u679c\u3068\u3057\u3066\u3001\u672a\u96c6\u8a08\u306e\u30c7\u30fc\u30bf\u3092\u7528\u3044\u305f <code>countplot()</code> \u3068\u540c\u3058\u30b0\u30e9\u30d5\u304c\u5f97\u3089\u308c\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#4","title":"4. \u8ffd\u52a0\u4f8b\uff1a\u7279\u5b9a\u306e\u5e74\u306b\u304a\u3051\u308b\u68d2\u30b0\u30e9\u30d5","text":"<p>Gapminder \u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u8907\u6570\u5e74\u306e\u30c7\u30fc\u30bf\u3092\u542b\u3080\u305f\u3081\u3001\u4f8b\u3048\u3070\u7279\u5b9a\u306e\u5e74\uff08\u4f8b\uff1a2007\u5e74\uff09\u306e\u30c7\u30fc\u30bf\u306b\u7d5e\u3063\u3066\u3001\u5404\u5927\u9678\u306e\u300c\u56fd\u6570\u300d\u3092\u53ef\u8996\u5316\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u30022007\u5e74\u306e\u30c7\u30fc\u30bf\u306f\u5404\u56fd1\u30ec\u30b3\u30fc\u30c9\u3067\u8868\u3055\u308c\u308b\u306e\u3067\u3001\u5404\u5927\u9678\u306b\u304a\u3051\u308b\u56fd\u6570\u3092\u793a\u3059\u68d2\u30b0\u30e9\u30d5\u306b\u306a\u308a\u307e\u3059\u3002</p> <pre><code># 2007\u5e74\u306e\u30c7\u30fc\u30bf\u306b\u7d5e\u308b\ngapminder_2007 = gapminder[gapminder[\"year\"] == 2007]\n\nplt.figure(figsize=(8,6))\nsns.countplot(data=gapminder_2007, x=\"continent\", palette=\"pastel\", edgecolor=\"black\")\nplt.title(\"Gapminder\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\uff082007\u5e74\uff09\uff1a\u5404\u5927\u9678\u306e\u56fd\u6570\")\nplt.xlabel(\"\u5927\u9678\")\nplt.ylabel(\"\u56fd\u6570\")\nplt.show()\n</code></pre> <p>\u3053\u306e\u30b0\u30e9\u30d5\u3067\u306f\u3001\u5404\u5927\u9678\u3054\u3068\u306e\u56fd\u6570\u304c\u6bd4\u8f03\u3057\u3084\u3059\u304f\u8868\u793a\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#_20","title":"\u30c1\u30a7\u30c3\u30af\u9805\u76ee","text":"<ul> <li>(LC1) \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306f\u6570\u5024\u5909\u6570\u306e\u9023\u7d9a\u7684\u306a\u5206\u5e03\u3092\u53ef\u8996\u5316\u3059\u308b\u306e\u306b\u9069\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u306a\u305c\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u306b\u306f\u9069\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3057\u3087\u3046\u304b\uff1f</li> <li>(LC2) \u672a\u96c6\u8a08\u306e\u30c7\u30fc\u30bf\u304b\u3089\u68d2\u30b0\u30e9\u30d5\u3092\u4f5c\u6210\u3059\u308b\u5834\u5408\u3068\u3001\u4e8b\u524d\u96c6\u8a08\u6e08\u307f\u306e\u30c7\u30fc\u30bf\u304b\u3089\u4f5c\u6210\u3059\u308b\u5834\u5408\u306e\u9055\u3044\u306f\u4f55\u3067\u3059\u304b\uff1f</li> <li>(LC3) Gapminder \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e <code>continent</code> \u5909\u6570\u306b\u304a\u3044\u3066\u3001\u3069\u306e\u5927\u9678\u306e\u30ec\u30b3\u30fc\u30c9\u6570\uff08\u307e\u305f\u306f\u56fd\u6570\uff09\u304c\u591a\u3044\u304b\u3001\u307e\u305f\u305d\u306e\u7406\u7531\u306b\u3064\u3044\u3066\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002</li> </ul>"},{"location":"lectures/SIWS/02-visualization/#_21","title":"\u307e\u3068\u3081","text":"<p>\u68d2\u30b0\u30e9\u30d5\u306f\u3001\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u306e\u5404\u30ab\u30c6\u30b4\u30ea\u30fc\u306e\u51fa\u73fe\u983b\u5ea6\u3092\u76f4\u611f\u7684\u306b\u793a\u3059\u30b0\u30e9\u30d5\u3067\u3059\u3002</p> <ul> <li>\u672a\u96c6\u8a08\u30c7\u30fc\u30bf\u306e\u5834\u5408\u306f\u3001Seaborn \u306e countplot() \u3092\u7528\u3044\u308b\u3053\u3068\u3067\u81ea\u52d5\u7684\u306b\u983b\u5ea6\u3092\u8a08\u7b97\u30fb\u8868\u793a\u3067\u304d\u307e\u3059\u3002</li> <li>\u4e8b\u524d\u96c6\u8a08\u6e08\u307f\u30c7\u30fc\u30bf\u306e\u5834\u5408\u306f\u3001barplot() \u3092\u7528\u3044\u3066\u3001\u3042\u3089\u304b\u3058\u3081\u8a08\u7b97\u3055\u308c\u305f\u30ab\u30a6\u30f3\u30c8\u3092\u30d7\u30ed\u30c3\u30c8\u3057\u307e\u3059\u3002</li> </ul> <p>Gapminder \u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u7528\u3044\u305f\u4f8b\u3067\u306f\u3001continent \u306e\u5404\u30ab\u30c6\u30b4\u30ea\u30fc\u306e\u983b\u5ea6\u3084\u3001\u7279\u5b9a\u306e\u5e74\u306b\u304a\u3051\u308b\u56fd\u6570\u306a\u3069\u3001\u3055\u307e\u3056\u307e\u306a\u89d2\u5ea6\u304b\u3089\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u306e\u5206\u5e03\u3092\u8996\u899a\u5316\u3059\u308b\u65b9\u6cd5\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u30c7\u30fc\u30bf\u5168\u4f53\u306e\u50be\u5411\u3084\u3001\u30b0\u30eb\u30fc\u30d7\u9593\u306e\u6bd4\u8f03\u304c\u5bb9\u6613\u306b\u306a\u308a\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#_22","title":"\u30c7\u30fc\u30bf\u53ef\u8996\u5316\u306e\u307e\u3068\u3081","text":"<p>\u672c\u7ae0\u3067\u306f\u3001\u4ee5\u4e0b\u306e 5 \u3064\u306e\u4ee3\u8868\u7684\u306a\u30b0\u30e9\u30d5\uff085NG\uff09\u3092\u901a\u3058\u3066\u3001\u3055\u307e\u3056\u307e\u306a\u30c7\u30fc\u30bf\u306e\u5206\u5e03\u3084\u5909\u6570\u9593\u306e\u95a2\u4fc2\u6027\u3092\u8996\u899a\u5316\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3057\u305f\u3002\u3053\u308c\u3089\u306e\u30b0\u30e9\u30d5\u3092\u99c6\u4f7f\u3059\u308b\u3053\u3068\u3067\u3001\u3042\u3089\u3086\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u7279\u5fb4\u3092\u76f4\u611f\u7684\u306b\u628a\u63e1\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u3055\u3089\u306b\u591a\u304f\u306e\u5909\u6570\u3092\u5404\u30d7\u30ed\u30c3\u30c8\u306e\u7f8e\u7684\u5c5e\u6027\uff08\u8272\u3001\u5f62\u3001\u5927\u304d\u3055\u306a\u3069\uff09\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u3053\u3068\u3067\u3001\u8996\u899a\u7684\u8868\u73fe\u306e\u53ef\u80fd\u6027\u306f\u7121\u9650\u306b\u5e83\u304c\u308a\u307e\u3059\u3002</p> \u30b0\u30e9\u30d5\u306e\u7a2e\u985e \u8868\u793a\u5185\u5bb9 \u30b8\u30aa\u30e1\u30c8\u30ea\u30c3\u30af\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 \u5099\u8003 \u6563\u5e03\u56f3 2\u3064\u306e\u6570\u5024\u5909\u6570\u9593\u306e\u95a2\u4fc2\u6027 <code>plt.scatter()</code> \u307e\u305f\u306f <code>sns.scatterplot()</code> \u6298\u308c\u7dda\u30b0\u30e9\u30d5 2\u3064\u306e\u6570\u5024\u5909\u6570\u9593\u306e\u95a2\u4fc2\u6027 <code>plt.plot()</code> \u307e\u305f\u306f <code>sns.lineplot()</code> x\u8ef8\u306b\u9806\u5e8f\u304c\u3042\u308b\u5834\u5408\uff08\u4f8b\uff1a\u6642\u9593\uff09\u306b\u4f7f\u7528 \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0 1\u3064\u306e\u6570\u5024\u5909\u6570\u306e\u5206\u5e03 <code>plt.hist()</code> \u307e\u305f\u306f <code>sns.histplot()</code> \u30d5\u30a1\u30bb\u30c3\u30c8\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306f\u3001\u5225\u306e\u5909\u6570\u306e\u5024\u3067\u5206\u5272\u3057\u305f\u6570\u5024\u5909\u6570\u306e\u5206\u5e03\u3092\u8868\u793a\u3059\u308b\u306e\u306b\u7528\u3044\u3089\u308c\u308b \u7bb1\u3072\u3052\u56f3 1\u3064\u306e\u6570\u5024\u5909\u6570\u306e\u5206\u5e03\u3092\u3001\u5225\u306e\u5909\u6570\u3067\u5206\u5272\u3057\u3066\u8868\u793a <code>plt.boxplot()</code> \u307e\u305f\u306f <code>sns.boxplot()</code> \u68d2\u30b0\u30e9\u30d5 1\u3064\u306e\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u306e\u5206\u5e03 \u672a\u96c6\u8a08\u30c7\u30fc\u30bf\u306e\u5834\u5408\uff1a<code>sns.countplot()</code>\u4e8b\u524d\u96c6\u8a08\u6e08\u307f\u30c7\u30fc\u30bf\u306e\u5834\u5408\uff1a<code>sns.barplot()</code> \u7a4d\u307f\u4e0a\u3052\u3001\u4e26\u5217\u3001\u30d5\u30a1\u30bb\u30c3\u30c8\u68d2\u30b0\u30e9\u30d5\u3092\u7528\u3044\u308b\u3068\u30012\u3064\u306e\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u306e\u540c\u6642\u5206\u5e03\u3082\u8868\u73fe\u53ef\u80fd"},{"location":"lectures/SIWS/02-visualization/#_23","title":"\u95a2\u6570\u5f15\u6570\u306e\u6307\u5b9a","text":"<p>Python \u306e\u591a\u304f\u306e\u95a2\u6570\u306f\u3001\u30ad\u30fc\u30ef\u30fc\u30c9\u5f15\u6570\u3092\u4f7f\u7528\u3057\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001Seaborn \u306e\u30d7\u30ed\u30c3\u30c8\u95a2\u6570\u3067\u306f\u3001\u5f15\u6570\u306e\u9806\u5e8f\u306b\u4f9d\u5b58\u305b\u305a\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5f15\u6570\u540d\u3092\u5165\u308c\u66ff\u3048\u3066\u3082\u540c\u3058\u7d50\u679c\u304c\u5f97\u3089\u308c\u307e\u3059\u3002</p> <pre><code>import seaborn as sns\n\n# \u30bb\u30b0\u30e1\u30f3\u30c8 1: data \u3068 x \u3092\u660e\u793a\u7684\u306b\u6307\u5b9a\nsns.countplot(data=gapminder, x=\"continent\")\n\n# \u30bb\u30b0\u30e1\u30f3\u30c8 2: \u5f15\u6570\u306e\u9806\u5e8f\u3092\u5165\u308c\u66ff\u3048\u3066\u3082\u3001\u30ad\u30fc\u30ef\u30fc\u30c9\u5f15\u6570\u306a\u306e\u3067\u540c\u3058\u7d50\u679c\u306b\nsns.countplot(x=\"continent\", data=gapminder)\n</code></pre> <p>\u4e0a\u8a18\u306e\u4f8b\u306e\u3088\u3046\u306b\u3001Python \u3067\u306f\u30ad\u30fc\u30ef\u30fc\u30c9\u5f15\u6570\u306e\u9806\u5e8f\u306f\u4efb\u610f\u3067\u3042\u308a\u3001\u30b3\u30fc\u30c9\u306e\u8aad\u307f\u3084\u3059\u3055\u3092\u91cd\u8996\u3057\u3066\u597d\u307f\u306e\u30b9\u30bf\u30a4\u30eb\u3067\u8a18\u8ff0\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#_24","title":"\u8ffd\u52a0\u306e\u30ea\u30bd\u30fc\u30b9","text":"<p>\u30c7\u30fc\u30bf\u53ef\u8996\u5316\u306e\u529b\u3092\u3055\u3089\u306b\u5f15\u304d\u51fa\u3059\u305f\u3081\u3001\u4ee5\u4e0b\u306e\u30ea\u30bd\u30fc\u30b9\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <ul> <li> <p>Seaborn \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8     Seaborn \u306e\u4f7f\u3044\u65b9\u3084\u8c4a\u5bcc\u306a\u30d7\u30ed\u30c3\u30c8\u4f8b\u304c\u63b2\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u3002</p> </li> <li> <p>Matplotlib \u30c1\u30fc\u30c8\u30b7\u30fc\u30c8     Matplotlib \u306e\u4e3b\u8981\u306a\u95a2\u6570\u3084\u8a2d\u5b9a\u65b9\u6cd5\u3092\u7c21\u6f54\u306b\u307e\u3068\u3081\u305f\u8cc7\u6599\u3067\u3059\u3002</p> </li> </ul> <p>\u3053\u308c\u3089\u306e\u8cc7\u6599\u306f\u3001\u57fa\u672c\u7684\u306a\u30b0\u30e9\u30d5\u4f5c\u6210\u306e\u77e5\u8b58\u3092\u8d85\u3048\u3066\u3001\u3055\u3089\u306b\u9ad8\u5ea6\u306a\u8996\u899a\u5316\u6280\u6cd5\u3092\u7fd2\u5f97\u3059\u308b\u969b\u306b\u5927\u3044\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/02-visualization/#_25","title":"\u6b21\u306e\u8a71\u984c","text":"<p>\u3053\u308c\u307e\u3067\u3001\u6563\u5e03\u56f3\u3001\u6298\u308c\u7dda\u30b0\u30e9\u30d5\u3001\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3001\u7bb1\u3072\u3052\u56f3\u3001\u68d2\u30b0\u30e9\u30d5\u3068\u3044\u3046 5 \u3064\u306e\u57fa\u672c\u7684\u306a\u30b0\u30e9\u30d5\u3092\u7528\u3044\u3066\u3001\u30c7\u30fc\u30bf\u306e\u5206\u5e03\u3084\u5909\u6570\u9593\u306e\u95a2\u4fc2\u6027\u3092\u8996\u899a\u5316\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3057\u305f\u3002 \u6b21\u306e\u7ae0\u3067\u306f\u3001\u30c7\u30fc\u30bf\u524d\u51e6\u7406\u30fb\u6574\u5f62\uff08Data Wrangling\uff09 \u306b\u7126\u70b9\u3092\u5f53\u3066\u3001Pandas \u3092\u7528\u3044\u305f\u30c7\u30fc\u30bf\u306e\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3084\u5909\u63db\u65b9\u6cd5\u3092\u8a73\u3057\u304f\u89e3\u8aac\u3057\u307e\u3059\u3002 \u305f\u3068\u3048\u3070\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3067\u3001\u30c7\u30fc\u30bf\u306e\u90e8\u5206\u96c6\u5408\u3092\u4f5c\u6210\u3057\u3001\u53ef\u8996\u5316\u306b\u6d3b\u7528\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002</p> <pre><code>import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# \u4f8b 1: flights \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304b\u3089 Alaska Airlines \u306e\u30c7\u30fc\u30bf\u306e\u307f\u3092\u62bd\u51fa\nalaska_flights = flights[flights[\"carrier\"] == \"AS\"]\nsns.scatterplot(data=alaska_flights, x=\"dep_delay\", y=\"arr_delay\")\nplt.title(\"Alaska Airlines \u306e\u51fa\u767a\u9045\u5ef6\u3068\u5230\u7740\u9045\u5ef6\u306e\u95a2\u4fc2\")\nplt.show()\n\n# \u4f8b 2: weather \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304b\u3089 Newark \u7a7a\u6e2f (EWR) \u306e 1 \u6708\u4e0a\u65ec\u306e\u30c7\u30fc\u30bf\u306e\u307f\u3092\u62bd\u51fa\nearly_january_weather = weather[(weather[\"origin\"] == \"EWR\") &amp; (weather[\"month\"] == 1) &amp; (weather[\"day\"] &lt;= 15)]\nsns.lineplot(data=early_january_weather, x=\"time_hour\", y=\"temp\")\nplt.title(\"Newark \u7a7a\u6e2f 1 \u6708\u4e0a\u65ec\u306e\u6e29\u5ea6\u5909\u5316\")\nplt.show()\n</code></pre> <p>\u4e0a\u8a18\u306e\u4f8b\u306f\u3001Pandas \u3092\u7528\u3044\u305f\u30c7\u30fc\u30bf\u306e\u62bd\u51fa\u3068\u3001Seaborn \u3092\u7528\u3044\u305f\u53ef\u8996\u5316\u306e\u57fa\u672c\u7684\u306a\u9023\u643a\u4f8b\u3067\u3059\u3002\u6b21\u7ae0\u3067\u306f\u3001\u3053\u308c\u3089\u306e\u30c7\u30fc\u30bf\u6574\u5f62\u6280\u6cd5\u3092\u3088\u308a\u8a73\u7d30\u306b\u5b66\u3073\u3001\u8907\u96d1\u306a\u30c7\u30fc\u30bf\u5206\u6790\u3084\u53ef\u8996\u5316\u306e\u305f\u3081\u306e\u4e0b\u5730\u3092\u4f5c\u3063\u3066\u3044\u304d\u307e\u3059\u3002</p> <p>\u3053\u308c\u3067\u672c\u7ae0\u306e\u307e\u3068\u3081\u3068\u3001\u4eca\u5f8c\u306e\u5c55\u958b\u306b\u3064\u3044\u3066\u306e\u6982\u8981\u3092\u7d42\u308f\u308a\u307e\u3059\u3002 \u6b21\u306e\u7ae0\u3067\u306f\u3001\u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406\u3068\u5909\u63db\u3092\u901a\u3058\u3066\u3001\u3088\u308a\u52b9\u679c\u7684\u306a\u30c7\u30fc\u30bf\u5206\u6790\u306e\u57fa\u76e4\u3092\u69cb\u7bc9\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"lectures/SIWS/03-wrangling/","title":"\u30c7\u30fc\u30bf\u6574\u5f62\uff08Data Wrangling\uff09","text":"<p>\u3053\u308c\u307e\u3067\u306e\u7ae0\u3067\u306f\u3001Google Colaboratory\u4e0a\u3067Python\u3092\u7528\u3044\u3066\u3001Pandas\u306eDataFrame\u5185\u306e\u30c7\u30fc\u30bf\u3092\u78ba\u8a8d\u3057\u305f\u308a\u3001matplotlib\u3084seaborn\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316\u3092\u884c\u3046\u65b9\u6cd5\u306b\u3064\u3044\u3066\u5b66\u3093\u3067\u304d\u307e\u3057\u305f\u3002\u4f8b\u3048\u3070\u3001<code>df.head()</code> \u3084 <code>df.info()</code> \u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u306e\u6982\u8981\u3092\u628a\u63e1\u3057\u305f\u308a\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u57fa\u672c\u7684\u306a\u30b0\u30e9\u30d5\u3092\u4f5c\u6210\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3057\u305f\uff1a</p> <ol> <li> <p>\u6563\u5e03\u56f3\uff08scatterplot\uff09    \u2192 <code>plt.scatter()</code> \u3084 seaborn \u306e <code>scatterplot()</code></p> </li> <li> <p>\u6298\u308c\u7dda\u30b0\u30e9\u30d5\uff08line graph\uff09    \u2192 <code>plt.plot()</code> \u3084 seaborn \u306e <code>lineplot()</code></p> </li> <li> <p>\u7bb1\u3072\u3052\u56f3\uff08box plot\uff09    \u2192 seaborn \u306e <code>boxplot()</code></p> </li> <li> <p>\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\uff08histogram\uff09    \u2192 <code>plt.hist()</code> \u3084 seaborn \u306e <code>histplot()</code></p> </li> <li> <p>\u68d2\u30b0\u30e9\u30d5\uff08bar plot\uff09    \u2192 <code>plt.bar()</code> \u3084 seaborn \u306e <code>barplot()</code></p> </li> </ol> <p>\u3053\u308c\u3089\u306e\u30b0\u30e9\u30d5\u306f\u3001\u300c\u30b0\u30e9\u30de\u30fc\u30fb\u30aa\u30d6\u30fb\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\uff08grammar of graphics\uff09\u300d\u306e\u8003\u3048\u65b9\u306b\u57fa\u3065\u3044\u3066\u4f5c\u6210\u3055\u308c\u3001DataFrame\u306e\u5909\u6570\u3092\u30b0\u30e9\u30d5\u306e\u5404\u8981\u7d20\uff08\u8272\u3001\u5927\u304d\u3055\u3001\u5f62\u306a\u3069\uff09\u306b\u5bfe\u5fdc\u4ed8\u3051\u308b\u3053\u3068\u3067\u3001\u30c7\u30fc\u30bf\u306e\u7279\u5fb4\u3092\u8996\u899a\u7684\u306b\u8868\u73fe\u3057\u307e\u3059\u3002\u305f\u3068\u3048\u3070\u3001Gapminder\u306e\u30c7\u30fc\u30bf\u3092\u7528\u3044\u305f\u4f8b\u3067\u306f\u3001\u5404\u5909\u6570\u304c\u3069\u306e\u3088\u3046\u306b\u30b0\u30e9\u30d5\u4e0a\u3067\u8868\u73fe\u3055\u308c\u308b\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002</p>"},{"location":"lectures/SIWS/03-wrangling/#pandas","title":"Pandas\u306b\u3088\u308b\u30c7\u30fc\u30bf\u6574\u5f62","text":"<p>\u3053\u306e\u7ae0\u3067\u306f\u3001Pandas\u3092\u5229\u7528\u3057\u305f\u30c7\u30fc\u30bf\u6574\u5f62\uff08Data Wrangling\uff09\u306e\u57fa\u672c\u64cd\u4f5c\u306b\u3064\u3044\u3066\u5b66\u3073\u307e\u3059\u3002Pandas\u306b\u306f\u3001DataFrame\u3092\u3042\u306a\u305f\u306e\u76ee\u7684\u306b\u5408\u308f\u305b\u3066\u5909\u63db\u3059\u308b\u305f\u3081\u306e\u4fbf\u5229\u306a\u95a2\u6570\u304c\u8c4a\u5bcc\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4e3b\u306a\u64cd\u4f5c\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff1a</p> <ol> <li> <p>\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\uff08filter\uff09    DataFrame\u306e\u7279\u5b9a\u306e\u884c\u3092\u62bd\u51fa\u3059\u308b\u64cd\u4f5c\u3067\u3059\u3002    \u4f8b: <code>python    # \u6761\u4ef6\u306b\u5408\u81f4\u3059\u308b\u884c\u306e\u307f\u3092\u62bd\u51fa\u3059\u308b    filtered_df = df[df['column'] &gt; value]</code></p> </li> <li> <p>\u8981\u7d04\u7d71\u8a08\u91cf\u306e\u8a08\u7b97\uff08summarize / aggregate\uff09     \u5217\u306b\u5bfe\u3057\u3066\u4e2d\u592e\u5024\u3084\u56db\u5206\u4f4d\u7bc4\u56f2\u306a\u3069\u306e\u8981\u7d04\u7d71\u8a08\u91cf\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002     \u4f8b:     ```python     # \u3042\u308b\u5217\u306e\u4e2d\u592e\u5024\u3092\u8a08\u7b97     median_value = df['temperature'].median()</p> </li> <li> <p>\u30b0\u30eb\u30fc\u30d7\u5316\uff08group_by\uff09     \u884c\u3092\u7279\u5b9a\u306e\u57fa\u6e96\u3067\u30b0\u30eb\u30fc\u30d7\u5206\u3051\u3057\u3001\u5404\u30b0\u30eb\u30fc\u30d7\u3054\u3068\u306b\u7d71\u8a08\u91cf\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002     \u4f8b:     <code>python     # 'origin' \u5217\u3054\u3068\u306b\u5e73\u5747\u306e\u51fa\u767a\u9045\u5ef6\u6642\u9593\u3092\u8a08\u7b97     avg_dep_delay = df.groupby('origin')['dep_delay'].mean()</code></p> </li> <li> <p>\u65b0\u305f\u306a\u5909\u6570\u306e\u4f5c\u6210\uff08mutate / assign\uff09     \u65e2\u5b58\u306e\u5217\u3092\u5229\u7528\u3057\u3066\u65b0\u3057\u3044\u5217\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002     \u4f8b:     <code>python     # \u6442\u6c0f\u6e29\u5ea6\u3078\u306e\u5909\u63db\u3092\u884c\u3044\u3001\u65b0\u3057\u3044\u5217 'temp_c' \u3092\u4f5c\u6210     df['temp_c'] = (df['temp_f'] - 32) * 5/9</code></p> </li> <li> <p>\u4e26\u3079\u66ff\u3048\uff08arrange / sort_values\uff09     DataFrame\u306e\u884c\u3092\u7279\u5b9a\u306e\u5217\u306b\u57fa\u3065\u3044\u3066\u6607\u9806\u307e\u305f\u306f\u964d\u9806\u306b\u4e26\u3079\u66ff\u3048\u307e\u3059\u3002     \u4f8b:     <code>python     # 'temp' \u5217\u306b\u57fa\u3065\u3044\u3066\u6607\u9806\u306b\u30bd\u30fc\u30c8     sorted_df = df.sort_values(by='temp')</code></p> </li> <li> <p>\u7d50\u5408\uff08join / merge\uff09     \u7570\u306a\u308bDataFrame\u540c\u58eb\u3092\u30ad\u30fc\u3068\u306a\u308b\u5909\u6570\u3092\u4f7f\u3063\u3066\u7d50\u5408\uff08\u30de\u30fc\u30b8\uff09\u3057\u307e\u3059\u3002     \u4f8b:     <code>python     # 'key' \u5217\u306b\u57fa\u3065\u3044\u3066\u4e8c\u3064\u306eDataFrame\u3092\u7d50\u5408     merged_df = pd.merge(df1, df2, on='key')</code></p> </li> </ol> <p>\u3053\u306e\u3088\u3046\u306b\u3001Pandas\u306e\u95a2\u6570\u306f\u76f4\u611f\u7684\u3067\u308f\u304b\u308a\u3084\u3059\u3044\u547d\u540d\u304c\u3055\u308c\u3066\u304a\u308a\u3001\u30c7\u30fc\u30bf\u6574\u5f62\u306e\u64cd\u4f5c\u3092\u7c21\u5358\u306b\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <p>\u3055\u3089\u306b\u3001Pandas\u3092\u7528\u3044\u305f\u30c7\u30fc\u30bf\u64cd\u4f5c\u306f\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u30af\u30a8\u30ea\u8a00\u8a9e\u3067\u3042\u308b SQL \u306e\u8003\u3048\u65b9\u306b\u975e\u5e38\u306b\u4f3c\u3066\u3044\u307e\u3059\u3002SQL\u306f\u5927\u91cf\u306e\u30c7\u30fc\u30bf\u3092\u52b9\u7387\u3088\u304f\u6271\u3046\u305f\u3081\u306b\u5e83\u304f\u4f7f\u308f\u308c\u3066\u304a\u308a\u3001Pandas\u3067\u30c7\u30fc\u30bf\u6574\u5f62\u306e\u57fa\u672c\u3092\u5b66\u3076\u3068\u3001SQL\u306e\u7fd2\u5f97\u3082\u5bb9\u6613\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u3002\u3053\u308c\u3089\u306e\u5171\u901a\u70b9\u3084\u76f8\u9055\u70b9\u306b\u3064\u3044\u3066\u306f\u3001\u5f8c\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u3055\u3089\u306b\u8a73\u3057\u304f\u8aac\u660e\u3057\u3066\u3044\u304d\u307e\u3059\u3002</p>"},{"location":"lectures/SIWS/03-wrangling/#_1","title":"\u30b0\u30eb\u30fc\u30d7\u3054\u3068\u306b\u8981\u7d04\u7d71\u8a08\u91cf\u3092\u8a08\u7b97","text":"<p>summary = df.groupby('group').agg({'temperature': ['median', 'quantile']}) ```</p>"},{"location":"lectures/SIWS/03-wrangling/#_2","title":"\u5fc5\u8981\u306a\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30a4\u30f3\u30dd\u30fc\u30c8","text":"<p>\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u30bb\u30eb\u3067\u306f\u3001\u672c\u7ae0\u3067\u4f7f\u7528\u3059\u308b\u4e3b\u8981\u306a\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u307e\u3059\u3002Google Colaboratory\u3067\u306f\u3001\u3053\u308c\u3089\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u65e2\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u304c\u3001\u3082\u3057\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001!pip install \u30d1\u30c3\u30b1\u30fc\u30b8\u540d \u3092\u4f7f\u7528\u3057\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <pre><code># \u30c7\u30fc\u30bf\u64cd\u4f5c\u306e\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\nimport numpy as np\nimport pandas as pd\n\n# \u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316\u306e\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport japanize_matplotlib #\u65e5\u672c\u8a9e\u30aa\u30d7\u30b7\u30e7\u30f3\n\n# \u30b0\u30e9\u30d5\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u8a2d\u5b9a\uff08\u30aa\u30d7\u30b7\u30e7\u30f3\uff09\nsns.set(style=\"whitegrid\")\n\n# Google Colaboratory\u4e0a\u3067\u30b0\u30e9\u30d5\u3092\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u5185\u306b\u8868\u793a\u3059\u308b\u305f\u3081\u306e\u8a2d\u5b9a\n%matplotlib inline\n</code></pre>"},{"location":"lectures/SIWS/03-wrangling/#the-pipe-operator-piping","title":"The pipe operator: <code>%&gt;%</code> {#piping}","text":"<p>Before we start data wrangling, let's first introduce a nifty tool that gets loaded with the <code>dplyr</code> package: the \\index{operators!pipe} pipe operator <code>%&gt;%</code>. The pipe operator allows us to combine multiple operations in R into a single sequential chain of actions.</p> <p>Let's start with a hypothetical example. Say you would like to perform a hypothetical sequence of operations on a hypothetical data frame <code>x</code> using hypothetical functions <code>f()</code>, <code>g()</code>, and <code>h()</code>:</p> <ol> <li>Take <code>x</code> then</li> <li>Use <code>x</code> as an input to a function <code>f()</code> then</li> <li>Use the output of <code>f(x)</code> as an input to a function <code>g()</code> then</li> <li>Use the output of <code>g(f(x))</code> as an input to a function <code>h()</code></li> </ol> <p>One way to achieve this sequence of operations is by using nesting parentheses as follows:</p> <pre><code>h(g(f(x)))\n</code></pre> <p>This code isn't so hard to read since we are applying only three functions: <code>f()</code>, then <code>g()</code>, then <code>h()</code> and each of the functions is short in its name. Further, each of these functions also only has one argument. However, you can imagine that this will get progressively harder to read as the number of functions applied in your sequence increases and the arguments in each function increase as well. This is where the pipe operator <code>%&gt;%</code> comes in handy. <code>%&gt;%</code> takes the output of one function and then \"pipes\" it to be the input of the next function. Furthermore, a helpful trick is to read <code>%&gt;%</code> as \"then\" or \"and then.\" For example, you can obtain the same output as the hypothetical sequence of functions as follows:</p> <pre><code>x %&gt;% \n  f() %&gt;% \n  g() %&gt;% \n  h()\n</code></pre> <p>You would read this sequence as:</p> <ol> <li>Take <code>x</code> then</li> <li>Use this output as the input to the next function <code>f()</code> then</li> <li>Use this output as the input to the next function <code>g()</code> then</li> <li>Use this output as the input to the next function <code>h()</code></li> </ol> <p>So while both approaches achieve the same goal, the latter is much more human-readable because you can clearly read the sequence of operations line-by-line. But what are the hypothetical <code>x</code>, <code>f()</code>, <code>g()</code>, and <code>h()</code>?  Throughout this chapter on data wrangling:</p> <ol> <li>The starting value <code>x</code> will be a data frame. For example, the \\index{R packages!nycflights13} <code>flights</code> data frame we explored in Section \\@ref(nycflights13).</li> <li>The sequence of functions, here <code>f()</code>, <code>g()</code>, and <code>h()</code>, will mostly be a sequence of any number of the six data wrangling verb-named functions we listed in the introduction to this chapter. For example, the <code>filter(carrier == \"AS\")</code> function and argument specified we previewed earlier.</li> <li>The result will be the transformed/modified data frame that you want. In our example, we'll save the result in a new data frame by using the <code>&lt;-</code> assignment operator with the name <code>alaska_flights</code> via <code>alaska_flights &lt;-</code>.</li> </ol> <pre><code>alaska_flights &lt;- flights %&gt;% \n  filter(carrier == \"AS\")\n</code></pre> <p>Much like when adding layers to a <code>ggplot()</code> using the <code>+</code> sign, you form a single chain of data wrangling operations by combining verb-named functions into a single sequence using the pipe operator <code>%&gt;%</code>. Furthermore, much like how the <code>+</code> sign has to come at the end of lines when constructing plots, the pipe operator <code>%&gt;%</code> has to come at the end of lines as well. </p> <p>Keep in mind, there are many more advanced data wrangling functions than just the six listed in the introduction to this chapter; you'll see some examples of these in Section \\@ref(other-verbs). However, just with these six verb-named functions you'll be able to perform a broad array of data wrangling tasks for the rest of this book.</p>"},{"location":"lectures/SIWS/03-wrangling/#filter-rows-filter","title":"<code>filter</code> rows {#filter}","text":"<pre><code>include_graphics(\"images/cheatsheets/filter.png\")\n</code></pre> <p>The \\index{dplyr!filter} <code>filter()</code> function here works much like the \"Filter\" option in Microsoft Excel; it allows you to specify criteria about the values of a variable in your dataset and then filters out only the rows that match that criteria.</p> <p>We begin by focusing only on flights from New York City to Portland, Oregon.  The <code>dest</code> destination code (or airport code) for Portland, Oregon is <code>\"PDX\"</code>. Run the following and look at the results in RStudio's spreadsheet viewer to ensure that only flights heading to Portland are chosen here:</p> <pre><code>portland_flights &lt;- flights %&gt;% \n  filter(dest == \"PDX\")\nView(portland_flights)\n</code></pre> <p>Note the order of the code. First, take the <code>flights</code> data frame <code>flights</code> then <code>filter()</code> the data frame so that only those where the <code>dest</code> equals <code>\"PDX\"</code> are included. We test for equality using the double equal sign \\index{operators!==} <code>==</code> and not a single equal sign <code>=</code>. In other words <code>filter(dest = \"PDX\")</code> will yield an error. This is a convention across many programming languages. If you are new to coding, you'll probably forget to use the double equal sign <code>==</code> a few times before you get the hang of it.</p> <p>You can use other operators \\index{operators} beyond just the <code>==</code> operator that tests for equality:</p> <ul> <li><code>&gt;</code> corresponds to \"greater than\"</li> <li><code>&lt;</code> corresponds to \"less than\"</li> <li><code>&gt;=</code> corresponds to \"greater than or equal to\"</li> <li><code>&lt;=</code> corresponds to \"less than or equal to\"</li> <li><code>!=</code> corresponds to \"not equal to.\" The <code>!</code> is used in many programming languages to indicate \"not.\"</li> </ul> <p>Furthermore, you can combine multiple criteria using operators that make comparisons:</p> <ul> <li><code>|</code> corresponds to \"or\"</li> <li><code>&amp;</code> corresponds to \"and\"</li> </ul> <p>To see many of these in action, let's filter <code>flights</code> for all rows that departed from JFK and were heading to Burlington, Vermont (<code>\"BTV\"</code>) or Seattle, Washington (<code>\"SEA\"</code>) and departed in the months of October, November, or December. Run the following:</p> <pre><code>btv_sea_flights_fall &lt;- flights %&gt;% \n  filter(origin == \"JFK\" &amp; (dest == \"BTV\" | dest == \"SEA\") &amp; month &gt;= 10)\nView(btv_sea_flights_fall)\n</code></pre> <p>Note that even though colloquially speaking one might say \"all flights leaving Burlington, Vermont and Seattle, Washington,\" in terms of computer operations, we really mean \"all flights leaving Burlington, Vermont or leaving Seattle, Washington.\" For a given row in the data, <code>dest</code> can be <code>\"BTV\"</code>, or <code>\"SEA\"</code>, or something else, but not both <code>\"BTV\"</code> and <code>\"SEA\"</code> at the same time. Furthermore, note the careful use of parentheses around <code>dest == \"BTV\" | dest == \"SEA\"</code>.</p> <p>We can often skip the use of <code>&amp;</code> and just separate our conditions with a comma. The previous code will return the identical output <code>btv_sea_flights_fall</code> as the following code:</p> <pre><code>btv_sea_flights_fall &lt;- flights %&gt;% \n  filter(origin == \"JFK\", (dest == \"BTV\" | dest == \"SEA\"), month &gt;= 10)\nView(btv_sea_flights_fall)\n</code></pre> <p>Let's present another example that uses the \\index{operators!not} <code>!</code> \"not\" operator to pick rows that don't match a criteria. As mentioned earlier, the <code>!</code> can be read as \"not.\" Here we are filtering rows corresponding to flights that didn't go to Burlington, VT or Seattle, WA.</p> <pre><code>not_BTV_SEA &lt;- flights %&gt;% \n  filter(!(dest == \"BTV\" | dest == \"SEA\"))\nView(not_BTV_SEA)\n</code></pre> <p>Again, note the careful use of parentheses around the <code>(dest == \"BTV\" | dest == \"SEA\")</code>. If we didn't use parentheses as follows:</p> <pre><code>flights %&gt;% filter(!dest == \"BTV\" | dest == \"SEA\")\n</code></pre> <p>We would be returning all flights not headed to <code>\"BTV\"</code> or those headed to <code>\"SEA\"</code>, which is an entirely different resulting data frame. </p> <p>Now say we have a larger number of airports we want to filter for, say <code>\"SEA\"</code>, <code>\"SFO\"</code>, <code>\"PDX\"</code>, <code>\"BTV\"</code>, and <code>\"BDL\"</code>. We could continue to use the <code>|</code> (or) \\index{operators!or} operator:</p> <pre><code>many_airports &lt;- flights %&gt;% \n  filter(dest == \"SEA\" | dest == \"SFO\" | dest == \"PDX\" | \n         dest == \"BTV\" | dest == \"BDL\")\n</code></pre> <p>but as we progressively include more airports, this will get unwieldy to write. A slightly shorter approach uses the <code>%in%</code> \\index{operators!in} operator along with the <code>c()</code> function. Recall from Subsection \\@ref(programming-concepts) that the <code>c()</code> function \"combines\" or \"concatenates\" values into a single vector of values. \\index{vectors}</p> <pre><code>many_airports &lt;- flights %&gt;% \n  filter(dest %in% c(\"SEA\", \"SFO\", \"PDX\", \"BTV\", \"BDL\"))\nView(many_airports)\n</code></pre> <p>What this code is doing is filtering <code>flights</code> for all flights where <code>dest</code> is in the vector of airports <code>c(\"BTV\", \"SEA\", \"PDX\", \"SFO\", \"BDL\")</code>. Both outputs of <code>many_airports</code> are the same, but as you can see the latter takes much less energy to code. The <code>%in%</code> operator is useful for looking for matches commonly in one vector/variable compared to another.</p> <p>As a final note, we recommend that <code>filter()</code> should often be among the first verbs you consider applying to your data. This cleans your dataset to only those rows you care about, or put differently, it narrows down the scope of your data frame to just the observations you care about. </p> <pre><code>\\vspace{-0.15in}\n**_Learning check_**\n\\vspace{-0.1in}\n</code></pre> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> What's another way of using the \"not\" operator <code>!</code> to filter only the rows that are not going to Burlington, VT nor Seattle, WA in the <code>flights</code> data frame? Test this out using the previous code.</p> <pre><code>\\vspace{-0.25in}\n\\vspace{-0.25in}\n</code></pre>"},{"location":"lectures/SIWS/03-wrangling/#summarize-variables-summarize","title":"<code>summarize</code> variables {#summarize}","text":"<p>The next common task when working with data frames is to compute summary statistics. \\index{summary statistics}Summary statistics are single numerical values that summarize a large number of values. Commonly known examples of summary statistics include the mean (also called the average) and the median (the middle value). Other examples of summary statistics that might not immediately come to mind include the sum, the smallest value also called the minimum, the largest value also called the maximum, and the standard deviation. See Appendix \\@ref(appendix-stat-terms) for a glossary of such summary statistics.</p> <p>Let's calculate two summary statistics of the <code>temp</code> temperature variable in the <code>weather</code> data frame: the mean and standard deviation (recall from Section \\@ref(nycflights13) that the <code>weather</code> data frame is included in the <code>nycflights13</code> package). To compute these summary statistics, we need the <code>mean()</code> and <code>sd()</code> summary functions in R. Summary functions in R take in many values and return a single value, as illustrated in Figure \\@ref(fig:summary-function). </p> <pre><code>include_graphics(\"images/cheatsheets/summary.png\")\noptions(knitr.kable.NA = \"NA\")\n</code></pre> <p>More precisely, we'll use the <code>mean()</code> and <code>sd()</code> summary functions within the <code>summarize()</code> \\index{dplyr!summarize()} function from the <code>dplyr</code> package. Note you can also use the British English spelling of <code>summarise()</code>. As shown in Figure \\@ref(fig:sum1), the <code>summarize()</code> function takes in a data frame and returns a data frame with only one row corresponding to the summary statistics. </p> <pre><code>include_graphics(\"images/cheatsheets/summarize1.png\")\n</code></pre> <p>We'll save the results in a new data frame called <code>summary_temp</code> that will have two columns/variables: the <code>mean</code> and the <code>std_dev</code>:</p> <pre><code>summary_temp &lt;- weather %&gt;% \n  summarize(mean = mean(temp), std_dev = sd(temp))\nsummary_temp\n</code></pre> <p>Why are the values returned <code>NA</code>? As we saw in Subsection \\@ref(geompoint) when creating the scatterplot of departure and arrival delays for <code>alaska_flights</code>, <code>NA</code> is how R encodes missing values \\index{missing values} where <code>NA</code> indicates \"not available\" or \"not applicable.\" If a value for a particular row and a particular column does not exist, <code>NA</code> is stored instead. Values can be missing for many reasons. Perhaps the data was collected but someone forgot to enter it? Perhaps the data was not collected at all because it was too difficult to do so? Perhaps there was an erroneous value that someone entered that has been corrected to read as missing? You'll often encounter issues with missing values when working with real data.</p> <p>Going back to our <code>summary_temp</code> output, by default any time you try to calculate a summary statistic of a variable that has one or more <code>NA</code> missing values in R, <code>NA</code> is returned. To work around this fact, you can set the <code>na.rm</code> argument to <code>TRUE</code>, where <code>rm</code> is short for \"remove\"; this will ignore any <code>NA</code> missing values and only return the summary value for all non-missing values. </p> <p>The code that follows computes the mean and standard deviation of all non-missing values of <code>temp</code>:</p> <pre><code>summary_temp &lt;- weather %&gt;% \n  summarize(mean = mean(temp, na.rm = TRUE), \n            std_dev = sd(temp, na.rm = TRUE))\nsummary_temp\n</code></pre> <p>Notice how the <code>na.rm = TRUE</code> \\index{functions!na.rm argument} are used as arguments to the <code>mean()</code> \\index{mean()} and <code>sd()</code> \\index{sd()} summary functions individually, and not to the <code>summarize()</code> function. </p> <p>However, one needs to be cautious whenever ignoring missing values as we've just done. In the upcoming Learning checks questions, we'll consider the possible ramifications of blindly sweeping rows with missing values \"under the rug.\" This is in fact why the <code>na.rm</code> argument to any summary statistic function in R is set to <code>FALSE</code> by default. In other words, R does not ignore rows with missing values by default. R is alerting you to the presence of missing data and you should be mindful of this missingness and any potential causes of this missingness throughout your analysis.</p> <p>What are other summary functions we can use inside the <code>summarize()</code> verb to compute summary statistics? As seen in the diagram in Figure \\@ref(fig:summary-function), you can use any function in R that takes many values and returns just one. Here are just a few:</p> <ul> <li><code>mean()</code>: the average</li> <li><code>sd()</code>: the standard deviation, which is a measure of spread</li> <li><code>min()</code> and <code>max()</code>: the minimum and maximum values, respectively</li> <li><code>IQR()</code>: interquartile range</li> <li><code>sum()</code>: the total amount when adding multiple numbers</li> <li><code>n()</code>: a count of the number of rows in each group. This particular summary function will make more sense when <code>group_by()</code> is covered in Section \\@ref(groupby).</li> </ul> <pre><code>\\vspace{-0.15in}\n**_Learning check_**\n\\vspace{-0.1in}\n</code></pre> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> Say a doctor is studying the effect of smoking on lung cancer for a large number of patients who have records measured at five-year intervals. She notices that a large number of patients have missing data points because the patient has died, so she chooses to ignore these patients in her analysis. What is wrong with this doctor's approach?</p> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> Modify the earlier <code>summarize()</code> function code that creates the <code>summary_temp</code> data frame to also use the <code>n()</code> summary function: <code>summarize(... , count = n())</code>. What does the returned value correspond to?</p> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> Why doesn't the following code work?  Run the code line-by-line instead of all at once, and then look at the data.  In other words, run <code>summary_temp &lt;- weather %&gt;% summarize(mean = mean(temp, na.rm = TRUE))</code> first.</p> <pre><code>summary_temp &lt;- weather %&gt;%   \n  summarize(mean = mean(temp, na.rm = TRUE)) %&gt;% \n  summarize(std_dev = sd(temp, na.rm = TRUE))\n</code></pre> <pre><code>\\vspace{-0.25in}\n\\vspace{-0.25in}\n</code></pre>"},{"location":"lectures/SIWS/03-wrangling/#group_by-rows-groupby","title":"<code>group_by</code> rows {#groupby}","text":"<p>(ref:groupby) Diagram of group_by() and summarize().</p> <pre><code>include_graphics(\"images/cheatsheets/group_summary.png\")\n</code></pre> <p>Say instead of a single mean temperature for the whole year, you would like 12 mean temperatures, one for each of the 12 months separately. In other words, we would like to compute the mean temperature split by month. We can do this by \"grouping\" temperature observations by the values of another variable, in this case by the 12 values of the variable <code>month</code>. Run the following code:</p> <pre><code>summary_monthly_temp &lt;- weather %&gt;% \n  group_by(month) %&gt;% \n  summarize(mean = mean(temp, na.rm = TRUE), \n            std_dev = sd(temp, na.rm = TRUE))\nsummary_monthly_temp\n</code></pre> <p>This code is identical to the previous code that created <code>summary_temp</code>, but with an extra <code>group_by(month)</code> added before the <code>summarize()</code>. Grouping the <code>weather</code> dataset by <code>month</code> and then applying the <code>summarize()</code> functions yields a data frame that displays the mean and standard deviation temperature split by the 12 months of the year.</p> <p>It is important to note that the \\index{dplyr!group_by()} <code>group_by()</code> function doesn't change data frames by itself. Rather it changes the meta-data\\index{meta-data}, or data about the data, specifically the grouping structure. It is only after we apply the <code>summarize()</code> function that the data frame changes. </p> <p>For example, let's consider the \\index{ggplot2!diamonds} <code>diamonds</code> data frame included in the <code>ggplot2</code> package. Run this code:</p> <pre><code>diamonds\n</code></pre> <p>Observe that the first line of the output reads <code># A tibble: `r diamonds %&gt;% nrow() %&gt;% comma()` x `r diamonds %&gt;% ncol()`</code>. This is an example of meta-data, in this case the number of observations/rows and variables/columns in <code>diamonds</code>. The actual data itself are the subsequent table of values. Now let's pipe the <code>diamonds</code> data frame into <code>group_by(cut)</code>:</p> <pre><code>diamonds %&gt;% \n  group_by(cut)\n</code></pre> <pre><code># This code is used for dynamic non-static in-line text output purposes\ncut_levels &lt;- diamonds %&gt;%\n  select(cut) %&gt;%\n  n_distinct()\n</code></pre> <p>Observe that now there is additional meta-data: <code># Groups: cut [`r cut_levels`]</code> indicating that the grouping structure meta-data has been set based on the <code>r cut_levels</code> possible levels of the categorical variable <code>cut</code>: <code>\"Fair\"</code>, <code>\"Good\"</code>, <code>\"Very Good\"</code>, <code>\"Premium\"</code>, and <code>\"Ideal\"</code>. On the other hand, observe that the data has not changed: it is still a table of <code>r diamonds %&gt;% nrow() %&gt;% comma()</code> \\(\\times\\) <code>r diamonds %&gt;% ncol()</code> values.</p> <p>Only by combining a <code>group_by()</code> with another data wrangling operation, in this case <code>summarize()</code>, will the data actually be transformed. </p> <pre><code>diamonds %&gt;% \n  group_by(cut) %&gt;% \n  summarize(avg_price = mean(price))\n</code></pre> <p>If you would like to remove this grouping structure meta-data, we can pipe the resulting data frame into the \\index{dplyr!ungroup()} <code>ungroup()</code> function:</p> <pre><code>diamonds %&gt;% \n  group_by(cut) %&gt;% \n  ungroup()\n</code></pre> <p>Observe how the <code># Groups: cut [`r cut_levels`]</code> meta-data is no longer present. </p> <p>Let's now revisit the <code>n()</code> \\index{dplyr!n()} counting summary function we briefly introduced previously. Recall that the <code>n()</code> function counts rows. This is opposed to the <code>sum()</code> summary function that returns the sum of a numerical variable. For example, suppose we'd like to count how many flights departed each of the three airports in New York City:</p> <pre><code>by_origin &lt;- flights %&gt;% \n  group_by(origin) %&gt;% \n  summarize(count = n())\nby_origin\n</code></pre> <p>We see that Newark (<code>\"EWR\"</code>) had the most flights departing in 2013 followed by <code>\"JFK\"</code> and lastly by LaGuardia (<code>\"LGA\"</code>). Note there is a subtle but important difference between <code>sum()</code> and <code>n()</code>; while <code>sum()</code> returns the sum of a numerical variable, <code>n()</code> returns a count of the number of rows/observations. </p>"},{"location":"lectures/SIWS/03-wrangling/#grouping-by-more-than-one-variable","title":"Grouping by more than one variable","text":"<p>You are not limited to grouping by one variable. Say you want to know the number of flights leaving each of the three New York City airports for each month. We can also group by a second variable <code>month</code> using <code>group_by(origin, month)</code>:</p> <pre><code>by_origin_monthly &lt;- flights %&gt;% \n  group_by(origin, month) %&gt;% \n  summarize(count = n())\nby_origin_monthly\n</code></pre> <p>Observe that there are <code>r by_origin_monthly %&gt;% nrow()</code> rows to <code>by_origin_monthly</code> because there are 12 months for 3 airports (<code>EWR</code>, <code>JFK</code>, and <code>LGA</code>). </p> <p>Why do we <code>group_by(origin, month)</code> and not <code>group_by(origin)</code> and then <code>group_by(month)</code>? Let's investigate:</p> <pre><code>by_origin_monthly_incorrect &lt;- flights %&gt;% \n  group_by(origin) %&gt;% \n  group_by(month) %&gt;% \n  summarize(count = n())\nby_origin_monthly_incorrect\n</code></pre> <p>What happened here is that the second <code>group_by(month)</code> overwrote the grouping structure meta-data of the earlier <code>group_by(origin)</code>, so that in the end we are only grouping by <code>month</code>. The lesson here is if you want to <code>group_by()</code> two or more variables, you should include all the variables at the same time in the same <code>group_by()</code> adding a comma between the variable names.</p> <pre><code>\\vspace{-0.15in}\n**_Learning check_**\n\\vspace{-0.1in}\n</code></pre> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> Recall from Chapter \\@ref(viz) when we looked at temperatures by months in NYC. What does the standard deviation column in the <code>summary_monthly_temp</code> data frame tell us about temperatures in NYC throughout the year?</p> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> What code would be required to get the mean and standard deviation temperature for each day in 2013 for NYC?</p> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> Recreate <code>by_monthly_origin</code>, but instead of grouping via <code>group_by(origin, month)</code>, group variables in a different order <code>group_by(month, origin)</code>. What differs in the resulting dataset?</p> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> How could we identify how many flights left each of the three airports for each <code>carrier</code>?</p> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> How does the <code>filter()</code> operation differ from a <code>group_by()</code> followed by a <code>summarize()</code>?</p> <pre><code>\\vspace{-0.25in}\n\\vspace{-0.25in}\n</code></pre>"},{"location":"lectures/SIWS/03-wrangling/#mutate-existing-variables-mutate","title":"<code>mutate</code> existing variables {#mutate}","text":"<pre><code>include_graphics(\"images/cheatsheets/mutate.png\")\n</code></pre> <p>Another common transformation of data is to create/compute new variables based on existing ones. For example, say you are more comfortable thinking of temperature in degrees Celsius (\u00b0C) instead of degrees Fahrenheit (\u00b0F). The formula to convert temperatures from \u00b0F to \u00b0C is</p> \\[ \\text{temp in C} = \\frac{\\text{temp in F} - 32}{1.8} \\] <p>We can apply this formula to the <code>temp</code> variable using the <code>mutate()</code> \\index{dplyr!mutate()} function from the <code>dplyr</code> package, which takes existing variables and mutates them to create new ones. </p> <pre><code>weather &lt;- weather %&gt;% \n  mutate(temp_in_C = (temp - 32) / 1.8)\n</code></pre> <p>In this code, we <code>mutate()</code> the <code>weather</code> data frame by creating a new variable <code>temp_in_C = (temp - 32) / 1.8</code> and then overwrite the original <code>weather</code> data frame. Why did we overwrite the data frame <code>weather</code>, instead of assigning the result to a new data frame like <code>weather_new</code>? As a rough rule of thumb, as long as you are not losing original information that you might need later, it's acceptable practice to overwrite existing data frames with updated ones, as we did here. On the other hand, why did we not overwrite the variable <code>temp</code>, but instead created a new variable called <code>temp_in_C</code>?  Because if we did this, we would have erased the original information contained in <code>temp</code> of temperatures in Fahrenheit that may still be valuable to us.</p> <p>Let's now compute monthly average temperatures in both \u00b0F and \u00b0C using the <code>group_by()</code> and <code>summarize()</code> code we saw in Section \\@ref(groupby):</p> <pre><code>summary_monthly_temp &lt;- weather %&gt;% \n  group_by(month) %&gt;% \n  summarize(mean_temp_in_F = mean(temp, na.rm = TRUE), \n            mean_temp_in_C = mean(temp_in_C, na.rm = TRUE))\nsummary_monthly_temp\n</code></pre> <p>Let's consider another example. Passengers are often frustrated when their flight departs late, but aren't as annoyed if, in the end, pilots can make up some time during the flight.  This is known in the airline industry as gain, and we will create this variable using the <code>mutate()</code> function:</p> <pre><code>flights &lt;- flights %&gt;% \n  mutate(gain = dep_delay - arr_delay)\n</code></pre> <p>Let's take a look at only the <code>dep_delay</code>, <code>arr_delay</code>, and the resulting <code>gain</code> variables for the first 5 rows in our updated <code>flights</code> data frame in Table \\@ref(tab:first-five-flights).</p> <pre><code>flights %&gt;% \n  select(dep_delay, arr_delay, gain) %&gt;% \n  slice(1:5) %&gt;% \n  kbl(\n    caption = \"First five rows of departure/arrival delay and gain variables\"\n  ) %&gt;%\n  kable_styling(position = \"center\", latex_options = \"hold_position\")\n</code></pre> <p>The flight in the first row departed 2 minutes late but arrived 11 minutes late, so its \"gained time in the air\" is a loss of 9 minutes, hence its <code>gain</code> is 2 - 11 = -9. On the other hand, the flight in the fourth row departed a minute early (<code>dep_delay</code> of -1) but arrived 18 minutes early (<code>arr_delay</code> of -18), so its \"gained time in the air\" is \\(-1 - (-18) = -1 + 18 = 17\\) minutes, hence its <code>gain</code> is +17.</p> <p>Let's look at some summary statistics of the <code>gain</code> variable by considering multiple summary functions at once in the same <code>summarize()</code> code:</p> <pre><code>gain_summary &lt;- flights %&gt;% \n  summarize(\n    min = min(gain, na.rm = TRUE),\n    q1 = quantile(gain, 0.25, na.rm = TRUE),\n    median = quantile(gain, 0.5, na.rm = TRUE),\n    q3 = quantile(gain, 0.75, na.rm = TRUE),\n    max = max(gain, na.rm = TRUE),\n    mean = mean(gain, na.rm = TRUE),\n    sd = sd(gain, na.rm = TRUE),\n    missing = sum(is.na(gain))\n  )\ngain_summary\n</code></pre> <p>We see for example that the average gain is +5 minutes, while the largest is +109 minutes! However, this code would take some time to type out in practice. We'll see later on in Subsection \\@ref(model1EDA) that there is a much more succinct way to compute a variety of common summary statistics: using the <code>skim()</code> function from the <code>skimr</code> package.</p> <p>Recall from Section \\@ref(histograms) that since <code>gain</code> is a numerical variable, we can visualize its distribution using a histogram.  </p> <pre><code>ggplot(data = flights, mapping = aes(x = gain)) +\n  geom_histogram(color = \"white\", bins = 20)\n</code></pre> <p>The resulting histogram in Figure \\@ref(fig:gain-hist) provides a different perspective on the <code>gain</code> variable than the summary statistics we computed earlier. For example, note that most values of <code>gain</code> are right around 0. </p> <p>To close out our discussion on the <code>mutate()</code> function to create new variables, note that we can create multiple new variables at once in the same <code>mutate()</code> code. Furthermore, within the same <code>mutate()</code> code we can refer to new variables we just created. As an example, consider the <code>mutate()</code> code Hadley Wickham \\index{Wickham, Hadley} and Garrett Grolemund \\index{Grolemund, Garrett} show in Chapter 5 of R for Data Science [@rds2016]:</p> <pre><code>flights &lt;- flights %&gt;% \n  mutate(\n    gain = dep_delay - arr_delay,\n    hours = air_time / 60,\n    gain_per_hour = gain / hours\n  )\n</code></pre> <pre><code>\\vspace{-0.15in}\n**_Learning check_**\n\\vspace{-0.1in}\n</code></pre> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> What do positive values of the <code>gain</code> variable in <code>flights</code> correspond to?  What about negative values?  And what about a zero value?</p> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> Could we create the <code>dep_delay</code> and <code>arr_delay</code> columns by simply subtracting <code>dep_time</code> from <code>sched_dep_time</code> and similarly for arrivals?  Try the code out and explain any differences between the result and what actually appears in <code>flights</code>.</p> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> What can we say about the distribution of <code>gain</code>?  Describe it in a few sentences using the plot and the <code>gain_summary</code> data frame values.</p> <pre><code>\\vspace{-0.25in}\n\\vspace{-0.25in}\n</code></pre>"},{"location":"lectures/SIWS/03-wrangling/#arrange-and-sort-rows-arrange","title":"<code>arrange</code> and sort rows {#arrange}","text":"<p>One of the most commonly performed data wrangling tasks is to sort a data frame's rows in the alphanumeric order of one of the variables. The <code>dplyr</code> package's <code>arrange()</code> function \\index{dplyr!arrange()} allows us to sort/reorder a data frame's rows according to the values of the specified variable.</p> <p>Suppose we are interested in determining the most frequent destination airports for all domestic flights departing from New York City in 2013:</p> <pre><code>freq_dest &lt;- flights %&gt;% \n  group_by(dest) %&gt;% \n  summarize(num_flights = n())\nfreq_dest\n</code></pre> <p>Observe that by default the rows of the resulting <code>freq_dest</code> data frame are sorted in alphabetical order of <code>dest</code>ination. Say instead we would like to see the same data, but sorted from the most to the least number of flights (<code>num_flights</code>) instead:</p> <pre><code>freq_dest %&gt;% \n  arrange(num_flights)\n</code></pre> <p>This is, however, the opposite of what we want. The rows are sorted with the least frequent destination airports displayed first. This is because <code>arrange()</code> always returns rows sorted in ascending order by default. To switch the ordering to be in \"descending\" order instead, we use the <code>desc()</code> \\index{dplyr!desc()} function as so:</p> <pre><code>freq_dest %&gt;% \n  arrange(desc(num_flights))\n</code></pre>"},{"location":"lectures/SIWS/03-wrangling/#join-data-frames-joins","title":"<code>join</code> data frames {#joins}","text":"<p>Another common data transformation task is \"joining\" or \"merging\" two different datasets. For example, in the <code>flights</code> data frame, the variable <code>carrier</code> lists the carrier code for the different flights. While the corresponding airline names for <code>\"UA\"</code> and <code>\"AA\"</code> might be somewhat easy to guess (United and American Airlines), what airlines have codes <code>\"VX\"</code>, <code>\"HA\"</code>, and <code>\"B6\"</code>? This information is provided in a separate data frame <code>airlines</code>.</p> <pre><code>View(airlines)\n</code></pre> <p>We see that in <code>airlines</code>, <code>carrier</code> is the carrier code, while <code>name</code> is the full name of the airline company. Using this table, we can see that <code>\"VX\"</code>, <code>\"HA\"</code>, and <code>\"B6\"</code> correspond to Virgin America, Hawaiian Airlines, and JetBlue, respectively. However, wouldn't it be nice to have all this information in a single data frame instead of two separate data frames? We can do this by \"joining\" the <code>flights</code> and <code>airlines</code> data frames.</p> <p>Note that the values in the variable <code>carrier</code> in the <code>flights</code> data frame match the values in the variable <code>carrier</code> in the <code>airlines</code> data frame. In this case, we can use the variable <code>carrier</code> as a \\index{joining data!key variable} key variable to match the rows of the two data frames. Key variables are almost always identification variables that uniquely identify the observational units as we saw in Subsection \\@ref(identification-vs-measurement-variables). This ensures that rows in both data frames are appropriately matched during the join. Hadley and Garrett [@rds2016] created the diagram shown in Figure \\@ref(fig:reldiagram) to help us understand how the different data frames in the <code>nycflights13</code> package are linked by various key variables:</p> <p>(ref:relationships-nycflights13) Data relationships in nycflights13 from R for Data Science.</p> <pre><code>include_graphics(\"images/r4ds/relational-nycflights.png\")\n</code></pre>"},{"location":"lectures/SIWS/03-wrangling/#matching-key-variable-names","title":"Matching \"key\" variable names","text":"<p>In both the <code>flights</code> and <code>airlines</code> data frames, the key variable we want to join/merge/match the rows by has the same name: <code>carrier</code>. Let's use the <code>inner_join()</code> \\index{dplyr!inner_join()} function to join the two data frames, where the rows will be matched by the variable <code>carrier</code>, and then compare the resulting data frames:</p> <pre><code>flights_joined &lt;- flights %&gt;% \n  inner_join(airlines, by = \"carrier\")\nView(flights)\nView(flights_joined)\n</code></pre> <p>Observe that the <code>flights</code> and <code>flights_joined</code> data frames are identical except that <code>flights_joined</code> has an additional variable <code>name</code>. The values of <code>name</code> correspond to the airline companies' names as indicated in the <code>airlines</code> data frame. </p> <p>A visual representation of the <code>inner_join()</code> is shown in Figure \\@ref(fig:ijdiagram) [@rds2016]. There are other types of joins available (such as <code>left_join()</code>, <code>right_join()</code>, <code>outer_join()</code>, and <code>anti_join()</code>), but the <code>inner_join()</code> will solve nearly all of the problems you'll encounter in this book.</p> <p>(ref:inner-join-r4ds) Diagram of inner join from R for Data Science.</p> <pre><code>include_graphics(\"images/r4ds/join-inner.png\")\n</code></pre>"},{"location":"lectures/SIWS/03-wrangling/#different-key-variable-names-diff-key","title":"Different \"key\" variable names {#diff-key}","text":"<p>Say instead you are interested in the destinations of all domestic flights departing NYC in 2013, and you ask yourself questions like: \"What cities are these airports in?\", or \"Is <code>\"ORD\"</code> Orlando?\", or \"Where is <code>\"FLL\"</code>?\".</p> <p>The <code>airports</code> data frame contains the airport codes for each airport:</p> <pre><code>View(airports)\n</code></pre> <p>However, if you look at both the <code>airports</code> and <code>flights</code> data frames, you'll find that the airport codes are in variables that have different names. In <code>airports</code> the airport code is in <code>faa</code>, whereas in <code>flights</code> the airport codes are in <code>origin</code> and <code>dest</code>. This fact is further highlighted in the visual representation of the relationships between these data frames in Figure \\@ref(fig:reldiagram).</p> <p>In order to join these two data frames by airport code, our <code>inner_join()</code> operation will use the <code>by = c(\"dest\" = \"faa\")</code> \\index{dplyr!inner_join()!by} argument with modified code syntax allowing us to join two data frames where the key variable has a different name:</p> <pre><code>flights_with_airport_names &lt;- flights %&gt;% \n  inner_join(airports, by = c(\"dest\" = \"faa\"))\nView(flights_with_airport_names)\n</code></pre> <p>Let's construct the chain of pipe operators <code>%&gt;%</code> that computes the number of flights from NYC to each destination, but also includes information about each destination airport:</p> <pre><code>named_dests &lt;- flights %&gt;%\n  group_by(dest) %&gt;%\n  summarize(num_flights = n()) %&gt;%\n  arrange(desc(num_flights)) %&gt;%\n  inner_join(airports, by = c(\"dest\" = \"faa\")) %&gt;%\n  rename(airport_name = name)\nnamed_dests\n</code></pre> <p>In case you didn't know, <code>\"ORD\"</code> is the airport code of Chicago O'Hare airport and <code>\"FLL\"</code> is the main airport in Fort Lauderdale, Florida, which can be seen in the <code>airport_name</code> variable.</p>"},{"location":"lectures/SIWS/03-wrangling/#multiple-key-variables","title":"Multiple \"key\" variables","text":"<p>Say instead we want to join two data frames by multiple key variables. For example, in Figure \\@ref(fig:reldiagram), we see that in order to join the <code>flights</code> and <code>weather</code> data frames, we need more than one key variable: <code>year</code>, <code>month</code>, <code>day</code>, <code>hour</code>, and <code>origin</code>. This is because the combination of these 5 variables act to uniquely identify each observational unit in the <code>weather</code> data frame: hourly weather recordings at each of the 3 NYC airports.</p> <p>We achieve this by specifying a vector of key variables to join by using the <code>c()</code> function. Recall from Subsection \\@ref(programming-concepts) that <code>c()</code> is short for \"combine\" or \"concatenate.\" \\index{vectors}</p> <pre><code>flights_weather_joined &lt;- flights %&gt;%\n  inner_join(weather, by = c(\"year\", \"month\", \"day\", \"hour\", \"origin\"))\nView(flights_weather_joined)\n</code></pre> <pre><code>\\vspace{-0.15in}\n**_Learning check_**\n\\vspace{-0.1in}\n</code></pre> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> Looking at Figure \\@ref(fig:reldiagram), when joining <code>flights</code> and <code>weather</code> (or, in other words, matching the hourly weather values with each flight), why do we need to join by all of <code>year</code>, <code>month</code>, <code>day</code>, <code>hour</code>, and <code>origin</code>, and not just <code>hour</code>?</p> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> What surprises you about the top 10 destinations from NYC in 2013?</p> <pre><code>\\vspace{-0.25in}\n\\vspace{-0.25in}\n</code></pre>"},{"location":"lectures/SIWS/03-wrangling/#normal-forms-normal-forms","title":"Normal forms {#normal-forms}","text":"<p>The data frames included in the <code>nycflights13</code> package are in a form that minimizes redundancy of data. For example, the <code>flights</code> data frame only saves the <code>carrier</code> code of the airline company; it does not include the actual name of the airline. For example, the first row of <code>flights</code> has <code>carrier</code> equal to <code>UA</code>, but it does not include the airline name of \"United Air Lines Inc.\" </p> <p>The names of the airline companies are included in the <code>name</code> variable of the <code>airlines</code> data frame. In order to have the airline company name included in <code>flights</code>, we could join these two data frames as follows:</p> <pre><code>joined_flights &lt;- flights %&gt;% \n  inner_join(airlines, by = \"carrier\")\nView(joined_flights)\n</code></pre> <p>We are capable of performing this join because each of the data frames have keys in common to relate one to another: the <code>carrier</code> variable in both the <code>flights</code> and <code>airlines</code> data frames.  The key variable(s) that we base our joins on are often identification variables as we mentioned previously. </p> <p>This is an important property of what's known as normal forms of data.  The process of decomposing data frames into less redundant tables without losing information is called normalization.  More information is available on Wikipedia.</p> <p>Both <code>dplyr</code> and SQL we mentioned in the introduction of this chapter use such normal forms. Given that they share such commonalities, once you learn either of these two tools, you can learn the other very easily. </p> <pre><code>\\vspace{-0.15in}\n**_Learning check_**\n\\vspace{-0.1in}\n</code></pre> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> What are some advantages of data in normal forms?  What are some disadvantages?</p> <pre><code>\\vspace{-0.25in}\n\\vspace{-0.25in}\n</code></pre>"},{"location":"lectures/SIWS/03-wrangling/#other-verbs-other-verbs","title":"Other verbs {#other-verbs}","text":"<p>Here are some other useful data wrangling verbs:</p> <ul> <li><code>select()</code> only a subset of variables/columns.</li> <li><code>rename()</code> variables/columns to have new names.</li> <li>Return only the <code>top_n()</code> values of a variable.</li> </ul>"},{"location":"lectures/SIWS/03-wrangling/#select-variables-select","title":"<code>select</code> variables {#select}","text":"<pre><code>include_graphics(\"images/cheatsheets/select.png\")\n</code></pre> <pre><code># This redundant code is used for dynamic non-static in-line text output purposes\n# :: operator used as output was wrong otherwise\nflights_cols &lt;- nycflights13::flights %&gt;%\n  ncol() \n</code></pre> <p>We've seen that the <code>flights</code> data frame in the <code>nycflights13</code> package contains <code>r flights_cols</code> different variables. You can identify the names of these <code>r flights_cols</code> variables by running the <code>glimpse()</code> function from the <code>dplyr</code> package:</p> <pre><code>glimpse(flights)\n</code></pre> <p>However, say you only need two of these <code>r flights_cols</code> variables, say <code>carrier</code> and <code>flight</code>. You can <code>select()</code> \\index{dplyr!select()} these two variables:</p> <pre><code>flights %&gt;% \n  select(carrier, flight)\n</code></pre> <p>This function makes it easier to explore large datasets since it allows us to limit the scope to only those variables we care most about. For example, if we <code>select()</code> only a smaller number of variables as is shown in Figure \\@ref(fig:selectfig), it will make viewing the dataset in RStudio's spreadsheet viewer more digestible.</p> <p>Let's say instead you want to drop, or de-select, certain variables. For example, consider the variable <code>year</code> in the <code>flights</code> data frame. This variable isn't quite a \"variable\" because it is always <code>2013</code> and hence doesn't change. Say you want to remove this variable from the data frame. We can deselect <code>year</code> by using the <code>-</code> sign:</p> <pre><code>flights_no_year &lt;- flights %&gt;% select(-year)\n</code></pre> <p>Another way of selecting columns/variables is by specifying a range of columns:</p> <pre><code>flight_arr_times &lt;- flights %&gt;% select(month:day, arr_time:sched_arr_time)\nflight_arr_times\n</code></pre> <p>This will <code>select()</code> all columns between <code>month</code> and <code>day</code>, as well as between <code>arr_time</code> and <code>sched_arr_time</code>, and drop the rest. </p> <p>The <code>select()</code> function can also be used to reorder columns when used with the <code>everything()</code> helper function.  For example, suppose we want the <code>hour</code>, <code>minute</code>, and <code>time_hour</code> variables to appear immediately after the <code>year</code>, <code>month</code>, and <code>day</code> variables, while not discarding the rest of the variables. In the following code, <code>everything()</code> will pick up all remaining variables: </p> <pre><code>flights_reorder &lt;- flights %&gt;% \n  select(year, month, day, hour, minute, time_hour, everything())\nglimpse(flights_reorder)\n</code></pre> <p>Lastly, the helper functions <code>starts_with()</code>, <code>ends_with()</code>, and <code>contains()</code> can be used to select variables/columns that match those conditions. As examples,</p> <pre><code>flights %&gt;% select(starts_with(\"a\"))\nflights %&gt;% select(ends_with(\"delay\"))\nflights %&gt;% select(contains(\"time\"))\n</code></pre>"},{"location":"lectures/SIWS/03-wrangling/#rename-variables-rename","title":"<code>rename</code> variables {#rename}","text":"<p>Another useful function is \\index{dplyr!rename()} <code>rename()</code>, which as you may have guessed changes the name of variables. Suppose we want to only focus on <code>dep_time</code> and <code>arr_time</code> and change <code>dep_time</code> and <code>arr_time</code> to be <code>departure_time</code> and <code>arrival_time</code> instead in the <code>flights_time</code> data frame:</p> <pre><code>flights_time_new &lt;- flights %&gt;% \n  select(dep_time, arr_time) %&gt;% \n  rename(departure_time = dep_time, arrival_time = arr_time)\nglimpse(flights_time_new)\n</code></pre> <p>Note that in this case we used a single <code>=</code> sign within the <code>rename()</code>. For example, <code>departure_time = dep_time</code> renames the <code>dep_time</code> variable to have the new name <code>departure_time</code>. This is because we are not testing for equality like we would using <code>==</code>. Instead we want to assign a new variable <code>departure_time</code> to have the same values as <code>dep_time</code> and then delete the variable <code>dep_time</code>. Note that new <code>dplyr</code> users often forget that the new variable name comes before the equal sign. </p>"},{"location":"lectures/SIWS/03-wrangling/#top_n-values-of-a-variable","title":"<code>top_n</code> values of a variable","text":"<p>We can also return the top <code>n</code> values of a variable using the <code>top_n()</code> \\index{dplyr!top_n()} function. For example, we can return a data frame of the top 10 destination airports using the example from Subsection \\@ref(diff-key). Observe that we set the number of values to return to <code>n = 10</code> and <code>wt = num_flights</code> to indicate that we want the rows corresponding to the top 10 values of <code>num_flights</code>. See the help file for <code>top_n()</code> by running <code>?top_n</code> for more information. </p> <pre><code>named_dests %&gt;% top_n(n = 10, wt = num_flights)\n</code></pre> <p>Let's further <code>arrange()</code> these results in descending order of <code>num_flights</code>:</p> <pre><code>named_dests  %&gt;% \n  top_n(n = 10, wt = num_flights) %&gt;% \n  arrange(desc(num_flights))\n</code></pre> <pre><code>\\vspace{-0.15in}\n**_Learning check_**\n\\vspace{-0.1in}\n</code></pre> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> What are some ways to select all three of the <code>dest</code>, <code>air_time</code>, and <code>distance</code> variables from <code>flights</code>?  Give the code showing how to do this in at least three different ways.</p> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> How could one use <code>starts_with()</code>, <code>ends_with()</code>, and <code>contains()</code> to select columns from the <code>flights</code> data frame?  Provide three different examples in total: one for <code>starts_with()</code>, one for <code>ends_with()</code>, and one for <code>contains()</code>.</p> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> Why might we want to use the <code>select</code> function on a data frame?</p> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> Create a new data frame that shows the top 5 airports with the largest arrival delays from NYC in 2013.</p> <pre><code>\\vspace{-0.25in}\n\\vspace{-0.25in}\n</code></pre>"},{"location":"lectures/SIWS/03-wrangling/#conclusion-wrangling-conclusion","title":"Conclusion {#wrangling-conclusion}","text":""},{"location":"lectures/SIWS/03-wrangling/#summary-table","title":"Summary table","text":"<p>Let's recap our data wrangling verbs in Table \\@ref(tab:wrangle-summary-table). Using these verbs and the pipe <code>%&gt;%</code> operator from Section \\@ref(piping), you'll be able to write easily legible code to perform almost all the data wrangling and data transformation necessary for the rest of this book. </p> <pre><code># The following Google Doc is published to CSV and loaded using read_csv():\n# https://docs.google.com/spreadsheets/d/1nRkXfYMQiTj79c08xQPY0zkoJSpde3NC1w6DRhsWCss/edit#gid=0\n\nif (!file.exists(\"rds/ch4_scenarios.rds\")) {\n  ch4_scenarios &lt;-\n    \"https://docs.google.com/spreadsheets/d/e/2PACX-1vRgwl1lugQA6zxzfB6_0hM5vBjXkU7cbUVYYXLcWeaRJ9HmvNXyCjzJCgiGW8HCe1kvjLCGYHf-BvYL/pub?gid=0&amp;single=true&amp;output=csv\" %&gt;%\n    read_csv(na = \"\") %&gt;%\n    select(-X1)\n  write_rds(ch4_scenarios, \"rds/ch4_scenarios.rds\")\n} else {\n  ch4_scenarios &lt;- read_rds(\"rds/ch4_scenarios.rds\")\n}\n\nif (is_latex_output()) {\n  ch4_scenarios %&gt;%\n    # Weird tick marks show up in PDF:\n    mutate(\n      Verb = str_replace_all(Verb, \"`\", \"\"),\n      `Data wrangling operation` = str_replace_all(`Data wrangling operation`, \"`\", \"\"),\n    ) %&gt;%\n    kbl(\n      caption = \"Summary of data wrangling verbs\",\n      booktabs = TRUE,\n      linesep = \"\",\n      format = \"latex\"\n    ) %&gt;%\n    kable_styling(\n      font_size = ifelse(is_latex_output(), 10, 16),\n      latex_options = c(\"hold_position\")\n    ) %&gt;%\n    column_spec(1, width = \"0.9in\") %&gt;%\n    column_spec(2, width = \"4in\")\n} else {\n  ch4_scenarios %&gt;%\n    kable(\n      caption = \"Summary of data wrangling verbs\",\n      booktabs = TRUE,\n      format = \"html\"\n    )\n}\n</code></pre> <pre><code>\\vspace{-0.15in}\n**_Learning check_** \n\\vspace{-0.1in}\n</code></pre> <p><code>r paste0(\"(LC\", chap, \".\", (lc &lt;- lc + 1), \")\")</code> Let's now put your newly acquired data wrangling skills to the test!</p> <p>An airline industry measure of a passenger airline's capacity is the available seat miles, which is equal to the number of seats available multiplied by the number of miles or kilometers flown summed over all flights. </p> <p>For example, let's consider the scenario in Figure \\@ref(fig:available-seat-miles). Since the airplane has 4 seats and it travels 200 miles, the available seat miles are \\(4 \\times 200 = 800\\).</p> <pre><code>include_graphics(\"images/flowcharts/flowchart/flowchart.012.png\")\n</code></pre> <p>Extending this idea, let's say an airline had 2 flights using a plane with 10 seats that flew 500 miles and 3 flights using a plane with 20 seats that flew 1000 miles, the available seat miles would be \\(2 \\times 10 \\times 500 + 3 \\times 20 \\times 1000 = 70,000\\) seat miles. </p> <p>Using the datasets included in the <code>nycflights13</code> package, compute the available seat miles for each airline sorted in descending order. After completing all the necessary data wrangling steps, the resulting data frame should have 16 rows (one for each airline) and 2 columns (airline name and available seat miles). Here are some hints:</p> <ol> <li>Crucial: Unless you are very confident in what you are doing, it is worthwhile not starting to code right away. Rather, first sketch out on paper all the necessary data wrangling steps not using exact code, but rather high-level pseudocode that is informal yet detailed enough to articulate what you are doing. This way you won't confuse what you are trying to do (the algorithm) with how you are going to do it (writing <code>dplyr</code> code). </li> <li>Take a close look at all the datasets using the <code>View()</code> function: <code>flights</code>, <code>weather</code>, <code>planes</code>, <code>airports</code>, and <code>airlines</code> to identify which variables are necessary to compute available seat miles.</li> <li>Figure \\@ref(fig:reldiagram) showing how the various datasets can be joined will also be useful. </li> <li>Consider the data wrangling verbs in Table \\@ref(tab:wrangle-summary-table) as your toolbox!</li> </ol> <pre><code>\\vspace{-0.25in}\n\\vspace{-0.25in}\n</code></pre>"},{"location":"lectures/SIWS/03-wrangling/#additional-resources","title":"Additional resources","text":"<pre><code>if(is_latex_output()){\n  cat(\"Solutions to all *Learning checks* can be found online in [Appendix D](https://moderndive.com/D-appendixD.html).\")\n}\n</code></pre> <pre><code>generate_r_file_link(\"03-wrangling.R\")\n</code></pre> <p>In the online Appendix C, we provide a page of data wrangling \"tips and tricks\" consisting of the most common data wrangling questions we've encountered in student projects (shout out to Dr. Jenny Smetzer for her work setting this up!):</p> <ul> <li>Dealing with missing values</li> <li>Reordering bars in a barplot</li> <li>Showing money on an axis</li> <li>Changing values inside cells</li> <li>Converting a numerical variable to a categorical one</li> <li>Computing proportions</li> <li>Dealing with %, commas, and $</li> </ul> <p>However to provide a tips and tricks page covering all possible data wrangling questions would be too long to be useful! If you want to further unlock the power of the <code>dplyr</code> package for data wrangling, we suggest that you check out RStudio's \"Data Transformation with dplyr\" cheatsheet. This cheatsheet summarizes much more than what we've discussed in this chapter, in particular more intermediate level and advanced data wrangling functions, while providing quick and easy-to-read visual descriptions. In fact, many of the diagrams illustrating data wrangling operations in this chapter, such as Figure \\@ref(fig:filter) on <code>filter()</code>, originate from this cheatsheet.</p> <p>In the current version of RStudio in late 2019, you can access this cheatsheet by going to the RStudio Menu Bar -&gt; Help -&gt; Cheatsheets -&gt; \"Data Transformation with dplyr.\" <code>r if(is_html_output()) \"You can see a preview in the figure below.\"</code></p> <pre><code>if (is_html_output()) {\n  include_graphics(\"images/cheatsheets/dplyr_cheatsheet-1.png\")\n}\n</code></pre> <p>On top of the data wrangling verbs and examples we presented in this section, if you'd like to see more examples of using the <code>dplyr</code> package for data wrangling, check out Chapter 5 of R for Data Science [@rds2016].</p>"},{"location":"lectures/SIWS/03-wrangling/#whats-to-come","title":"What's to come?","text":"<p>So far in this book, we've explored, visualized, and wrangled data saved in data frames. These data frames were saved in a spreadsheet-like format: in a rectangular shape with a certain number of rows corresponding to observations and a certain number of columns corresponding to variables describing these observations. </p> <p>We'll see in the upcoming Chapter \\@ref(tidy) that there are actually two ways to represent data in spreadsheet-type rectangular format: (1) \"wide\" format and (2) \"tall/narrow\" format. The tall/narrow format is also known as \"tidy\" format in R user circles. While the distinction between \"tidy\" and non-\"tidy\" formatted data is subtle, it has immense implications for our data science work. This is because almost all the packages used in this book, including the <code>ggplot2</code> package for data visualization and the <code>dplyr</code> package for data wrangling, all assume that all data frames are in \"tidy\" format. </p> <p>Furthermore, up until now we've only explored, visualized, and wrangled data saved within R packages. But what if you want to analyze data that you have saved in a Microsoft Excel, a Google Sheets, or a \"Comma-Separated Values\" (CSV) file? In Section \\@ref(csv), we'll show you how to import this data into R using the <code>readr</code> package. </p>"},{"location":"lectures/SP/","title":"Index","text":""},{"location":"lectures/SP/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul> \\[ f(x) = \\int_{-\\infty}^\\infty     \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}     \\,d\\xi \\] <p>inline tex codes \\(E=mc^2\\).</p> \\[ \\cos x=\\sum_{k=0}^{\\infty}\\frac{(-1)^k}{(2k)!}x^{2k} \\]"},{"location":"research/","title":"Index","text":""},{"location":"research/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul> \\[ f(x) = \\int_{-\\infty}^\\infty     \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}     \\,d\\xi \\] <p>inline tex codes \\(E=mc^2\\).</p> \\[ \\cos x=\\sum_{k=0}^{\\infty}\\frac{(-1)^k}{(2k)!}x^{2k} \\]"}]}